(function() {
    var type_impls = Object.fromEntries([["bevy",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Commands%3C'w,+'s%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#193\">Source</a><a href=\"#impl-Commands%3C'w,+'s%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'w, 's&gt; <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'w, 's&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#199\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.new\" class=\"fn\">new</a>(queue: &amp;'s mut <a class=\"struct\" href=\"bevy/ecs/world/struct.CommandQueue.html\" title=\"struct bevy::ecs::world::CommandQueue\">CommandQueue</a>, world: &amp;'w <a class=\"struct\" href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\">World</a>) -&gt; <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'w, 's&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a new <code>Commands</code> instance from a <a href=\"bevy/ecs/world/struct.CommandQueue.html\" title=\"struct bevy::ecs::world::CommandQueue\"><code>CommandQueue</code></a> and a <a href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\"><code>World</code></a>.</p>\n<p>It is not required to call this constructor when using <code>Commands</code> as a <a href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">system parameter</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_from_entities\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#208\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.new_from_entities\" class=\"fn\">new_from_entities</a>(\n    queue: &amp;'s mut <a class=\"struct\" href=\"bevy/ecs/world/struct.CommandQueue.html\" title=\"struct bevy::ecs::world::CommandQueue\">CommandQueue</a>,\n    entities: &amp;'w <a class=\"struct\" href=\"bevy/ecs/entity/struct.Entities.html\" title=\"struct bevy::ecs::entity::Entities\">Entities</a>,\n) -&gt; <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'w, 's&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a new <code>Commands</code> instance from a <a href=\"bevy/ecs/world/struct.CommandQueue.html\" title=\"struct bevy::ecs::world::CommandQueue\"><code>CommandQueue</code></a> and an <a href=\"bevy/ecs/entity/struct.Entities.html\" title=\"struct bevy::ecs::entity::Entities\"><code>Entities</code></a> reference.</p>\n<p>It is not required to call this constructor when using <code>Commands</code> as a <a href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">system parameter</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reborrow\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#250\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.reborrow\" class=\"fn\">reborrow</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'w, '_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\"><code>Commands</code></a> with a smaller lifetime.\nThis is useful if you have <code>&amp;mut Commands</code> but need <code>Commands</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>my_system(<span class=\"kw-2\">mut </span>commands: Commands) {\n    <span class=\"comment\">// We do our initialization in a separate function,\n    // which expects an owned `Commands`.\n    </span>do_initialization(commands.reborrow());\n\n    <span class=\"comment\">// Since we only reborrowed the commands instead of moving them, we can still use them.\n    </span>commands.spawn_empty();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#263\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"bevy/ecs/world/struct.CommandQueue.html\" title=\"struct bevy::ecs::world::CommandQueue\">CommandQueue</a>)</h4></section></summary><div class=\"docblock\"><p>Take all commands from <code>other</code> and append them to <code>self</code>, leaving <code>other</code> empty</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#307\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.spawn_empty\" class=\"fn\">spawn_empty</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\">EntityCommands</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Reserves a new empty <a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entity</code></a> to be spawned, and returns its corresponding <a href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\"><code>EntityCommands</code></a>.</p>\n<p>See <a href=\"bevy/prelude/struct.World.html#method.spawn_empty\" title=\"method bevy::prelude::World::spawn_empty\"><code>World::spawn_empty</code></a> for more details.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Label(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str);\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Strength(u32);\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Agility(u32);\n\n<span class=\"kw\">fn </span>example_system(<span class=\"kw-2\">mut </span>commands: Commands) {\n    <span class=\"comment\">// Create a new empty entity and retrieve its id.\n    </span><span class=\"kw\">let </span>empty_entity = commands.spawn_empty().id();\n\n    <span class=\"comment\">// Create another empty entity, then add some component to it\n    </span>commands.spawn_empty()\n        <span class=\"comment\">// adds a new component bundle to the entity\n        </span>.insert((Strength(<span class=\"number\">1</span>), Agility(<span class=\"number\">2</span>)))\n        <span class=\"comment\">// adds a single component to the entity\n        </span>.insert(Label(<span class=\"string\">\"hello world\"</span>));\n}</code></pre></div>\n<h5 id=\"see-also\"><a class=\"doc-anchor\" href=\"#see-also\">ยง</a>See also</h5>\n<ul>\n<li><a href=\"bevy/prelude/struct.Commands.html#method.spawn\" title=\"method bevy::prelude::Commands::spawn\"><code>spawn</code></a> to spawn an entity with a bundle.</li>\n<li><a href=\"bevy/prelude/struct.Commands.html#method.spawn_batch\" title=\"method bevy::prelude::Commands::spawn_batch\"><code>spawn_batch</code></a> to spawn entities with a bundle each.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_spawn\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#330\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.get_or_spawn\" class=\"fn\">get_or_spawn</a>(&amp;mut self, entity: <a class=\"struct\" href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\">Entity</a>) -&gt; <a class=\"struct\" href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\">EntityCommands</a>&lt;'_&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated since 0.15.0: use Commands::spawn instead</span></div></span></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for creating a new <a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entity</code></a> if the given one does not exists,\nand returns its corresponding <a href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\"><code>EntityCommands</code></a>.</p>\n<p>This method silently fails by returning <a href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\"><code>EntityCommands</code></a>\neven if the given <code>Entity</code> cannot be spawned.</p>\n<p>See <a href=\"bevy/prelude/struct.World.html#method.get_or_spawn\" title=\"method bevy::prelude::World::get_or_spawn\"><code>World::get_or_spawn</code></a> for more details.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">ยง</a>Note</h5>\n<p>Spawning a specific <code>entity</code> value is rarely the right choice. Most apps should favor\n<a href=\"bevy/prelude/struct.Commands.html#method.spawn\" title=\"method bevy::prelude::Commands::spawn\"><code>Commands::spawn</code></a>. This method should generally only be used for sharing entities across\napps, and only when they have a scheme worked out to share an ID space (which doesnโt happen\nby default).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#395\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.spawn\" class=\"fn\">spawn</a>&lt;T&gt;(&amp;mut self, bundle: T) -&gt; <a class=\"struct\" href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\">EntityCommands</a>&lt;'_&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\">Bundle</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for creating a new entity with the given <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a>โs components,\nand returns its corresponding <a href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\"><code>EntityCommands</code></a>.</p>\n<p>In case multiple bundles of the same <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a> type need to be spawned,\n<a href=\"bevy/prelude/struct.Commands.html#method.spawn_batch\" title=\"method bevy::prelude::Commands::spawn_batch\"><code>spawn_batch</code></a> should be used for better performance.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bevy_ecs::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Component1;\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Component2;\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Label(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str);\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Strength(u32);\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Agility(u32);\n\n<span class=\"attr\">#[derive(Bundle)]\n</span><span class=\"kw\">struct </span>ExampleBundle {\n    a: Component1,\n    b: Component2,\n}\n\n<span class=\"kw\">fn </span>example_system(<span class=\"kw-2\">mut </span>commands: Commands) {\n    <span class=\"comment\">// Create a new entity with a single component.\n    </span>commands.spawn(Component1);\n\n    <span class=\"comment\">// Create a new entity with a component bundle.\n    </span>commands.spawn(ExampleBundle {\n        a: Component1,\n        b: Component2,\n    });\n\n    commands\n        <span class=\"comment\">// Create a new entity with two components using a \"tuple bundle\".\n        </span>.spawn((Component1, Component2))\n        <span class=\"comment\">// `spawn returns a builder, so you can insert more bundles like this:\n        </span>.insert((Strength(<span class=\"number\">1</span>), Agility(<span class=\"number\">2</span>)))\n        <span class=\"comment\">// or insert single components like this:\n        </span>.insert(Label(<span class=\"string\">\"hello world\"</span>));\n}</code></pre></div>\n<h5 id=\"see-also-1\"><a class=\"doc-anchor\" href=\"#see-also-1\">ยง</a>See also</h5>\n<ul>\n<li><a href=\"bevy/prelude/struct.Commands.html#method.spawn_empty\" title=\"method bevy::prelude::Commands::spawn_empty\"><code>spawn_empty</code></a> to spawn an entity without any components.</li>\n<li><a href=\"bevy/prelude/struct.Commands.html#method.spawn_batch\" title=\"method bevy::prelude::Commands::spawn_batch\"><code>spawn_batch</code></a> to spawn entities with a bundle each.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entity\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#437\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.entity\" class=\"fn\">entity</a>(&amp;mut self, entity: <a class=\"struct\" href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\">Entity</a>) -&gt; <a class=\"struct\" href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\">EntityCommands</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\"><code>EntityCommands</code></a> for the requested <a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entity</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">ยง</a>Panics</h5>\n<p>This method panics if the requested entity does not exist.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bevy_ecs::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Label(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str);\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Strength(u32);\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Agility(u32);\n\n<span class=\"kw\">fn </span>example_system(<span class=\"kw-2\">mut </span>commands: Commands) {\n    <span class=\"comment\">// Create a new, empty entity\n    </span><span class=\"kw\">let </span>entity = commands.spawn_empty().id();\n\n    commands.entity(entity)\n        <span class=\"comment\">// adds a new component bundle to the entity\n        </span>.insert((Strength(<span class=\"number\">1</span>), Agility(<span class=\"number\">2</span>)))\n        <span class=\"comment\">// adds a single component to the entity\n        </span>.insert(Label(<span class=\"string\">\"hello world\"</span>));\n}</code></pre></div>\n<h5 id=\"see-also-2\"><a class=\"doc-anchor\" href=\"#see-also-2\">ยง</a>See also</h5>\n<ul>\n<li><a href=\"bevy/prelude/struct.Commands.html#method.get_entity\" title=\"method bevy::prelude::Commands::get_entity\"><code>get_entity</code></a> for the fallible version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_entity\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#485\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.get_entity\" class=\"fn\">get_entity</a>(&amp;mut self, entity: <a class=\"struct\" href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\">Entity</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\">EntityCommands</a>&lt;'_&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\"><code>EntityCommands</code></a> for the requested <a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entity</code></a>, if it exists.</p>\n<p>Returns <code>None</code> if the entity does not exist.</p>\n<p>This method does not guarantee that <code>EntityCommands</code> will be successfully applied,\nsince another command in the queue may delete the entity before them.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bevy_ecs::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[derive(Component)]\n</span><span class=\"kw\">struct </span>Label(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str);\n<span class=\"kw\">fn </span>example_system(<span class=\"kw-2\">mut </span>commands: Commands) {\n    <span class=\"comment\">// Create a new, empty entity\n    </span><span class=\"kw\">let </span>entity = commands.spawn_empty().id();\n\n    <span class=\"comment\">// Get the entity if it still exists, which it will in this case\n    </span><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span>entity_commands) = commands.get_entity(entity) {\n        <span class=\"comment\">// adds a single component to the entity\n        </span>entity_commands.insert(Label(<span class=\"string\">\"hello world\"</span>));\n    }\n}</code></pre></div>\n<h5 id=\"see-also-3\"><a class=\"doc-anchor\" href=\"#see-also-3\">ยง</a>See also</h5>\n<ul>\n<li><a href=\"bevy/prelude/struct.Commands.html#method.entity\" title=\"method bevy::prelude::Commands::entity\"><code>entity</code></a> for the panicking version.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_batch\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#531-534\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.spawn_batch\" class=\"fn\">spawn_batch</a>&lt;I&gt;(&amp;mut self, bundles_iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\">Bundle</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for creating entities with a particular <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a> type.</p>\n<p><code>bundles_iter</code> is a type that can be converted into a <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a> iterator\n(it can also be a collection).</p>\n<p>This method is equivalent to iterating <code>bundles_iter</code>\nand calling <a href=\"bevy/prelude/struct.Commands.html#method.spawn\" title=\"method bevy::prelude::Commands::spawn\"><code>spawn</code></a> on each bundle,\nbut it is faster due to memory pre-allocation.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>commands.spawn_batch(<span class=\"macro\">vec!</span>[\n    (\n        Name(<span class=\"string\">\"Alice\"</span>.to_string()),\n        Score(<span class=\"number\">0</span>),\n    ),\n    (\n        Name(<span class=\"string\">\"Bob\"</span>.to_string()),\n        Score(<span class=\"number\">0</span>),\n    ),\n]);</code></pre></div>\n<h5 id=\"see-also-4\"><a class=\"doc-anchor\" href=\"#see-also-4\">ยง</a>See also</h5>\n<ul>\n<li><a href=\"bevy/prelude/struct.Commands.html#method.spawn\" title=\"method bevy::prelude::Commands::spawn\"><code>spawn</code></a> to spawn an entity with a bundle.</li>\n<li><a href=\"bevy/prelude/struct.Commands.html#method.spawn_empty\" title=\"method bevy::prelude::Commands::spawn_empty\"><code>spawn_empty</code></a> to spawn an entity without any components.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.queue\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#571\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.queue\" class=\"fn\">queue</a>&lt;C&gt;(&amp;mut self, command: C)<div class=\"where\">where\n    C: <a class=\"trait\" href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\">Command</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a generic <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the command queue.</p>\n<p><code>command</code> can be a built-in command, custom struct that implements <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> or a closure\nthat takes <a href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\"><code>&amp;mut World</code></a> as an argument.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Resource, Default)]\n</span><span class=\"kw\">struct </span>Counter(u64);\n\n<span class=\"kw\">struct </span>AddToCounter(u64);\n\n<span class=\"kw\">impl </span>Command <span class=\"kw\">for </span>AddToCounter {\n    <span class=\"kw\">fn </span>apply(<span class=\"self\">self</span>, world: <span class=\"kw-2\">&amp;mut </span>World) {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = world.get_resource_or_insert_with(Counter::default);\n        counter.<span class=\"number\">0 </span>+= <span class=\"self\">self</span>.<span class=\"number\">0</span>;\n    }\n}\n\n<span class=\"kw\">fn </span>add_three_to_counter_system(<span class=\"kw-2\">mut </span>commands: Commands) {\n    commands.queue(AddToCounter(<span class=\"number\">3</span>));\n}\n<span class=\"kw\">fn </span>add_twenty_five_to_counter_system(<span class=\"kw-2\">mut </span>commands: Commands) {\n    commands.queue(|world: <span class=\"kw-2\">&amp;mut </span>World| {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counter = world.get_resource_or_insert_with(Counter::default);\n        counter.<span class=\"number\">0 </span>+= <span class=\"number\">25</span>;\n    });\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_or_spawn_batch\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#608-611\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.insert_or_spawn_batch\" class=\"fn\">insert_or_spawn_batch</a>&lt;I, B&gt;(&amp;mut self, bundles_iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\">Entity</a>, B)&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    B: <a class=\"trait\" href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\">Bundle</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for creating entities, if needed,\nand for adding a bundle to each entity.</p>\n<p><code>bundles_iter</code> is a type that can be converted into an (<a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entity</code></a>, <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a>) iterator\n(it can also be a collection).</p>\n<p>When the command is applied,\nfor each (<code>Entity</code>, <code>Bundle</code>) pair in the given <code>bundles_iter</code>,\nthe <code>Entity</code> is spawned, if it does not exist already.\nThen, the <code>Bundle</code> is added to the entity.</p>\n<p>This method is equivalent to iterating <code>bundles_iter</code>,\ncalling <a href=\"bevy/prelude/struct.Commands.html#method.get_or_spawn\" title=\"method bevy::prelude::Commands::get_or_spawn\"><code>get_or_spawn</code></a> for each bundle,\nand passing it to <a href=\"bevy/prelude/struct.EntityCommands.html#method.insert\" title=\"method bevy::prelude::EntityCommands::insert\"><code>insert</code></a>,\nbut it is faster due to memory pre-allocation.</p>\n<h5 id=\"note-1\"><a class=\"doc-anchor\" href=\"#note-1\">ยง</a>Note</h5>\n<p>Spawning a specific <code>entity</code> value is rarely the right choice. Most apps should use <a href=\"bevy/prelude/struct.Commands.html#method.spawn_batch\" title=\"method bevy::prelude::Commands::spawn_batch\"><code>Commands::spawn_batch</code></a>.\nThis method should generally only be used for sharing entities across apps, and only when they have a scheme\nworked out to share an ID space (which doesnโt happen by default).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_batch\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#635-638\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.insert_batch\" class=\"fn\">insert_batch</a>&lt;I, B&gt;(&amp;mut self, batch: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\">Entity</a>, B)&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    B: <a class=\"trait\" href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\">Bundle</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for adding a <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a> type to a batch of <a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entities</code></a>.</p>\n<p>A batch can be any type that implements <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\"><code>IntoIterator</code></a> containing <code>(Entity, Bundle)</code> tuples,\nsuch as a [<code>Vec&lt;(Entity, Bundle)&gt;</code>] or an array <code>[(Entity, Bundle); N]</code>.</p>\n<p>When the command is applied, for each <code>(Entity, Bundle)</code> pair in the given batch,\nthe <code>Bundle</code> is added to the <code>Entity</code>, overwriting any existing components shared by the <code>Bundle</code>.</p>\n<p>This method is equivalent to iterating the batch,\ncalling <a href=\"bevy/prelude/struct.Commands.html#method.entity\" title=\"method bevy::prelude::Commands::entity\"><code>entity</code></a> for each pair,\nand passing the bundle to <a href=\"bevy/prelude/struct.EntityCommands.html#method.insert\" title=\"method bevy::prelude::EntityCommands::insert\"><code>insert</code></a>,\nbut it is faster due to memory pre-allocation.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">ยง</a>Panics</h5>\n<p>This command panics if any of the given entities do not exist.</p>\n<p>For the non-panicking version, see <a href=\"bevy/prelude/struct.Commands.html#method.try_insert_batch\" title=\"method bevy::prelude::Commands::try_insert_batch\"><code>try_insert_batch</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_batch_if_new\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#662-665\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.insert_batch_if_new\" class=\"fn\">insert_batch_if_new</a>&lt;I, B&gt;(&amp;mut self, batch: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\">Entity</a>, B)&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    B: <a class=\"trait\" href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\">Bundle</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for adding a <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a> type to a batch of <a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entities</code></a>.</p>\n<p>A batch can be any type that implements <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\"><code>IntoIterator</code></a> containing <code>(Entity, Bundle)</code> tuples,\nsuch as a [<code>Vec&lt;(Entity, Bundle)&gt;</code>] or an array <code>[(Entity, Bundle); N]</code>.</p>\n<p>When the command is applied, for each <code>(Entity, Bundle)</code> pair in the given batch,\nthe <code>Bundle</code> is added to the <code>Entity</code>, except for any components already present on the <code>Entity</code>.</p>\n<p>This method is equivalent to iterating the batch,\ncalling <a href=\"bevy/prelude/struct.Commands.html#method.entity\" title=\"method bevy::prelude::Commands::entity\"><code>entity</code></a> for each pair,\nand passing the bundle to <a href=\"bevy/prelude/struct.EntityCommands.html#method.insert_if_new\" title=\"method bevy::prelude::EntityCommands::insert_if_new\"><code>insert_if_new</code></a>,\nbut it is faster due to memory pre-allocation.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">ยง</a>Panics</h5>\n<p>This command panics if any of the given entities do not exist.</p>\n<p>For the non-panicking version, see <a href=\"bevy/prelude/struct.Commands.html#method.try_insert_batch_if_new\" title=\"method bevy::prelude::Commands::try_insert_batch_if_new\"><code>try_insert_batch_if_new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert_batch\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#687-690\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.try_insert_batch\" class=\"fn\">try_insert_batch</a>&lt;I, B&gt;(&amp;mut self, batch: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\">Entity</a>, B)&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    B: <a class=\"trait\" href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\">Bundle</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for adding a <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a> type to a batch of <a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entities</code></a>.</p>\n<p>A batch can be any type that implements <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\"><code>IntoIterator</code></a> containing <code>(Entity, Bundle)</code> tuples,\nsuch as a [<code>Vec&lt;(Entity, Bundle)&gt;</code>] or an array <code>[(Entity, Bundle); N]</code>.</p>\n<p>When the command is applied, for each <code>(Entity, Bundle)</code> pair in the given batch,\nthe <code>Bundle</code> is added to the <code>Entity</code>, overwriting any existing components shared by the <code>Bundle</code>.</p>\n<p>This method is equivalent to iterating the batch,\ncalling <a href=\"bevy/prelude/struct.Commands.html#method.get_entity\" title=\"method bevy::prelude::Commands::get_entity\"><code>get_entity</code></a> for each pair,\nand passing the bundle to <a href=\"bevy/prelude/struct.EntityCommands.html#method.insert\" title=\"method bevy::prelude::EntityCommands::insert\"><code>insert</code></a>,\nbut it is faster due to memory pre-allocation.</p>\n<p>This command silently fails by ignoring any entities that do not exist.</p>\n<p>For the panicking version, see <a href=\"bevy/prelude/struct.Commands.html#method.insert_batch\" title=\"method bevy::prelude::Commands::insert_batch\"><code>insert_batch</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert_batch_if_new\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#712-715\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.try_insert_batch_if_new\" class=\"fn\">try_insert_batch_if_new</a>&lt;I, B&gt;(&amp;mut self, batch: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"struct\" href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\">Entity</a>, B)&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    B: <a class=\"trait\" href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\">Bundle</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for adding a <a href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\"><code>Bundle</code></a> type to a batch of <a href=\"bevy/prelude/struct.Entity.html\" title=\"struct bevy::prelude::Entity\"><code>Entities</code></a>.</p>\n<p>A batch can be any type that implements <a href=\"https://doc.rust-lang.org/1.85.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\"><code>IntoIterator</code></a> containing <code>(Entity, Bundle)</code> tuples,\nsuch as a [<code>Vec&lt;(Entity, Bundle)&gt;</code>] or an array <code>[(Entity, Bundle); N]</code>.</p>\n<p>When the command is applied, for each <code>(Entity, Bundle)</code> pair in the given batch,\nthe <code>Bundle</code> is added to the <code>Entity</code>, except for any components already present on the <code>Entity</code>.</p>\n<p>This method is equivalent to iterating the batch,\ncalling <a href=\"bevy/prelude/struct.Commands.html#method.get_entity\" title=\"method bevy::prelude::Commands::get_entity\"><code>get_entity</code></a> for each pair,\nand passing the bundle to <a href=\"bevy/prelude/struct.EntityCommands.html#method.insert_if_new\" title=\"method bevy::prelude::EntityCommands::insert_if_new\"><code>insert_if_new</code></a>,\nbut it is faster due to memory pre-allocation.</p>\n<p>This command silently fails by ignoring any entities that do not exist.</p>\n<p>For the panicking version, see <a href=\"bevy/prelude/struct.Commands.html#method.insert_batch_if_new\" title=\"method bevy::prelude::Commands::insert_batch_if_new\"><code>insert_batch_if_new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_resource\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#745\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.init_resource\" class=\"fn\">init_resource</a>&lt;R&gt;(&amp;mut self)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"bevy/prelude/trait.Resource.html\" title=\"trait bevy::prelude::Resource\">Resource</a> + <a class=\"trait\" href=\"bevy/prelude/trait.FromWorld.html\" title=\"trait bevy::prelude::FromWorld\">FromWorld</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for inserting a <a href=\"bevy/prelude/trait.Resource.html\" title=\"trait bevy::prelude::Resource\"><code>Resource</code></a> in the <a href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\"><code>World</code></a> with an inferred value.</p>\n<p>The inferred value is determined by the <a href=\"bevy/prelude/trait.FromWorld.html\" title=\"trait bevy::prelude::FromWorld\"><code>FromWorld</code></a> trait of the resource.\nWhen the command is applied,\nif the resource already exists, nothing happens.</p>\n<p>See <a href=\"bevy/prelude/struct.World.html#method.init_resource\" title=\"method bevy::prelude::World::init_resource\"><code>World::init_resource</code></a> for more details.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>commands.init_resource::&lt;Scoreboard&gt;();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_resource\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#775\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.insert_resource\" class=\"fn\">insert_resource</a>&lt;R&gt;(&amp;mut self, resource: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"bevy/prelude/trait.Resource.html\" title=\"trait bevy::prelude::Resource\">Resource</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for inserting a <a href=\"bevy/prelude/trait.Resource.html\" title=\"trait bevy::prelude::Resource\"><code>Resource</code></a> in the <a href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\"><code>World</code></a> with a specific value.</p>\n<p>This will overwrite any previous value of the same resource type.</p>\n<p>See <a href=\"bevy/prelude/struct.World.html#method.insert_resource\" title=\"method bevy::prelude::World::insert_resource\"><code>World::insert_resource</code></a> for more details.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>commands.insert_resource(Scoreboard {\n    current_score: <span class=\"number\">0</span>,\n    high_score: <span class=\"number\">0</span>,\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_resource\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#799\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.remove_resource\" class=\"fn\">remove_resource</a>&lt;R&gt;(&amp;mut self)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"bevy/prelude/trait.Resource.html\" title=\"trait bevy::prelude::Resource\">Resource</a>,</div></h4></section></summary><div class=\"docblock\"><p>Pushes a <a href=\"bevy/prelude/trait.Command.html\" title=\"trait bevy::prelude::Command\"><code>Command</code></a> to the queue for removing a <a href=\"bevy/prelude/trait.Resource.html\" title=\"trait bevy::prelude::Resource\"><code>Resource</code></a> from the <a href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\"><code>World</code></a>.</p>\n<p>See <a href=\"bevy/prelude/struct.World.html#method.remove_resource\" title=\"method bevy::prelude::World::remove_resource\"><code>World::remove_resource</code></a> for more details.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>commands.remove_resource::&lt;Scoreboard&gt;();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_system\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#812\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.run_system\" class=\"fn\">run_system</a>(&amp;mut self, id: <a class=\"struct\" href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\">SystemId</a>)</h4></section></summary><div class=\"docblock\"><p>Runs the system corresponding to the given <a href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\"><code>SystemId</code></a>.\nSystems are ran in an exclusive and single threaded way.\nRunning slow systems can become a bottleneck.</p>\n<p>Calls <a href=\"bevy/prelude/struct.World.html#method.run_system\" title=\"method bevy::prelude::World::run_system\"><code>World::run_system</code></a>.</p>\n<p>There is no way to get the output of a system when run as a command, because the\nexecution of the system happens later. To get the output of a system, use\n<a href=\"bevy/prelude/struct.World.html#method.run_system\" title=\"method bevy::prelude::World::run_system\"><code>World::run_system</code></a> or <a href=\"bevy/prelude/struct.World.html#method.run_system_with_input\" title=\"method bevy::prelude::World::run_system_with_input\"><code>World::run_system_with_input</code></a> instead of running the system as a command.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_system_with_input\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#825-827\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.run_system_with_input\" class=\"fn\">run_system_with_input</a>&lt;I&gt;(\n    &amp;mut self,\n    id: <a class=\"struct\" href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\">SystemId</a>&lt;I&gt;,\n    input: &lt;I as <a class=\"trait\" href=\"bevy/prelude/trait.SystemInput.html\" title=\"trait bevy::prelude::SystemInput\">SystemInput</a>&gt;::<a class=\"associatedtype\" href=\"bevy/prelude/trait.SystemInput.html#associatedtype.Inner\" title=\"type bevy::prelude::SystemInput::Inner\">Inner</a>&lt;'static&gt;,\n)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"bevy/prelude/trait.SystemInput.html\" title=\"trait bevy::prelude::SystemInput\">SystemInput</a> + 'static,\n    &lt;I as <a class=\"trait\" href=\"bevy/prelude/trait.SystemInput.html\" title=\"trait bevy::prelude::SystemInput\">SystemInput</a>&gt;::<a class=\"associatedtype\" href=\"bevy/prelude/trait.SystemInput.html#associatedtype.Inner\" title=\"type bevy::prelude::SystemInput::Inner\">Inner</a>&lt;'static&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h4></section></summary><div class=\"docblock\"><p>Runs the system corresponding to the given <a href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\"><code>SystemId</code></a>.\nSystems are ran in an exclusive and single threaded way.\nRunning slow systems can become a bottleneck.</p>\n<p>Calls <a href=\"bevy/prelude/struct.World.html#method.run_system_with_input\" title=\"method bevy::prelude::World::run_system_with_input\"><code>World::run_system_with_input</code></a>.</p>\n<p>There is no way to get the output of a system when run as a command, because the\nexecution of the system happens later. To get the output of a system, use\n<a href=\"bevy/prelude/struct.World.html#method.run_system\" title=\"method bevy::prelude::World::run_system\"><code>World::run_system</code></a> or <a href=\"bevy/prelude/struct.World.html#method.run_system_with_input\" title=\"method bevy::prelude::World::run_system_with_input\"><code>World::run_system_with_input</code></a> instead of running the system as a command.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_system\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#881-887\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.register_system\" class=\"fn\">register_system</a>&lt;I, O, M&gt;(\n    &amp;mut self,\n    system: impl <a class=\"trait\" href=\"bevy/prelude/trait.IntoSystem.html\" title=\"trait bevy::prelude::IntoSystem\">IntoSystem</a>&lt;I, O, M&gt; + 'static,\n) -&gt; <a class=\"struct\" href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\">SystemId</a>&lt;I, O&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"bevy/prelude/trait.SystemInput.html\" title=\"trait bevy::prelude::SystemInput\">SystemInput</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Registers a system and returns a <a href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\"><code>SystemId</code></a> so it can later be called by <a href=\"bevy/prelude/struct.World.html#method.run_system\" title=\"method bevy::prelude::World::run_system\"><code>World::run_system</code></a>.</p>\n<p>Itโs possible to register the same systems more than once, theyโll be stored separately.</p>\n<p>This is different from adding systems to a <a href=\"bevy/prelude/struct.Schedule.html\" title=\"struct bevy::prelude::Schedule\"><code>Schedule</code></a>,\nbecause the <a href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\"><code>SystemId</code></a> that is returned can be used anywhere in the <a href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\"><code>World</code></a> to run the associated system.\nThis allows for running systems in a push-based fashion.\nUsing a <a href=\"bevy/prelude/struct.Schedule.html\" title=\"struct bevy::prelude::Schedule\"><code>Schedule</code></a> is still preferred for most cases\ndue to its better performance and ability to run non-conflicting systems simultaneously.</p>\n<p>If you want to prevent Commands from registering the same system multiple times, consider using <a href=\"bevy/prelude/struct.Local.html\" title=\"struct bevy::prelude::Local\"><code>Local</code></a></p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">ยง</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"attr\">#[derive(Resource)]\n</span><span class=\"kw\">struct </span>Counter(i32);\n\n<span class=\"kw\">fn </span>register_system(<span class=\"kw-2\">mut </span>local_system: Local&lt;<span class=\"prelude-ty\">Option</span>&lt;SystemId&gt;&gt;, <span class=\"kw-2\">mut </span>commands: Commands) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(system) = <span class=\"kw-2\">*</span>local_system {\n        commands.run_system(system);\n    } <span class=\"kw\">else </span>{\n        <span class=\"kw-2\">*</span>local_system = <span class=\"prelude-val\">Some</span>(commands.register_system(increment_counter));\n    }\n}\n\n<span class=\"kw\">fn </span>increment_counter(<span class=\"kw-2\">mut </span>value: ResMut&lt;Counter&gt;) {\n    value.<span class=\"number\">0 </span>+= <span class=\"number\">1</span>;\n}\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unregister_system\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#897-900\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.unregister_system\" class=\"fn\">unregister_system</a>&lt;I, O&gt;(&amp;mut self, system_id: <a class=\"struct\" href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\">SystemId</a>&lt;I, O&gt;)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"bevy/prelude/trait.SystemInput.html\" title=\"trait bevy::prelude::SystemInput\">SystemInput</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Removes a system previously registered with <a href=\"bevy/prelude/struct.Commands.html#method.register_system\" title=\"method bevy::prelude::Commands::register_system\"><code>Commands::register_system</code></a> or <a href=\"bevy/prelude/struct.World.html#method.register_system\" title=\"method bevy::prelude::World::register_system\"><code>World::register_system</code></a>.</p>\n<p>See <a href=\"bevy/prelude/struct.World.html#method.unregister_system\" title=\"method bevy::prelude::World::unregister_system\"><code>World::unregister_system</code></a> for more information.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_system_cached\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#909-912\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.run_system_cached\" class=\"fn\">run_system_cached</a>&lt;M, S&gt;(&amp;mut self, system: S)<div class=\"where\">where\n    M: 'static,\n    S: <a class=\"trait\" href=\"bevy/prelude/trait.IntoSystem.html\" title=\"trait bevy::prelude::IntoSystem\">IntoSystem</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, M&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Similar to <a href=\"bevy/prelude/struct.Commands.html#method.run_system\" title=\"method bevy::prelude::Commands::run_system\"><code>Self::run_system</code></a>, but caching the <a href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\"><code>SystemId</code></a> in a\n<a href=\"bevy/ecs/system/struct.CachedSystemId.html\" title=\"struct bevy::ecs::system::CachedSystemId\"><code>CachedSystemId</code></a> resource.</p>\n<p>See <a href=\"bevy/prelude/struct.World.html#method.register_system_cached\" title=\"method bevy::prelude::World::register_system_cached\"><code>World::register_system_cached</code></a> for more information.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_system_cached_with\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#920-924\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.run_system_cached_with\" class=\"fn\">run_system_cached_with</a>&lt;I, M, S&gt;(\n    &amp;mut self,\n    system: S,\n    input: &lt;I as <a class=\"trait\" href=\"bevy/prelude/trait.SystemInput.html\" title=\"trait bevy::prelude::SystemInput\">SystemInput</a>&gt;::<a class=\"associatedtype\" href=\"bevy/prelude/trait.SystemInput.html#associatedtype.Inner\" title=\"type bevy::prelude::SystemInput::Inner\">Inner</a>&lt;'static&gt;,\n)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"bevy/prelude/trait.SystemInput.html\" title=\"trait bevy::prelude::SystemInput\">SystemInput</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    &lt;I as <a class=\"trait\" href=\"bevy/prelude/trait.SystemInput.html\" title=\"trait bevy::prelude::SystemInput\">SystemInput</a>&gt;::<a class=\"associatedtype\" href=\"bevy/prelude/trait.SystemInput.html#associatedtype.Inner\" title=\"type bevy::prelude::SystemInput::Inner\">Inner</a>&lt;'static&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    M: 'static,\n    S: <a class=\"trait\" href=\"bevy/prelude/trait.IntoSystem.html\" title=\"trait bevy::prelude::IntoSystem\">IntoSystem</a>&lt;I, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, M&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Similar to <a href=\"bevy/prelude/struct.Commands.html#method.run_system_with_input\" title=\"method bevy::prelude::Commands::run_system_with_input\"><code>Self::run_system_with_input</code></a>, but caching the <a href=\"bevy/ecs/system/struct.SystemId.html\" title=\"struct bevy::ecs::system::SystemId\"><code>SystemId</code></a> in a\n<a href=\"bevy/ecs/system/struct.CachedSystemId.html\" title=\"struct bevy::ecs::system::CachedSystemId\"><code>CachedSystemId</code></a> resource.</p>\n<p>See <a href=\"bevy/prelude/struct.World.html#method.register_system_cached\" title=\"method bevy::prelude::World::register_system_cached\"><code>World::register_system_cached</code></a> for more information.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trigger\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#933\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.trigger\" class=\"fn\">trigger</a>(&amp;mut self, event: impl <a class=\"trait\" href=\"bevy/prelude/trait.Event.html\" title=\"trait bevy::prelude::Event\">Event</a>)</h4></section></summary><div class=\"docblock\"><p>Sends a โglobalโ <a href=\"bevy/prelude/struct.Trigger.html\" title=\"struct bevy::prelude::Trigger\"><code>Trigger</code></a> without any targets. This will run any <a href=\"bevy/prelude/struct.Observer.html\" title=\"struct bevy::prelude::Observer\"><code>Observer</code></a> of the <code>event</code> that\nisnโt scoped to specific targets.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trigger_targets\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#941-945\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.trigger_targets\" class=\"fn\">trigger_targets</a>(\n    &amp;mut self,\n    event: impl <a class=\"trait\" href=\"bevy/prelude/trait.Event.html\" title=\"trait bevy::prelude::Event\">Event</a>,\n    targets: impl <a class=\"trait\" href=\"bevy/ecs/observer/trait.TriggerTargets.html\" title=\"trait bevy::ecs::observer::TriggerTargets\">TriggerTargets</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n)</h4></section></summary><div class=\"docblock\"><p>Sends a <a href=\"bevy/prelude/struct.Trigger.html\" title=\"struct bevy::prelude::Trigger\"><code>Trigger</code></a> for the given targets. This will run any <a href=\"bevy/prelude/struct.Observer.html\" title=\"struct bevy::prelude::Observer\"><code>Observer</code></a> of the <code>event</code> that\nwatches those targets.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_observer\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#955-958\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.add_observer\" class=\"fn\">add_observer</a>&lt;E, B, M&gt;(\n    &amp;mut self,\n    observer: impl <a class=\"trait\" href=\"bevy/ecs/system/trait.IntoObserverSystem.html\" title=\"trait bevy::ecs::system::IntoObserverSystem\">IntoObserverSystem</a>&lt;E, B, M&gt;,\n) -&gt; <a class=\"struct\" href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\">EntityCommands</a>&lt;'_&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"bevy/prelude/trait.Event.html\" title=\"trait bevy::prelude::Event\">Event</a>,\n    B: <a class=\"trait\" href=\"bevy/prelude/trait.Bundle.html\" title=\"trait bevy::prelude::Bundle\">Bundle</a>,</div></h4></section></summary><div class=\"docblock\"><p>Spawns an <a href=\"bevy/prelude/struct.Observer.html\" title=\"struct bevy::prelude::Observer\"><code>Observer</code></a> and returns the <a href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\"><code>EntityCommands</code></a> associated\nwith the entity that stores the observer.</p>\n<p><strong>Calling <a href=\"bevy/prelude/struct.EntityCommands.html#method.observe\" title=\"method bevy::prelude::EntityCommands::observe\"><code>observe</code></a> on the returned\n<a href=\"bevy/prelude/struct.EntityCommands.html\" title=\"struct bevy::prelude::EntityCommands\"><code>EntityCommands</code></a> will observe the observer itself, which you very\nlikely do not want.</strong></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_event\" class=\"method\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#972\">Source</a><h4 class=\"code-header\">pub fn <a href=\"bevy/prelude/struct.Commands.html#tymethod.send_event\" class=\"fn\">send_event</a>&lt;E&gt;(&amp;mut self, event: E) -&gt; &amp;mut <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'w, 's&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"bevy/prelude/trait.Event.html\" title=\"trait bevy::prelude::Event\">Event</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sends an arbitrary <a href=\"bevy/prelude/trait.Event.html\" title=\"trait bevy::prelude::Event\"><code>Event</code></a>.</p>\n<p>This is a convenience method for sending events without requiring an <a href=\"bevy/prelude/struct.EventWriter.html\" title=\"struct bevy::prelude::EventWriter\"><code>EventWriter</code></a>.</p>\n<h6 id=\"performance\"><a class=\"doc-anchor\" href=\"#performance\">ยง</a>Performance</h6>\n<p>Since this is a command, exclusive world access is used, which means that it will not profit from\nsystem-level parallelism on supported platforms.\nIf these events are performance-critical or very frequently\nsent, consider using a typed <a href=\"bevy/prelude/struct.EventWriter.html\" title=\"struct bevy::prelude::EventWriter\"><code>EventWriter</code></a> instead.</p>\n</div></details></div></details>",0,"bevy::ecs::system::lifetimeless::SCommands"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CommandsStatesExt-for-Commands%3C'_,+'_%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_state/commands.rs.html#18\">Source</a><a href=\"#impl-CommandsStatesExt-for-Commands%3C'_,+'_%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy/prelude/trait.CommandsStatesExt.html\" title=\"trait bevy::prelude::CommandsStatesExt\">CommandsStatesExt</a> for <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_state\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_state/commands.rs.html#19\">Source</a><a href=\"#method.set_state\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"bevy/prelude/trait.CommandsStatesExt.html#tymethod.set_state\" class=\"fn\">set_state</a>&lt;S&gt;(&amp;mut self, state: S)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"bevy/state/state/trait.FreelyMutableState.html\" title=\"trait bevy::state::state::FreelyMutableState\">FreelyMutableState</a>,</div></h4></section></summary><div class='docblock'>Sets the next state the app should move to. <a href=\"bevy/prelude/trait.CommandsStatesExt.html#tymethod.set_state\">Read more</a></div></details></div></details>","CommandsStatesExt","bevy::ecs::system::lifetimeless::SCommands"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SystemParam-for-Commands%3C'_,+'_%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#96\">Source</a><a href=\"#impl-SystemParam-for-Commands%3C'_,+'_%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">SystemParam</a> for <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#97\">Source</a><a href=\"#associatedtype.State\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.State\" class=\"associatedtype\">State</a> = FetchState</h4></section></summary><div class='docblock'>Used to store data which persists across invocations of a system.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#99\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'w, 's&gt; = <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'w, 's&gt;</h4></section></summary><div class='docblock'>The item type returned when constructing this system param.\nThe value of this associated type should be <code>Self</code>, instantiated with new lifetimes. <a href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.Item\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_state\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#101-104\">Source</a><a href=\"#method.init_state\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"bevy/ecs/system/trait.SystemParam.html#tymethod.init_state\" class=\"fn\">init_state</a>(\n    world: &amp;mut <a class=\"struct\" href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\">World</a>,\n    system_meta: &amp;mut <a class=\"struct\" href=\"bevy/ecs/system/struct.SystemMeta.html\" title=\"struct bevy::ecs::system::SystemMeta\">SystemMeta</a>,\n) -&gt; &lt;<a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt; as <a class=\"trait\" href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy::ecs::system::SystemParam::State\">State</a></h4></section></summary><div class='docblock'>Registers any <a href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\"><code>World</code></a> access used by this <a href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\"><code>SystemParam</code></a>\nand creates a new instance of this paramโs <a href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"associated type bevy::ecs::system::SystemParam::State\"><code>State</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_archetype\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#113-117\">Source</a><a href=\"#method.new_archetype\" class=\"anchor\">ยง</a><h4 class=\"code-header\">unsafe fn <a href=\"bevy/ecs/system/trait.SystemParam.html#method.new_archetype\" class=\"fn\">new_archetype</a>(\n    state: &amp;mut &lt;<a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt; as <a class=\"trait\" href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy::ecs::system::SystemParam::State\">State</a>,\n    archetype: &amp;<a class=\"struct\" href=\"bevy/ecs/archetype/struct.Archetype.html\" title=\"struct bevy::ecs::archetype::Archetype\">Archetype</a>,\n    system_meta: &amp;mut <a class=\"struct\" href=\"bevy/ecs/system/struct.SystemMeta.html\" title=\"struct bevy::ecs::system::SystemMeta\">SystemMeta</a>,\n)</h4></section></summary><div class='docblock'>For the specified <a href=\"bevy/ecs/archetype/struct.Archetype.html\" title=\"struct bevy::ecs::archetype::Archetype\"><code>Archetype</code></a>, registers the components accessed by this <a href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\"><code>SystemParam</code></a> (if applicable).a <a href=\"bevy/ecs/system/trait.SystemParam.html#method.new_archetype\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#128-132\">Source</a><a href=\"#method.apply\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"bevy/ecs/system/trait.SystemParam.html#method.apply\" class=\"fn\">apply</a>(\n    state: &amp;mut &lt;<a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt; as <a class=\"trait\" href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy::ecs::system::SystemParam::State\">State</a>,\n    system_meta: &amp;<a class=\"struct\" href=\"bevy/ecs/system/struct.SystemMeta.html\" title=\"struct bevy::ecs::system::SystemMeta\">SystemMeta</a>,\n    world: &amp;mut <a class=\"struct\" href=\"bevy/prelude/struct.World.html\" title=\"struct bevy::prelude::World\">World</a>,\n)</h4></section></summary><div class='docblock'>Applies any deferred mutations stored in this <a href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\"><code>SystemParam</code></a>โs state.\nThis is used to apply <a href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\"><code>Commands</code></a> during <a href=\"bevy/prelude/fn.apply_deferred.html\" title=\"fn bevy::prelude::apply_deferred\"><code>apply_deferred</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.queue\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#140-144\">Source</a><a href=\"#method.queue\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"bevy/ecs/system/trait.SystemParam.html#method.queue\" class=\"fn\">queue</a>(\n    state: &amp;mut &lt;<a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt; as <a class=\"trait\" href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy::ecs::system::SystemParam::State\">State</a>,\n    system_meta: &amp;<a class=\"struct\" href=\"bevy/ecs/system/struct.SystemMeta.html\" title=\"struct bevy::ecs::system::SystemMeta\">SystemMeta</a>,\n    world: <a class=\"struct\" href=\"bevy/ecs/world/struct.DeferredWorld.html\" title=\"struct bevy::ecs::world::DeferredWorld\">DeferredWorld</a>&lt;'_&gt;,\n)</h4></section></summary><div class='docblock'>Queues any deferred mutations to be applied at the next <a href=\"bevy/prelude/fn.apply_deferred.html\" title=\"fn bevy::prelude::apply_deferred\"><code>apply_deferred</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate_param\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#153-157\">Source</a><a href=\"#method.validate_param\" class=\"anchor\">ยง</a><h4 class=\"code-header\">unsafe fn <a href=\"bevy/ecs/system/trait.SystemParam.html#method.validate_param\" class=\"fn\">validate_param</a>(\n    state: &amp;&lt;<a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt; as <a class=\"trait\" href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy::ecs::system::SystemParam::State\">State</a>,\n    system_meta: &amp;<a class=\"struct\" href=\"bevy/ecs/system/struct.SystemMeta.html\" title=\"struct bevy::ecs::system::SystemMeta\">SystemMeta</a>,\n    world: <a class=\"struct\" href=\"bevy/ecs/world/unsafe_world_cell/struct.UnsafeWorldCell.html\" title=\"struct bevy::ecs::world::unsafe_world_cell::UnsafeWorldCell\">UnsafeWorldCell</a>&lt;'_&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Validates that the param can be acquired by the <a href=\"bevy/ecs/system/trait.SystemParam.html#tymethod.get_param\" title=\"associated function bevy::ecs::system::SystemParam::get_param\"><code>get_param</code></a>.\nBuilt-in executors use this to prevent systems with invalid params from running.\nFor nested <a href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\"><code>SystemParam</code></a>s validation will fail if any\ndelegated validation fails. <a href=\"bevy/ecs/system/trait.SystemParam.html#method.validate_param\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_param\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#166-171\">Source</a><a href=\"#method.get_param\" class=\"anchor\">ยง</a><h4 class=\"code-header\">unsafe fn <a href=\"bevy/ecs/system/trait.SystemParam.html#tymethod.get_param\" class=\"fn\">get_param</a>&lt;'w, 's&gt;(\n    state: &amp;'s mut &lt;<a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt; as <a class=\"trait\" href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.State\" title=\"type bevy::ecs::system::SystemParam::State\">State</a>,\n    system_meta: &amp;<a class=\"struct\" href=\"bevy/ecs/system/struct.SystemMeta.html\" title=\"struct bevy::ecs::system::SystemMeta\">SystemMeta</a>,\n    world: <a class=\"struct\" href=\"bevy/ecs/world/unsafe_world_cell/struct.UnsafeWorldCell.html\" title=\"struct bevy::ecs::world::unsafe_world_cell::UnsafeWorldCell\">UnsafeWorldCell</a>&lt;'w&gt;,\n    change_tick: <a class=\"struct\" href=\"bevy/ecs/component/struct.Tick.html\" title=\"struct bevy::ecs::component::Tick\">Tick</a>,\n) -&gt; &lt;<a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt; as <a class=\"trait\" href=\"bevy/ecs/system/trait.SystemParam.html\" title=\"trait bevy::ecs::system::SystemParam\">SystemParam</a>&gt;::<a class=\"associatedtype\" href=\"bevy/ecs/system/trait.SystemParam.html#associatedtype.Item\" title=\"type bevy::ecs::system::SystemParam::Item\">Item</a>&lt;'w, 's&gt;</h4></section></summary><div class='docblock'>Creates a parameter to be passed into a <a href=\"bevy/prelude/trait.SystemParamFunction.html\" title=\"trait bevy::prelude::SystemParamFunction\"><code>SystemParamFunction</code></a>. <a href=\"bevy/ecs/system/trait.SystemParam.html#tymethod.get_param\">Read more</a></div></details></div></details>","SystemParam","bevy::ecs::system::lifetimeless::SCommands"],["<section id=\"impl-ReadOnlySystemParam-for-Commands%3C'w,+'s%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#180-183\">Source</a><a href=\"#impl-ReadOnlySystemParam-for-Commands%3C'w,+'s%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'w, 's&gt; <a class=\"trait\" href=\"bevy/ecs/system/trait.ReadOnlySystemParam.html\" title=\"trait bevy::ecs::system::ReadOnlySystemParam\">ReadOnlySystemParam</a> for <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'w, 's&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"bevy/prelude/struct.Deferred.html\" title=\"struct bevy::prelude::Deferred\">Deferred</a>&lt;'s, <a class=\"struct\" href=\"bevy/ecs/world/struct.CommandQueue.html\" title=\"struct bevy::ecs::world::CommandQueue\">CommandQueue</a>&gt;: <a class=\"trait\" href=\"bevy/ecs/system/trait.ReadOnlySystemParam.html\" title=\"trait bevy::ecs::system::ReadOnlySystemParam\">ReadOnlySystemParam</a>,\n    &amp;'w <a class=\"struct\" href=\"bevy/ecs/entity/struct.Entities.html\" title=\"struct bevy::ecs::entity::Entities\">Entities</a>: <a class=\"trait\" href=\"bevy/ecs/system/trait.ReadOnlySystemParam.html\" title=\"trait bevy::ecs::system::ReadOnlySystemParam\">ReadOnlySystemParam</a>,</div></h3></section>","ReadOnlySystemParam","bevy::ecs::system::lifetimeless::SCommands"],["<section id=\"impl-Send-for-Commands%3C'_,+'_%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#84\">Source</a><a href=\"#impl-Send-for-Commands%3C'_,+'_%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt;</h3></section>","Send","bevy::ecs::system::lifetimeless::SCommands"],["<section id=\"impl-Sync-for-Commands%3C'_,+'_%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bevy_ecs/system/commands/mod.rs.html#87\">Source</a><a href=\"#impl-Sync-for-Commands%3C'_,+'_%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"bevy/prelude/struct.Commands.html\" title=\"struct bevy::prelude::Commands\">Commands</a>&lt;'_, '_&gt;</h3></section>","Sync","bevy::ecs::system::lifetimeless::SCommands"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[80896]}
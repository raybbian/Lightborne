(function() {
    var type_impls = Object.fromEntries([["rapier2d",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbsDiffEq-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#421\">Source</a><a href=\"#impl-AbsDiffEq-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Epsilon\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#422\">Source</a><a href=\"#associatedtype.Epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" class=\"associatedtype\">Epsilon</a> = T</h4></section></summary><div class='docblock'>Used for specifying relative comparisons.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_epsilon\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#425\">Source</a><a href=\"#method.default_epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.default_epsilon\" class=\"fn\">default_epsilon</a>() -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a></h4></section></summary><div class='docblock'>The default tolerance to use when testing values that are close together. <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.default_epsilon\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#430\">Source</a><a href=\"#method.abs_diff_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.abs_diff_eq\" class=\"fn\">abs_diff_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;,\n    epsilon: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses the absolute difference to compute the approximate\nequality of two numbers.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/abs_diff_eq.rs.html#24\">Source</a><a href=\"#method.abs_diff_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#method.abs_diff_ne\" class=\"fn\">abs_diff_ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>, epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.abs_diff_eq\" title=\"method approx::abs_diff_eq::AbsDiffEq::abs_diff_eq\"><code>AbsDiffEq::abs_diff_eq</code></a>.</div></details></div></details>","AbsDiffEq","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbsDiffEq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2168-2172\">Source</a><a href=\"#impl-AbsDiffEq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C, S&gt; <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.RawStorage.html\" title=\"trait nalgebra::base::storage::RawStorage\">RawStorage</a>&lt;T, R, C&gt;,\n    &lt;T as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Epsilon\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2174\">Source</a><a href=\"#associatedtype.Epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" class=\"associatedtype\">Epsilon</a> = &lt;T as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a></h4></section></summary><div class='docblock'>Used for specifying relative comparisons.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_epsilon\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2177\">Source</a><a href=\"#method.default_epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.default_epsilon\" class=\"fn\">default_epsilon</a>() -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a></h4></section></summary><div class='docblock'>The default tolerance to use when testing values that are close together. <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.default_epsilon\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2182\">Source</a><a href=\"#method.abs_diff_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.abs_diff_eq\" class=\"fn\">abs_diff_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;,\n    epsilon: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses the absolute difference to compute the approximate\nequality of two numbers.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/abs_diff_eq.rs.html#24\">Source</a><a href=\"#method.abs_diff_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#method.abs_diff_ne\" class=\"fn\">abs_diff_ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>, epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#tymethod.abs_diff_eq\" title=\"method approx::abs_diff_eq::AbsDiffEq::abs_diff_eq\"><code>AbsDiffEq::abs_diff_eq</code></a>.</div></details></div></details>","AbsDiffEq","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbstractRotation%3CT,+2%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#113-115\">Source</a><a href=\"#impl-AbstractRotation%3CT,+2%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html\" title=\"trait nalgebra::geometry::abstract_rotation::AbstractRotation\">AbstractRotation</a>&lt;T, 2&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.identity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#118\">Source</a><a href=\"#method.identity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html#tymethod.identity\" class=\"fn\">identity</a>() -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The rotation identity.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#123\">Source</a><a href=\"#method.inverse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html#tymethod.inverse\" class=\"fn\">inverse</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The rotation inverse.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#128\">Source</a><a href=\"#method.inverse_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html#tymethod.inverse_mut\" class=\"fn\">inverse_mut</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Change <code>self</code> to its inverse.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_vector\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#133\">Source</a><a href=\"#method.transform_vector\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html#tymethod.transform_vector\" class=\"fn\">transform_vector</a>(\n    &amp;self,\n    v: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;</h4></section></summary><div class='docblock'>Apply the rotation to the given vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_point\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#138\">Source</a><a href=\"#method.transform_point\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html#tymethod.transform_point\" class=\"fn\">transform_point</a>(&amp;self, p: &amp;<a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;</h4></section></summary><div class='docblock'>Apply the rotation to the given point.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_transform_vector\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#143\">Source</a><a href=\"#method.inverse_transform_vector\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html#tymethod.inverse_transform_vector\" class=\"fn\">inverse_transform_vector</a>(\n    &amp;self,\n    v: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;</h4></section></summary><div class='docblock'>Apply the inverse rotation to the given vector.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_transform_point\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#148\">Source</a><a href=\"#method.inverse_transform_point\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html#tymethod.inverse_transform_point\" class=\"fn\">inverse_transform_point</a>(\n    &amp;self,\n    p: &amp;<a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;</h4></section></summary><div class='docblock'>Apply the inverse rotation to the given point.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_transform_unit_vector\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/abstract_rotation.rs.html#21\">Source</a><a href=\"#method.inverse_transform_unit_vector\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html#method.inverse_transform_unit_vector\" class=\"fn\">inverse_transform_unit_vector</a>(\n    &amp;self,\n    v: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;D&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, D, 1&gt;&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;D&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, D, 1&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Apply the inverse rotation to the given unit vector.</div></details></div></details>","AbstractRotation<T, 2>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CT%3E-for-Unit%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#217\">Source</a><a href=\"#impl-AsRef%3CT%3E-for-Unit%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#219\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<T>","rapier2d::math::UnitVector","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Unit%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#26\">Source</a><a href=\"#impl-Clone-for-Unit%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#26\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rapier2d::math::UnitVector","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Unit%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#42\">Source</a><a href=\"#impl-Debug-for-Unit%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#43\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rapier2d::math::UnitVector","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#20-22\">Source</a><a href=\"#impl-Default-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#24\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Unit%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#289\">Source</a><a href=\"#impl-Deref-for-Unit%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#290\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#293\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","rapier2d::math::UnitVector","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#415\">Source</a><a href=\"#impl-Display-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#416\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26Rotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#206-214\">Source</a><a href=\"#impl-Div%3C%26Rotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#206-214\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#206-214\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&'b Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26Unit%3CComplex%3CT%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#118-120\">Source</a><a href=\"#impl-Div%3C%26Unit%3CComplex%3CT%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#122\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#125\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&'b Unit<Complex<T>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#206-214\">Source</a><a href=\"#impl-Div%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#206-214\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#206-214\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#92-94\">Source</a><a href=\"#impl-Div-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#96\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#99\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26Rotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#400-402\">Source</a><a href=\"#impl-DivAssign%3C%26Rotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#405\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&'b Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26Unit%3CComplex%3CT%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#358-360\">Source</a><a href=\"#impl-DivAssign%3C%26Unit%3CComplex%3CT%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#363\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&'b Unit<Complex<T>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#390-392\">Source</a><a href=\"#impl-DivAssign%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#395\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#348-350\">Source</a><a href=\"#impl-DivAssign-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#353\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BUnit%3CComplex%3C%3CT+as+SimdValue%3E::Element%3E%3E;+16%5D%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#244-247\">Source</a><a href=\"#impl-From%3C%5BUnit%3CComplex%3C%3CT+as+SimdValue%3E::Element%3E%3E;+16%5D%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">16</a>]&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">16</a>]&gt;,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#250\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">16</a>]) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[Unit<Complex<<T as SimdValue>::Element>>; 16]>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BUnit%3CComplex%3C%3CT+as+SimdValue%3E::Element%3E%3E;+2%5D%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#196-199\">Source</a><a href=\"#impl-From%3C%5BUnit%3CComplex%3C%3CT+as+SimdValue%3E::Element%3E%3E;+2%5D%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">2</a>]&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">2</a>]&gt;,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#202\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">2</a>]) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[Unit<Complex<<T as SimdValue>::Element>>; 2]>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BUnit%3CComplex%3C%3CT+as+SimdValue%3E::Element%3E%3E;+4%5D%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#210-213\">Source</a><a href=\"#impl-From%3C%5BUnit%3CComplex%3C%3CT+as+SimdValue%3E::Element%3E%3E;+4%5D%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">4</a>]&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">4</a>]&gt;,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#216\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">4</a>]) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[Unit<Complex<<T as SimdValue>::Element>>; 4]>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BUnit%3CComplex%3C%3CT+as+SimdValue%3E::Element%3E%3E;+8%5D%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#224-227\">Source</a><a href=\"#impl-From%3C%5BUnit%3CComplex%3C%3CT+as+SimdValue%3E::Element%3E%3E;+8%5D%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">8</a>]&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">8</a>]&gt;,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#230\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">8</a>]) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[Unit<Complex<<T as SimdValue>::Element>>; 8]>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BUnit%3CMatrix%3C%3CT+as+SimdValue%3E::Element,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3C%3CT+as+SimdValue%3E::Element%3E%3E%3E;+16%5D%3E-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#357-362\">Source</a><a href=\"#impl-From%3C%5BUnit%3CMatrix%3C%3CT+as+SimdValue%3E::Element,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3C%3CT+as+SimdValue%3E::Element%3E%3E%3E;+16%5D%3E-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">16</a>]&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">16</a>]&gt;,\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a>,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#365\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(\n    arr: [<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">16</a>],\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[Unit<Matrix<<T as SimdValue>::Element, R, C, <DefaultAllocator as Allocator<R, C>>::Buffer<<T as SimdValue>::Element>>>; 16]>","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BUnit%3CMatrix%3C%3CT+as+SimdValue%3E::Element,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3C%3CT+as+SimdValue%3E::Element%3E%3E%3E;+2%5D%3E-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#301-306\">Source</a><a href=\"#impl-From%3C%5BUnit%3CMatrix%3C%3CT+as+SimdValue%3E::Element,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3C%3CT+as+SimdValue%3E::Element%3E%3E%3E;+2%5D%3E-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">2</a>]&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">2</a>]&gt;,\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a>,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#309\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(\n    arr: [<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">2</a>],\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[Unit<Matrix<<T as SimdValue>::Element, R, C, <DefaultAllocator as Allocator<R, C>>::Buffer<<T as SimdValue>::Element>>>; 2]>","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BUnit%3CMatrix%3C%3CT+as+SimdValue%3E::Element,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3C%3CT+as+SimdValue%3E::Element%3E%3E%3E;+4%5D%3E-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#317-322\">Source</a><a href=\"#impl-From%3C%5BUnit%3CMatrix%3C%3CT+as+SimdValue%3E::Element,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3C%3CT+as+SimdValue%3E::Element%3E%3E%3E;+4%5D%3E-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">4</a>]&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">4</a>]&gt;,\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a>,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#325\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(\n    arr: [<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">4</a>],\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[Unit<Matrix<<T as SimdValue>::Element, R, C, <DefaultAllocator as Allocator<R, C>>::Buffer<<T as SimdValue>::Element>>>; 4]>","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BUnit%3CMatrix%3C%3CT+as+SimdValue%3E::Element,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3C%3CT+as+SimdValue%3E::Element%3E%3E%3E;+8%5D%3E-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#335-340\">Source</a><a href=\"#impl-From%3C%5BUnit%3CMatrix%3C%3CT+as+SimdValue%3E::Element,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3C%3CT+as+SimdValue%3E::Element%3E%3E%3E;+8%5D%3E-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">8</a>]&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"simba/simd/simd_value/trait.PrimitiveSimdValue.html\" title=\"trait simba::simd::simd_value::PrimitiveSimdValue\">PrimitiveSimdValue</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">8</a>]&gt;,\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a>,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#343\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(\n    arr: [<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">8</a>],\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[Unit<Matrix<<T as SimdValue>::Element, R, C, <DefaultAllocator as Allocator<R, C>>::Buffer<<T as SimdValue>::Element>>>; 8]>","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDMat2%3E-for-Unit%3CComplex%3Cf64%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_unit_complex.rs.html#25\">Source</a><a href=\"#impl-From%3CDMat2%3E-for-Unit%3CComplex%3Cf64%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"glam/f64/dmat2/struct.DMat2.html\" title=\"struct glam::f64::dmat2::DMat2\">DMat2</a>&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f64.html\">f64</a>&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_unit_complex.rs.html#27\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(e: <a class=\"struct\" href=\"glam/f64/dmat2/struct.DMat2.html\" title=\"struct glam::f64::dmat2::DMat2\">DMat2</a>) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f64.html\">f64</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<DMat2>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CMat2%3E-for-Unit%3CComplex%3Cf32%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_unit_complex.rs.html#18\">Source</a><a href=\"#impl-From%3CMat2%3E-for-Unit%3CComplex%3Cf32%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"glam/f32/sse2/mat2/struct.Mat2.html\" title=\"struct glam::f32::sse2::mat2::Mat2\">Mat2</a>&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f32.html\">f32</a>&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_unit_complex.rs.html#20\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(e: <a class=\"struct\" href=\"glam/f32/sse2/mat2/struct.Mat2.html\" title=\"struct glam::f32::sse2::mat2::Mat2\">Mat2</a>) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f32.html\">f32</a>&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Mat2>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#166-168\">Source</a><a href=\"#impl-From%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#171\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(q: <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Unit%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#26\">Source</a><a href=\"#impl-Hash-for-Unit%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#26\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","rapier2d::math::UnitVector","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Isometry%3CT,+Unit%3CComplex%3CT%3E%3E,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#276-288\">Source</a><a href=\"#impl-Mul%3C%26Isometry%3CT,+Unit%3CComplex%3CT%3E%3E,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#276-288\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#276-288\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Isometry<T, Unit<Complex<T>>, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Matrix%3CT,+Const%3C2%3E,+Const%3C1%3E,+S%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#250-262\">Source</a><a href=\"#impl-Mul%3C%26Matrix%3CT,+Const%3C2%3E,+Const%3C1%3E,+S%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#250-262\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#250-262\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Matrix<T, Const<2>, Const<1>, S>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26OPoint%3CT,+Const%3C2%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#239-247\">Source</a><a href=\"#impl-Mul%3C%26OPoint%3CT,+Const%3C2%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#239-247\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#239-247\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b OPoint<T, Const<2>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Rotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#195-203\">Source</a><a href=\"#impl-Mul%3C%26Rotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#195-203\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#195-203\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Similarity%3CT,+Unit%3CComplex%3CT%3E%3E,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#291-300\">Source</a><a href=\"#impl-Mul%3C%26Similarity%3CT,+Unit%3CComplex%3CT%3E%3E,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#291-300\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#291-300\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Similarity<T, Unit<Complex<T>>, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Transform%3CT,+C,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/transform_ops.rs.html#257-268\">Source</a><a href=\"#impl-Mul%3C%26Transform%3CT,+C,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T, C, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> + <a class=\"trait\" href=\"simba/scalar/field/trait.ClosedAddAssign.html\" title=\"trait simba::scalar::field::ClosedAddAssign\">ClosedAddAssign</a> + <a class=\"trait\" href=\"simba/scalar/field/trait.ClosedMulAssign.html\" title=\"trait simba::scalar::field::ClosedMulAssign\">ClosedMulAssign</a> + <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    C: <a class=\"trait\" href=\"nalgebra/geometry/transform/trait.TCategoryMul.html\" title=\"trait nalgebra::geometry::transform::TCategoryMul\">TCategoryMul</a>&lt;<a class=\"enum\" href=\"nalgebra/geometry/transform/enum.TAffine.html\" title=\"enum nalgebra::geometry::transform::TAffine\">TAffine</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/transform_ops.rs.html#257-268\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T, &lt;C as <a class=\"trait\" href=\"nalgebra/geometry/transform/trait.TCategoryMul.html\" title=\"trait nalgebra::geometry::transform::TCategoryMul\">TCategoryMul</a>&lt;<a class=\"enum\" href=\"nalgebra/geometry/transform/enum.TAffine.html\" title=\"enum nalgebra::geometry::transform::TAffine\">TAffine</a>&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/geometry/transform/trait.TCategoryMul.html#associatedtype.Representative\" title=\"type nalgebra::geometry::transform::TCategoryMul::Representative\">Representative</a>, 2&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/transform_ops.rs.html#257-268\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T, C, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T, C, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Transform<T, C, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Translation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#303-312\">Source</a><a href=\"#impl-Mul%3C%26Translation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/translation/struct.Translation.html\" title=\"struct nalgebra::geometry::translation::Translation\">Translation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#303-312\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#303-312\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/translation/struct.Translation.html\" title=\"struct nalgebra::geometry::translation::Translation\">Translation</a>&lt;T, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/translation/struct.Translation.html\" title=\"struct nalgebra::geometry::translation::Translation\">Translation</a>&lt;T, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Translation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Unit%3CComplex%3CT%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#67-69\">Source</a><a href=\"#impl-Mul%3C%26Unit%3CComplex%3CT%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#71\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#74\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Unit<Complex<T>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Unit%3CMatrix%3CT,+Const%3C2%3E,+Const%3C1%3E,+S%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#265-273\">Source</a><a href=\"#impl-Mul%3C%26Unit%3CMatrix%3CT,+Const%3C2%3E,+Const%3C1%3E,+S%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#265-273\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#265-273\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'b Unit<Matrix<T, Const<2>, Const<1>, S>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CIsometry%3CT,+Unit%3CComplex%3CT%3E%3E,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#276-288\">Source</a><a href=\"#impl-Mul%3CIsometry%3CT,+Unit%3CComplex%3CT%3E%3E,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#276-288\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#276-288\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Isometry<T, Unit<Complex<T>>, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CMatrix%3CT,+Const%3C2%3E,+Const%3C1%3E,+S%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#250-262\">Source</a><a href=\"#impl-Mul%3CMatrix%3CT,+Const%3C2%3E,+Const%3C1%3E,+S%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#250-262\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#250-262\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Matrix<T, Const<2>, Const<1>, S>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3COPoint%3CT,+Const%3C2%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#239-247\">Source</a><a href=\"#impl-Mul%3COPoint%3CT,+Const%3C2%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#239-247\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#239-247\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<OPoint<T, Const<2>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#195-203\">Source</a><a href=\"#impl-Mul%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#195-203\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#195-203\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CSimilarity%3CT,+Unit%3CComplex%3CT%3E%3E,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#291-300\">Source</a><a href=\"#impl-Mul%3CSimilarity%3CT,+Unit%3CComplex%3CT%3E%3E,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#291-300\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#291-300\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Similarity<T, Unit<Complex<T>>, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CTransform%3CT,+C,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/transform_ops.rs.html#257-268\">Source</a><a href=\"#impl-Mul%3CTransform%3CT,+C,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T, C, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> + <a class=\"trait\" href=\"simba/scalar/field/trait.ClosedAddAssign.html\" title=\"trait simba::scalar::field::ClosedAddAssign\">ClosedAddAssign</a> + <a class=\"trait\" href=\"simba/scalar/field/trait.ClosedMulAssign.html\" title=\"trait simba::scalar::field::ClosedMulAssign\">ClosedMulAssign</a> + <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    C: <a class=\"trait\" href=\"nalgebra/geometry/transform/trait.TCategoryMul.html\" title=\"trait nalgebra::geometry::transform::TCategoryMul\">TCategoryMul</a>&lt;<a class=\"enum\" href=\"nalgebra/geometry/transform/enum.TAffine.html\" title=\"enum nalgebra::geometry::transform::TAffine\">TAffine</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/transform_ops.rs.html#257-268\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T, &lt;C as <a class=\"trait\" href=\"nalgebra/geometry/transform/trait.TCategoryMul.html\" title=\"trait nalgebra::geometry::transform::TCategoryMul\">TCategoryMul</a>&lt;<a class=\"enum\" href=\"nalgebra/geometry/transform/enum.TAffine.html\" title=\"enum nalgebra::geometry::transform::TAffine\">TAffine</a>&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/geometry/transform/trait.TCategoryMul.html#associatedtype.Representative\" title=\"type nalgebra::geometry::transform::TCategoryMul::Representative\">Representative</a>, 2&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/transform_ops.rs.html#257-268\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T, C, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T, C, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Transform<T, C, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CTranslation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#303-312\">Source</a><a href=\"#impl-Mul%3CTranslation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/translation/struct.Translation.html\" title=\"struct nalgebra::geometry::translation::Translation\">Translation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#303-312\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, 2&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#303-312\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/geometry/translation/struct.Translation.html\" title=\"struct nalgebra::geometry::translation::Translation\">Translation</a>&lt;T, 2&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/translation/struct.Translation.html\" title=\"struct nalgebra::geometry::translation::Translation\">Translation</a>&lt;T, 2&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Translation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CUnit%3CMatrix%3CT,+Const%3C2%3E,+Const%3C1%3E,+S%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#265-273\">Source</a><a href=\"#impl-Mul%3CUnit%3CMatrix%3CT,+Const%3C2%3E,+Const%3C1%3E,+S%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#265-273\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#265-273\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(\n    self,\n    rhs: <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Unit<Matrix<T, Const<2>, Const<1>, S>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#46\">Source</a><a href=\"#impl-Mul-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#47\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#50\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26Rotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#379-381\">Source</a><a href=\"#impl-MulAssign%3C%26Rotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#384\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&'b Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26Unit%3CComplex%3CT%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#337-339\">Source</a><a href=\"#impl-MulAssign%3C%26Unit%3CComplex%3CT%3E%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'b, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#342\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: &amp;'b <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&'b Unit<Complex<T>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#369-371\">Source</a><a href=\"#impl-MulAssign%3CRotation%3CT,+2%3E%3E-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#374\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<Rotation<T, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#327-329\">Source</a><a href=\"#impl-MulAssign-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_ops.rs.html#332\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/norm.rs.html#487-489\">Source</a><a href=\"#impl-Neg-for-Unit%3CMatrix%3CT,+R,+C,+%3CDefaultAllocator+as+Allocator%3CR,+C%3E%3E::Buffer%3CT%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"simba/scalar/field/trait.ClosedNeg.html\" title=\"trait simba::scalar::field::ClosedNeg\">ClosedNeg</a>,\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/norm.rs.html#491\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/norm.rs.html#494\">Source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(\n    self,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;R, C&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Neg.html#associatedtype.Output\" title=\"type core::ops::arith::Neg::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.0/core/ops/arith/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#403-405\">Source</a><a href=\"#impl-One-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#408\">Source</a><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.One.html#tymethod.one\" class=\"fn\">one</a>() -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Returns the multiplicative identity element of <code>Self</code>, <code>1</code>. <a href=\"num_traits/identities/trait.One.html#tymethod.one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#118\">Source</a><a href=\"#method.set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.One.html#method.set_one\" class=\"fn\">set_one</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/num_traits/identities.rs.html#128-130\">Source</a><a href=\"#method.is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"num_traits/identities/trait.One.html#method.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the multiplicative identity. <a href=\"num_traits/identities/trait.One.html#method.is_one\">Read more</a></div></details></div></details>","One","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#34\">Source</a><a href=\"#impl-PartialEq-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#36\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#74-79\">Source</a><a href=\"#impl-PartialEq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.RawStorage.html\" title=\"trait nalgebra::base::storage::RawStorage\">RawStorage</a>&lt;T, R, C&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#82\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RelativeEq-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#435\">Source</a><a href=\"#impl-RelativeEq-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"approx/relative_eq/trait.RelativeEq.html\" title=\"trait approx::relative_eq::RelativeEq\">RelativeEq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_max_relative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#437\">Source</a><a href=\"#method.default_max_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.default_max_relative\" class=\"fn\">default_max_relative</a>() -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a></h4></section></summary><div class='docblock'>The default relative tolerance for testing values that are far-apart. <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.default_max_relative\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#442-447\">Source</a><a href=\"#method.relative_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.relative_eq\" class=\"fn\">relative_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;,\n    epsilon: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n    max_relative: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses a relative comparison if the values are far apart.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/relative_eq.rs.html#22-27\">Source</a><a href=\"#method.relative_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#method.relative_ne\" class=\"fn\">relative_ne</a>(\n    &amp;self,\n    other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>,\n    epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n    max_relative: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.relative_eq\" title=\"method approx::relative_eq::RelativeEq::relative_eq\"><code>RelativeEq::relative_eq</code></a>.</div></details></div></details>","RelativeEq","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RelativeEq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2187-2191\">Source</a><a href=\"#impl-RelativeEq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C, S&gt; <a class=\"trait\" href=\"approx/relative_eq/trait.RelativeEq.html\" title=\"trait approx::relative_eq::RelativeEq\">RelativeEq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"approx/relative_eq/trait.RelativeEq.html\" title=\"trait approx::relative_eq::RelativeEq\">RelativeEq</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, R, C&gt;,\n    &lt;T as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_max_relative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2194\">Source</a><a href=\"#method.default_max_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.default_max_relative\" class=\"fn\">default_max_relative</a>() -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a></h4></section></summary><div class='docblock'>The default relative tolerance for testing values that are far-apart. <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.default_max_relative\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2199-2204\">Source</a><a href=\"#method.relative_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.relative_eq\" class=\"fn\">relative_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;,\n    epsilon: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n    max_relative: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses a relative comparison if the values are far apart.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/relative_eq.rs.html#22-27\">Source</a><a href=\"#method.relative_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/relative_eq/trait.RelativeEq.html#method.relative_ne\" class=\"fn\">relative_ne</a>(\n    &amp;self,\n    other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>,\n    epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n    max_relative: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/relative_eq/trait.RelativeEq.html#tymethod.relative_eq\" title=\"method approx::relative_eq::RelativeEq::relative_eq\"><code>RelativeEq::relative_eq</code></a>.</div></details></div></details>","RelativeEq","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdValue-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#9-11\">Source</a><a href=\"#impl-SimdValue-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.LANES\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#13\">Source</a><a href=\"#associatedconstant.LANES\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"simba/simd/simd_value/trait.SimdValue.html#associatedconstant.LANES\" class=\"constant\">LANES</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a> = T::LANES</h4></section></summary><div class='docblock'>The number of lanes of this SIMD value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Element\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#14\">Source</a><a href=\"#associatedtype.Element\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" class=\"associatedtype\">Element</a> = <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;&lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>&gt;&gt;</h4></section></summary><div class='docblock'>The type of the elements of each lane of this SIMD value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.SimdBool\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#15\">Source</a><a href=\"#associatedtype.SimdBool\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.SimdBool\" class=\"associatedtype\">SimdBool</a> = &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.SimdBool\" title=\"type simba::simd::simd_value::SimdValue::SimdBool\">SimdBool</a></h4></section></summary><div class='docblock'>Type of the result of comparing two SIMD values like <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splat\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#18\">Source</a><a href=\"#method.splat\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.splat\" class=\"fn\">splat</a>(val: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Initializes an SIMD value with each lanes set to <code>val</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#23\">Source</a><a href=\"#method.extract\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.extract\" class=\"fn\">extract</a>(&amp;self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a></h4></section></summary><div class='docblock'>Extracts the i-th lane of <code>self</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.extract\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#28\">Source</a><a href=\"#method.extract_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.extract_unchecked\" class=\"fn\">extract_unchecked</a>(\n    &amp;self,\n    i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>,\n) -&gt; &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a></h4></section></summary><div class='docblock'>Extracts the i-th lane of <code>self</code> without bound-checking. <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.extract_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#33\">Source</a><a href=\"#method.replace\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>, val: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>)</h4></section></summary><div class='docblock'>Replaces the i-th lane of <code>self</code> by <code>val</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.replace\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#38\">Source</a><a href=\"#method.replace_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.replace_unchecked\" class=\"fn\">replace_unchecked</a>(\n    &amp;mut self,\n    i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>,\n    val: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>,\n)</h4></section></summary><div class='docblock'>Replaces the i-th lane of <code>self</code> by <code>val</code> without bound-checking. <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.replace_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_simba.rs.html#44\">Source</a><a href=\"#method.select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.select\" class=\"fn\">select</a>(\n    self,\n    cond: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.SimdBool\" title=\"type simba::simd::simd_value::SimdValue::SimdBool\">SimdBool</a>,\n    other: <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#tymethod.select\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_lanes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#45-47\">Source</a><a href=\"#method.map_lanes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#method.map_lanes\" class=\"fn\">map_lanes</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>) -&gt; Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Applies a function to each lane of <code>self</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#method.map_lanes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_map_lanes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/simd/simd_value.rs.html#64-70\">Source</a><a href=\"#method.zip_map_lanes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/simd/simd_value/trait.SimdValue.html#method.zip_map_lanes\" class=\"fn\">zip_map_lanes</a>(\n    self,\n    b: Self,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>, Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>) -&gt; Self::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>,\n) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Applies a function to each lane of <code>self</code> paired with the corresponding lane of <code>b</code>. <a href=\"simba/simd/simd_value/trait.SimdValue.html#method.zip_map_lanes\">Read more</a></div></details></div></details>","SimdValue","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CIsometry%3CT2,+R,+2%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#72-76\">Source</a><a href=\"#impl-SubsetOf%3CIsometry%3CT2,+R,+2%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2, R&gt; <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T2, R, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;<div class=\"where\">where\n    T1: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    T2: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;T1&gt;,\n    R: <a class=\"trait\" href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html\" title=\"trait nalgebra::geometry::abstract_rotation::AbstractRotation\">AbstractRotation</a>&lt;T2, 2&gt; + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#79\">Source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T2, R, 2&gt;</h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#84\">Source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(iso: &amp;<a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T2, R, 2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#89\">Source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(iso: &amp;<a class=\"struct\" href=\"nalgebra/geometry/isometry/struct.Isometry.html\" title=\"struct nalgebra::geometry::isometry::Isometry\">Isometry</a>&lt;T2, R, 2&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;</h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">Source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<Isometry<T2, R, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CMatrix%3CT2,+Const%3C3%3E,+Const%3C3%3E,+ArrayStorage%3CT2,+3,+3%3E%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#138\">Source</a><a href=\"#impl-SubsetOf%3CMatrix%3CT2,+Const%3C3%3E,+Const%3C3%3E,+ArrayStorage%3CT2,+3,+3%3E%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2&gt; <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T2, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T2, 3, 3&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;<div class=\"where\">where\n    T1: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    T2: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;T1&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#140\">Source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T2, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T2, 3, 3&gt;&gt;</h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#145\">Source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(\n    m: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T2, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T2, 3, 3&gt;&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#150\">Source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(\n    m: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T2, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T2, 3, 3&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;</h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">Source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<Matrix<T2, Const<3>, Const<3>, ArrayStorage<T2, 3, 3>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CRotation%3CT2,+2%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#49-52\">Source</a><a href=\"#impl-SubsetOf%3CRotation%3CT2,+2%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2&gt; <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T2, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;<div class=\"where\">where\n    T1: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    T2: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;T1&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#55\">Source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T2, 2&gt;</h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#61\">Source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(rot: &amp;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T2, 2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#66\">Source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(rot: &amp;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T2, 2&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;</h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">Source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<Rotation<T2, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CSimilarity%3CT2,+R,+2%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#94-98\">Source</a><a href=\"#impl-SubsetOf%3CSimilarity%3CT2,+R,+2%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2, R&gt; <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T2, R, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;<div class=\"where\">where\n    T1: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    T2: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;T1&gt;,\n    R: <a class=\"trait\" href=\"nalgebra/geometry/abstract_rotation/trait.AbstractRotation.html\" title=\"trait nalgebra::geometry::abstract_rotation::AbstractRotation\">AbstractRotation</a>&lt;T2, 2&gt; + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#101\">Source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T2, R, 2&gt;</h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#106\">Source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(sim: &amp;<a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T2, R, 2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#111\">Source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(sim: &amp;<a class=\"struct\" href=\"nalgebra/geometry/similarity/struct.Similarity.html\" title=\"struct nalgebra::geometry::similarity::Similarity\">Similarity</a>&lt;T2, R, 2&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;</h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">Source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<Similarity<T2, R, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CTransform%3CT2,+C,+2%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#116-120\">Source</a><a href=\"#impl-SubsetOf%3CTransform%3CT2,+C,+2%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2, C&gt; <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T2, C, 2&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;<div class=\"where\">where\n    T1: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    T2: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;T1&gt;,\n    C: <a class=\"trait\" href=\"nalgebra/geometry/transform/trait.SuperTCategoryOf.html\" title=\"trait nalgebra::geometry::transform::SuperTCategoryOf\">SuperTCategoryOf</a>&lt;<a class=\"enum\" href=\"nalgebra/geometry/transform/enum.TAffine.html\" title=\"enum nalgebra::geometry::transform::TAffine\">TAffine</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#123\">Source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T2, C, 2&gt;</h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#128\">Source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(t: &amp;<a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T2, C, 2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#133\">Source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(t: &amp;<a class=\"struct\" href=\"nalgebra/geometry/transform/struct.Transform.html\" title=\"struct nalgebra::geometry::transform::Transform\">Transform</a>&lt;T2, C, 2&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;</h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">Source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<Transform<T2, C, 2>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubsetOf%3CUnit%3CComplex%3CT2%3E%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#28-31\">Source</a><a href=\"#impl-SubsetOf%3CUnit%3CComplex%3CT2%3E%3E%3E-for-Unit%3CComplex%3CT1%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T1, T2&gt; <a class=\"trait\" href=\"simba/scalar/subset/trait.SubsetOf.html\" title=\"trait simba::scalar::subset::SubsetOf\">SubsetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T2&gt;&gt;&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;<div class=\"where\">where\n    T1: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    T2: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a> + <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;T1&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#34\">Source</a><a href=\"#method.to_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.to_superset\" class=\"fn\">to_superset</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T2&gt;&gt;</h4></section></summary><div class='docblock'>The inclusion map: converts <code>self</code> to the equivalent element of its superset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_subset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#39\">Source</a><a href=\"#method.is_in_subset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.is_in_subset\" class=\"fn\">is_in_subset</a>(uq: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T2&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Checks if <code>element</code> is actually part of the subset <code>Self</code> (and can be converted to it).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_conversion.rs.html#44\">Source</a><a href=\"#method.from_superset_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#tymethod.from_superset_unchecked\" class=\"fn\">from_superset_unchecked</a>(uq: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T2&gt;&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T1&gt;&gt;</h4></section></summary><div class='docblock'>Use with care! Same as <code>self.to_superset</code> but without any property checks. Always succeeds.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_superset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simba/scalar/subset.rs.html#32\">Source</a><a href=\"#method.from_superset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\" class=\"fn\">from_superset</a>(element: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>The inverse inclusion map: attempts to construct <code>self</code> from the equivalent element of its\nsuperset. <a href=\"simba/scalar/subset/trait.SubsetOf.html#method.from_superset\">Read more</a></div></details></div></details>","SubsetOf<Unit<Complex<T2>>>","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CDVec2%3E-for-Unit%3CMatrix%3Cf64,+Const%3C2%3E,+Const%3C1%3E,+ArrayStorage%3Cf64,+2,+1%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_matrix.rs.html#128\">Source</a><a href=\"#impl-TryFrom%3CDVec2%3E-for-Unit%3CMatrix%3Cf64,+Const%3C2%3E,+Const%3C1%3E,+ArrayStorage%3Cf64,+2,+1%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f64.html\">f64</a>, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f64.html\">f64</a>, 2, 1&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_matrix.rs.html#128\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_matrix.rs.html#128\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    e: <a class=\"struct\" href=\"glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f64.html\">f64</a>, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f64.html\">f64</a>, 2, 1&gt;&gt;&gt;, &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f64.html\">f64</a>, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f64.html\">f64</a>, 2, 1&gt;&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"glam/f64/dvec2/struct.DVec2.html\" title=\"struct glam::f64::dvec2::DVec2\">DVec2</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<DVec2>","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CVec2%3E-for-Unit%3CMatrix%3Cf32,+Const%3C2%3E,+Const%3C1%3E,+ArrayStorage%3Cf32,+2,+1%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_matrix.rs.html#127\">Source</a><a href=\"#impl-TryFrom%3CVec2%3E-for-Unit%3CMatrix%3Cf32,+Const%3C2%3E,+Const%3C1%3E,+ArrayStorage%3Cf32,+2,+1%3E%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"glam/f32/vec2/struct.Vec2.html\" title=\"struct glam::f32::vec2::Vec2\">Vec2</a>&gt; for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f32.html\">f32</a>, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f32.html\">f32</a>, 2, 1&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_matrix.rs.html#127\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/third_party/glam/common/glam_matrix.rs.html#127\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    e: <a class=\"struct\" href=\"glam/f32/vec2/struct.Vec2.html\" title=\"struct glam::f32::vec2::Vec2\">Vec2</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f32.html\">f32</a>, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f32.html\">f32</a>, 2, 1&gt;&gt;&gt;, &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f32.html\">f32</a>, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.f32.html\">f32</a>, 2, 1&gt;&gt;&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"glam/f32/vec2/struct.Vec2.html\" title=\"struct glam::f32::vec2::Vec2\">Vec2</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Vec2>","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UlpsEq-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#454\">Source</a><a href=\"#impl-UlpsEq-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"approx/ulps_eq/trait.UlpsEq.html\" title=\"trait approx::ulps_eq::UlpsEq\">UlpsEq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_max_ulps\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#456\">Source</a><a href=\"#method.default_max_ulps\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.default_max_ulps\" class=\"fn\">default_max_ulps</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The default ULPs to tolerate when testing values that are far-apart. <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.default_max_ulps\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulps_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#461\">Source</a><a href=\"#method.ulps_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.ulps_eq\" class=\"fn\">ulps_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;,\n    epsilon: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n    max_ulps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses units in the last place (ULP) if the values are far apart.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulps_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/ulps_eq.rs.html#23\">Source</a><a href=\"#method.ulps_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#method.ulps_ne\" class=\"fn\">ulps_ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>, epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>, max_ulps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.ulps_eq\" title=\"method approx::ulps_eq::UlpsEq::ulps_eq\"><code>UlpsEq::ulps_eq</code></a>.</div></details></div></details>","UlpsEq","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UlpsEq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2210-2214\">Source</a><a href=\"#impl-UlpsEq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C, S&gt; <a class=\"trait\" href=\"approx/ulps_eq/trait.UlpsEq.html\" title=\"trait approx::ulps_eq::UlpsEq\">UlpsEq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"approx/ulps_eq/trait.UlpsEq.html\" title=\"trait approx::ulps_eq::UlpsEq\">UlpsEq</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.RawStorage.html\" title=\"trait nalgebra::base::storage::RawStorage\">RawStorage</a>&lt;T, R, C&gt;,\n    &lt;T as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_max_ulps\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2217\">Source</a><a href=\"#method.default_max_ulps\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.default_max_ulps\" class=\"fn\">default_max_ulps</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The default ULPs to tolerate when testing values that are far-apart. <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.default_max_ulps\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulps_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2222\">Source</a><a href=\"#method.ulps_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.ulps_eq\" class=\"fn\">ulps_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;,\n    epsilon: &lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt; as <a class=\"trait\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html\" title=\"trait approx::abs_diff_eq::AbsDiffEq\">AbsDiffEq</a>&gt;::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>,\n    max_ulps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses units in the last place (ULP) if the values are far apart.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulps_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/approx/ulps_eq.rs.html#23\">Source</a><a href=\"#method.ulps_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"approx/ulps_eq/trait.UlpsEq.html#method.ulps_ne\" class=\"fn\">ulps_ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>, epsilon: Self::<a class=\"associatedtype\" href=\"approx/abs_diff_eq/trait.AbsDiffEq.html#associatedtype.Epsilon\" title=\"type approx::abs_diff_eq::AbsDiffEq::Epsilon\">Epsilon</a>, max_ulps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of <a href=\"approx/ulps_eq/trait.UlpsEq.html#tymethod.ulps_eq\" title=\"method approx::ulps_eq::UlpsEq::ulps_eq\"><code>UlpsEq::ulps_eq</code></a>.</div></details></div></details>","UlpsEq","rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#173-175\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"conjugation-and-inversion\"><a class=\"doc-anchor\" href=\"#conjugation-and-inversion\">§</a>Conjugation and inversion</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.conjugate\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#189\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.conjugate\" class=\"fn\">conjugate</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Compute the conjugate of this unit complex number.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(<span class=\"number\">1.78</span>);\n<span class=\"kw\">let </span>conj = rot.conjugate();\n<span class=\"macro\">assert_eq!</span>(rot.complex().im, -conj.complex().im);\n<span class=\"macro\">assert_eq!</span>(rot.complex().re, conj.complex().re);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#206\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.inverse\" class=\"fn\">inverse</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Inverts this complex number if it is not zero.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(<span class=\"number\">1.2</span>);\n<span class=\"kw\">let </span>inv = rot.inverse();\n<span class=\"macro\">assert_relative_eq!</span>(rot * inv, UnitComplex::identity(), epsilon = <span class=\"number\">1.0e-6</span>);\n<span class=\"macro\">assert_relative_eq!</span>(inv * rot, UnitComplex::identity(), epsilon = <span class=\"number\">1.0e-6</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.conjugate_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#224\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.conjugate_mut\" class=\"fn\">conjugate_mut</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Compute in-place the conjugate of this unit complex number.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>angle = <span class=\"number\">1.7</span>;\n<span class=\"kw\">let </span>rot = UnitComplex::new(angle);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>conj = UnitComplex::new(angle);\nconj.conjugate_mut();\n<span class=\"macro\">assert_eq!</span>(rot.complex().im, -conj.complex().im);\n<span class=\"macro\">assert_eq!</span>(rot.complex().re, conj.complex().re);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#242\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.inverse_mut\" class=\"fn\">inverse_mut</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Inverts in-place this unit complex number.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>angle = <span class=\"number\">1.7</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rot = UnitComplex::new(angle);\nrot.inverse_mut();\n<span class=\"macro\">assert_relative_eq!</span>(rot * UnitComplex::new(angle), UnitComplex::identity());\n<span class=\"macro\">assert_relative_eq!</span>(UnitComplex::new(angle) * rot, UnitComplex::identity());</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#248-250\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"conversion-to-a-matrix\"><a class=\"doc-anchor\" href=\"#conversion-to-a-matrix\">§</a>Conversion to a matrix</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_rotation_matrix\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#264\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.to_rotation_matrix\" class=\"fn\">to_rotation_matrix</a>(self) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;</h4></section></summary><div class=\"docblock\"><p>Builds the rotation matrix corresponding to this unit complex number.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(f32::consts::FRAC_PI_6);\n<span class=\"kw\">let </span>expected = Rotation2::new(f32::consts::FRAC_PI_6);\n<span class=\"macro\">assert_eq!</span>(rot.to_rotation_matrix(), expected);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_homogeneous\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#285\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.to_homogeneous\" class=\"fn\">to_homogeneous</a>(\n    self,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;3&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 3, 3&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this unit complex number into its equivalent homogeneous transformation matrix.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(f32::consts::FRAC_PI_6);\n<span class=\"kw\">let </span>expected = Matrix3::new(<span class=\"number\">0.8660254</span>, -<span class=\"number\">0.5</span>,      <span class=\"number\">0.0</span>,\n                            <span class=\"number\">0.5</span>,       <span class=\"number\">0.8660254</span>, <span class=\"number\">0.0</span>,\n                            <span class=\"number\">0.0</span>,       <span class=\"number\">0.0</span>,       <span class=\"number\">1.0</span>);\n<span class=\"macro\">assert_eq!</span>(rot.to_homogeneous(), expected);</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#291-293\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"transformation-of-a-vector-or-a-point\"><a class=\"doc-anchor\" href=\"#transformation-of-a-vector-or-a-point\">§</a>Transformation of a vector or a point</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_point\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#310\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.transform_point\" class=\"fn\">transform_point</a>(&amp;self, pt: &amp;<a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotate the given point by this unit complex number.</p>\n<p>This is the same as the multiplication <code>self * pt</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n<span class=\"kw\">let </span>transformed_point = rot.transform_point(<span class=\"kw-2\">&amp;</span>Point2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>));\n<span class=\"macro\">assert_relative_eq!</span>(transformed_point, Point2::new(-<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>), epsilon = <span class=\"number\">1.0e-6</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_vector\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#329\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.transform_vector\" class=\"fn\">transform_vector</a>(\n    &amp;self,\n    v: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotate the given vector by this unit complex number.</p>\n<p>This is the same as the multiplication <code>self * v</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n<span class=\"kw\">let </span>transformed_vector = rot.transform_vector(<span class=\"kw-2\">&amp;</span>Vector2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>));\n<span class=\"macro\">assert_relative_eq!</span>(transformed_vector, Vector2::new(-<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>), epsilon = <span class=\"number\">1.0e-6</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_transform_point\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#346\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.inverse_transform_point\" class=\"fn\">inverse_transform_point</a>(\n    &amp;self,\n    pt: &amp;<a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/geometry/point/struct.OPoint.html\" title=\"struct nalgebra::geometry::point::OPoint\">OPoint</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotate the given point by the inverse of this unit complex number.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n<span class=\"kw\">let </span>transformed_point = rot.inverse_transform_point(<span class=\"kw-2\">&amp;</span>Point2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>));\n<span class=\"macro\">assert_relative_eq!</span>(transformed_point, Point2::new(<span class=\"number\">2.0</span>, -<span class=\"number\">1.0</span>), epsilon = <span class=\"number\">1.0e-6</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_transform_vector\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#365\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.inverse_transform_vector\" class=\"fn\">inverse_transform_vector</a>(\n    &amp;self,\n    v: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotate the given vector by the inverse of this unit complex number.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n<span class=\"kw\">let </span>transformed_vector = rot.inverse_transform_vector(<span class=\"kw-2\">&amp;</span>Vector2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>));\n<span class=\"macro\">assert_relative_eq!</span>(transformed_vector, Vector2::new(<span class=\"number\">2.0</span>, -<span class=\"number\">1.0</span>), epsilon = <span class=\"number\">1.0e-6</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse_transform_unit_vector\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#382\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.inverse_transform_unit_vector\" class=\"fn\">inverse_transform_unit_vector</a>(\n    &amp;self,\n    v: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Rotate the given vector by the inverse of this unit complex number.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n<span class=\"kw\">let </span>transformed_vector = rot.inverse_transform_unit_vector(<span class=\"kw-2\">&amp;</span>Vector2::x_axis());\n<span class=\"macro\">assert_relative_eq!</span>(transformed_vector, -Vector2::y_axis(), epsilon = <span class=\"number\">1.0e-6</span>);</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#388-390\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"interpolation\"><a class=\"doc-anchor\" href=\"#interpolation\">§</a>Interpolation</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slerp\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#409\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.slerp\" class=\"fn\">slerp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, t: T) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Spherical linear interpolation between two rotations represented as unit complex numbers.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples:</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>rot1 = UnitComplex::new(std::f32::consts::FRAC_PI_4);\n<span class=\"kw\">let </span>rot2 = UnitComplex::new(-std::f32::consts::PI);\n\n<span class=\"kw\">let </span>rot = rot1.slerp(<span class=\"kw-2\">&amp;</span>rot2, <span class=\"number\">1.0 </span>/ <span class=\"number\">3.0</span>);\n\n<span class=\"macro\">assert_relative_eq!</span>(rot.angle(), std::f32::consts::FRAC_PI_2);</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#74-76\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"angle-extraction\"><a class=\"doc-anchor\" href=\"#angle-extraction\">§</a>Angle extraction</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.angle\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#88\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.angle\" class=\"fn\">angle</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>The rotation angle in <code>]-pi; pi]</code> of this unit complex number.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(<span class=\"number\">1.78</span>);\n<span class=\"macro\">assert_eq!</span>(rot.angle(), <span class=\"number\">1.78</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sin_angle\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#103\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.sin_angle\" class=\"fn\">sin_angle</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>The sine of the rotation angle.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>angle = <span class=\"number\">1.78f32</span>;\n<span class=\"kw\">let </span>rot = UnitComplex::new(angle);\n<span class=\"macro\">assert_eq!</span>(rot.sin_angle(), angle.sin());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cos_angle\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#118\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.cos_angle\" class=\"fn\">cos_angle</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>The cosine of the rotation angle.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>angle = <span class=\"number\">1.78f32</span>;\n<span class=\"kw\">let </span>rot = UnitComplex::new(angle);\n<span class=\"macro\">assert_eq!</span>(rot.cos_angle(),angle.cos());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scaled_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#128\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.scaled_axis\" class=\"fn\">scaled_axis</a>(\n    &amp;self,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 1, 1&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>The rotation angle returned as a 1-dimensional vector.</p>\n<p>This is generally used in the context of generic programming. Using\nthe <code>.angle()</code> method instead is more common.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.axis_angle\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#139-141\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.axis_angle\" class=\"fn\">axis_angle</a>(\n    &amp;self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 1, 1&gt;&gt;&gt;, T)&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,</div></h4></section></summary><div class=\"docblock\"><p>The rotation axis and angle in (0, pi] of this complex number.</p>\n<p>This is generally used in the context of generic programming. Using\nthe <code>.angle()</code> method instead is more common.\nReturns <code>None</code> if the angle is zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.angle_to\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#166\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.angle_to\" class=\"fn\">angle_to</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;) -&gt; T</h4></section></summary><div class=\"docblock\"><p>The rotation angle needed to make <code>self</code> and <code>other</code> coincide.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot1 = UnitComplex::new(<span class=\"number\">0.1</span>);\n<span class=\"kw\">let </span>rot2 = UnitComplex::new(<span class=\"number\">1.7</span>);\n<span class=\"macro\">assert_relative_eq!</span>(rot1.angle_to(<span class=\"kw-2\">&amp;</span>rot2), <span class=\"number\">1.6</span>);</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#126-128\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"construction-from-an-existing-2d-matrix-or-complex-number\"><a class=\"doc-anchor\" href=\"#construction-from-an-existing-2d-matrix-or-complex-number\">§</a>Construction from an existing 2D matrix or complex number</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#140-142\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.cast\" class=\"fn\">cast</a>&lt;To&gt;(self) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;To&gt;&gt;<div class=\"where\">where\n    To: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a>,\n    <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;To&gt;&gt;: <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Cast the components of <code>self</code> to another type.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[macro_use] </span><span class=\"kw\">extern crate </span>approx;\n<span class=\"kw\">let </span>c = UnitComplex::new(<span class=\"number\">1.0f64</span>);\n<span class=\"kw\">let </span>c2 = c.cast::&lt;f32&gt;();\n<span class=\"macro\">assert_relative_eq!</span>(c2, UnitComplex::new(<span class=\"number\">1.0f32</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.complex\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#162\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.complex\" class=\"fn\">complex</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>The underlying complex number.</p>\n<p>Same as <code>self.as_ref()</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>angle = <span class=\"number\">1.78f32</span>;\n<span class=\"kw\">let </span>rot = UnitComplex::new(angle);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>rot.complex(), Complex::new(angle.cos(), angle.sin()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_complex\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#170\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_complex\" class=\"fn\">from_complex</a>(q: <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new unit complex number from a complex number.</p>\n<p>The input complex number will be normalized.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_complex_and_get\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#178\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_complex_and_get\" class=\"fn\">from_complex_and_get</a>(q: <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;) -&gt; (<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;, T)</h4></section></summary><div class=\"docblock\"><p>Creates a new unit complex number from a complex number.</p>\n<p>The input complex number will be normalized. Returns the norm of the complex number as well.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_rotation_matrix\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#194\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_rotation_matrix\" class=\"fn\">from_rotation_matrix</a>(rotmat: &amp;<a class=\"struct\" href=\"nalgebra/geometry/rotation/struct.Rotation.html\" title=\"struct nalgebra::geometry::rotation::Rotation\">Rotation</a>&lt;T, 2&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Builds the unit complex number from the corresponding 2D rotation matrix.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = Rotation2::new(<span class=\"number\">1.7</span>);\n<span class=\"kw\">let </span>complex = UnitComplex::from_rotation_matrix(<span class=\"kw-2\">&amp;</span>rot);\n<span class=\"macro\">assert_eq!</span>(complex, UnitComplex::new(<span class=\"number\">1.7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_basis_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#204\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_basis_unchecked\" class=\"fn\">from_basis_unchecked</a>(\n    basis: &amp;[<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 1&gt;&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.array.html\">2</a>],\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Builds a rotation from a basis assumed to be orthonormal.</p>\n<p>In order to get a valid unit-quaternion, the input must be an\northonormal basis, i.e., all vectors are normalized, and the are\nall orthogonal to each other. These invariants are not checked\nby this method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_matrix\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#215-217\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_matrix\" class=\"fn\">from_matrix</a>(\n    m: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 2&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,</div></h4></section></summary><div class=\"docblock\"><p>Builds an unit complex by extracting the rotation part of the given transformation <code>m</code>.</p>\n<p>This is an iterative method. See <code>.from_matrix_eps</code> to provide mover\nconvergence parameters and starting solution.\nThis implements “A Robust Method to Extract the Rotational Part of Deformations” by Müller et al.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_matrix_eps\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#234-236\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_matrix_eps\" class=\"fn\">from_matrix_eps</a>(\n    m: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/array_storage/struct.ArrayStorage.html\" title=\"struct nalgebra::base::array_storage::ArrayStorage\">ArrayStorage</a>&lt;T, 2, 2&gt;&gt;,\n    eps: T,\n    max_iter: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>,\n    guess: <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,</div></h4></section></summary><div class=\"docblock\"><p>Builds an unit complex by extracting the rotation part of the given transformation <code>m</code>.</p>\n<p>This implements “A Robust Method to Extract the Rotational Part of Deformations” by Müller et al.</p>\n<h5 id=\"parameters\"><a class=\"doc-anchor\" href=\"#parameters\">§</a>Parameters</h5>\n<ul>\n<li><code>m</code>: the matrix from which the rotational part is to be extracted.</li>\n<li><code>eps</code>: the angular errors tolerated between the current rotation and the optimal one.</li>\n<li><code>max_iter</code>: the maximum number of iterations. Loops indefinitely until convergence if set to <code>0</code>.</li>\n<li><code>guess</code>: an estimate of the solution. Convergence will be significantly faster if an initial solution close\nto the actual solution is provided. Can be set to <code>UnitQuaternion::identity()</code> if no other\nguesses come to mind.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotation_to\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#259\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.rotation_to\" class=\"fn\">rotation_to</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>The unit complex number needed to make <code>self</code> and <code>other</code> coincide.</p>\n<p>The result is such that: <code>self.rotation_to(other) * self == other</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot1 = UnitComplex::new(<span class=\"number\">0.1</span>);\n<span class=\"kw\">let </span>rot2 = UnitComplex::new(<span class=\"number\">1.7</span>);\n<span class=\"kw\">let </span>rot_to = rot1.rotation_to(<span class=\"kw-2\">&amp;</span>rot2);\n\n<span class=\"macro\">assert_relative_eq!</span>(rot_to * rot1, rot2);\n<span class=\"macro\">assert_relative_eq!</span>(rot_to.inverse() * rot2, rot1);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powf\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#278\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.powf\" class=\"fn\">powf</a>(&amp;self, n: T) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Raise this unit complex number to a given floating power.</p>\n<p>This returns the unit complex number that identifies a rotation angle equal to\n<code>self.angle() × n</code>.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(<span class=\"number\">0.78</span>);\n<span class=\"kw\">let </span>pow = rot.powf(<span class=\"number\">2.0</span>);\n<span class=\"macro\">assert_relative_eq!</span>(pow.angle(), <span class=\"number\">2.0 </span>* <span class=\"number\">0.78</span>);</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#284-286\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"construction-from-two-vectors\"><a class=\"doc-anchor\" href=\"#construction-from-two-vectors\">§</a>Construction from two vectors</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotation_between\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#302-306\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.rotation_between\" class=\"fn\">rotation_between</a>&lt;SB, SC&gt;(\n    a: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SB&gt;,\n    b: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SC&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    SB: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n    SC: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>The unit complex needed to make <code>a</code> and <code>b</code> be collinear and point toward the same\ndirection.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Vector2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);\n<span class=\"kw\">let </span>b = Vector2::new(<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>);\n<span class=\"kw\">let </span>rot = UnitComplex::rotation_between(<span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>b);\n<span class=\"macro\">assert_relative_eq!</span>(rot * a, b);\n<span class=\"macro\">assert_relative_eq!</span>(rot.inverse() * b, a);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scaled_rotation_between\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#326-334\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.scaled_rotation_between\" class=\"fn\">scaled_rotation_between</a>&lt;SB, SC&gt;(\n    a: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SB&gt;,\n    b: &amp;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SC&gt;,\n    s: T,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    SB: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n    SC: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and point toward the same\ndirection, raised to the power <code>s</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Vector2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);\n<span class=\"kw\">let </span>b = Vector2::new(<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>);\n<span class=\"kw\">let </span>rot2 = UnitComplex::scaled_rotation_between(<span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>b, <span class=\"number\">0.2</span>);\n<span class=\"kw\">let </span>rot5 = UnitComplex::scaled_rotation_between(<span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>b, <span class=\"number\">0.5</span>);\n<span class=\"macro\">assert_relative_eq!</span>(rot2 * rot2 * rot2 * rot2 * rot2 * a, b, epsilon = <span class=\"number\">1.0e-6</span>);\n<span class=\"macro\">assert_relative_eq!</span>(rot5 * rot5 * a, b, epsilon = <span class=\"number\">1.0e-6</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotation_between_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#361-367\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.rotation_between_axis\" class=\"fn\">rotation_between_axis</a>&lt;SB, SC&gt;(\n    a: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SB&gt;&gt;,\n    b: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SC&gt;&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    SB: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n    SC: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>The unit complex needed to make <code>a</code> and <code>b</code> be collinear and point toward the same\ndirection.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Unit::new_normalize(Vector2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>));\n<span class=\"kw\">let </span>b = Unit::new_normalize(Vector2::new(<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>));\n<span class=\"kw\">let </span>rot = UnitComplex::rotation_between_axis(<span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>b);\n<span class=\"macro\">assert_relative_eq!</span>(rot * a, b);\n<span class=\"macro\">assert_relative_eq!</span>(rot.inverse() * b, a);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scaled_rotation_between_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#387-394\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.scaled_rotation_between_axis\" class=\"fn\">scaled_rotation_between_axis</a>&lt;SB, SC&gt;(\n    na: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SB&gt;&gt;,\n    nb: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SC&gt;&gt;,\n    s: T,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    SB: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,\n    SC: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;2&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and point toward the same\ndirection, raised to the power <code>s</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Unit::new_normalize(Vector2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>));\n<span class=\"kw\">let </span>b = Unit::new_normalize(Vector2::new(<span class=\"number\">2.0</span>, <span class=\"number\">1.0</span>));\n<span class=\"kw\">let </span>rot2 = UnitComplex::scaled_rotation_between_axis(<span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>b, <span class=\"number\">0.2</span>);\n<span class=\"kw\">let </span>rot5 = UnitComplex::scaled_rotation_between_axis(<span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>b, <span class=\"number\">0.5</span>);\n<span class=\"macro\">assert_relative_eq!</span>(rot2 * rot2 * rot2 * rot2 * rot2 * a, b, epsilon = <span class=\"number\">1.0e-6</span>);\n<span class=\"macro\">assert_relative_eq!</span>(rot5 * rot5 * a, b, epsilon = <span class=\"number\">1.0e-6</span>);</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#30-32\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"identity\"><a class=\"doc-anchor\" href=\"#identity\">§</a>Identity</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.identity\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#46\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.identity\" class=\"fn\">identity</a>() -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>The unit complex number multiplicative identity.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot1 = UnitComplex::identity();\n<span class=\"kw\">let </span>rot2 = UnitComplex::new(<span class=\"number\">1.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(rot1 * rot2, rot2);\n<span class=\"macro\">assert_eq!</span>(rot2 * rot1, rot2);</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#52-54\">Source</a><a href=\"#impl-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,\n    &lt;T as <a class=\"trait\" href=\"simba/simd/simd_value/trait.SimdValue.html\" title=\"trait simba::simd::simd_value::SimdValue\">SimdValue</a>&gt;::<a class=\"associatedtype\" href=\"simba/simd/simd_value/trait.SimdValue.html#associatedtype.Element\" title=\"type simba::simd::simd_value::SimdValue::Element\">Element</a>: <a class=\"trait\" href=\"simba/simd/simd_real/trait.SimdRealField.html\" title=\"trait simba::simd::simd_real::SimdRealField\">SimdRealField</a>,</div></h3><div class=\"docblock\"><h4 id=\"construction-from-a-2d-rotation-angle\"><a class=\"doc-anchor\" href=\"#construction-from-a-2d-rotation-angle\">§</a>Construction from a 2D rotation angle</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#69\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.new\" class=\"fn\">new</a>(angle: T) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Builds the unit complex number corresponding to the rotation with the given angle.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n\n<span class=\"macro\">assert_relative_eq!</span>(rot * Point2::new(<span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>), Point2::new(-<span class=\"number\">4.0</span>, <span class=\"number\">3.0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_angle\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#90\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_angle\" class=\"fn\">from_angle</a>(angle: T) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Builds the unit complex number corresponding to the rotation with the angle.</p>\n<p>Same as <code>Self::new(angle)</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>rot = UnitComplex::from_angle(f32::consts::FRAC_PI_2);\n\n<span class=\"macro\">assert_relative_eq!</span>(rot * Point2::new(<span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>), Point2::new(-<span class=\"number\">4.0</span>, <span class=\"number\">3.0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_cos_sin_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#111\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_cos_sin_unchecked\" class=\"fn\">from_cos_sin_unchecked</a>(cos: T, sin: T) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Builds the unit complex number from the sinus and cosinus of the rotation angle.</p>\n<p>The input values are not checked to actually be cosines and sine of the same value.\nIs is generally preferable to use the <code>::new(angle)</code> constructor instead.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>angle = f32::consts::FRAC_PI_2;\n<span class=\"kw\">let </span>rot = UnitComplex::from_cos_sin_unchecked(angle.cos(), angle.sin());\n\n<span class=\"macro\">assert_relative_eq!</span>(rot * Point2::new(<span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>), Point2::new(-<span class=\"number\">4.0</span>, <span class=\"number\">3.0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_scaled_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex_construction.rs.html#120\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_scaled_axis\" class=\"fn\">from_scaled_axis</a>&lt;SB&gt;(\n    axisangle: <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, SB&gt;,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    SB: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Builds a unit complex rotation from an angle in radian wrapped in a 1-dimensional vector.</p>\n<p>This is generally used in the context of generic programming. Using\nthe <code>::new(angle)</code> method instead is more common.</p>\n</div></details></div></details>",0,"rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CMatrix%3CT,+D,+Const%3C1%3E,+S%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/interpolation.rs.html#65\">Source</a><a href=\"#impl-Unit%3CMatrix%3CT,+D,+Const%3C1%3E,+S%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D, S&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,\n    D: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, D&gt;,</div></h3><div class=\"docblock\"><h4 id=\"interpolation-between-two-unit-vectors\"><a class=\"doc-anchor\" href=\"#interpolation-between-two-unit-vectors\">§</a>Interpolation between two unit vectors</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slerp\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/interpolation.rs.html#81-87\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.slerp\" class=\"fn\">slerp</a>&lt;S2&gt;(\n    &amp;self,\n    rhs: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S2&gt;&gt;,\n    t: T,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;D&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;<div class=\"where\">where\n    S2: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, D&gt;,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Computes the spherical linear interpolation between two unit vectors.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples:</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>v1 = Unit::new_normalize(Vector2::new(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>));\n<span class=\"kw\">let </span>v2 = Unit::new_normalize(Vector2::new(<span class=\"number\">2.0</span>, -<span class=\"number\">3.0</span>));\n\n<span class=\"kw\">let </span>v = v1.slerp(<span class=\"kw-2\">&amp;</span>v2, <span class=\"number\">1.0</span>);\n\n<span class=\"macro\">assert_eq!</span>(v, v2);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_slerp\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/interpolation.rs.html#99-106\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.try_slerp\" class=\"fn\">try_slerp</a>&lt;S2&gt;(\n    &amp;self,\n    rhs: &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S2&gt;&gt;,\n    t: T,\n    epsilon: T,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;D&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T&gt;&gt;&gt;&gt;<div class=\"where\">where\n    S2: <a class=\"trait\" href=\"nalgebra/base/storage/trait.Storage.html\" title=\"trait nalgebra::base::storage::Storage\">Storage</a>&lt;T, D&gt;,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Computes the spherical linear interpolation between two unit vectors.</p>\n<p>Returns <code>None</code> if the two vectors are almost collinear and with opposite direction\n(in this case, there is an infinity of possible results).</p>\n</div></details></div></details>",0,"rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CMatrix%3CT,+D,+Const%3C1%3E,+S%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2248-2252\">Source</a><a href=\"#impl-Unit%3CMatrix%3CT,+D,+Const%3C1%3E,+S%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, D, S&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a>,\n    D: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.RawStorage.html\" title=\"trait nalgebra::base::storage::RawStorage\">RawStorage</a>&lt;T, D&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/matrix.rs.html#2263-2267\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T2&gt;(\n    self,\n) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T2, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;D&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T2&gt;&gt;&gt;<div class=\"where\">where\n    T2: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a>,\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a>,\n    <a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T2, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, &lt;<a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a> as <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;D&gt;&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/allocator/trait.Allocator.html#associatedtype.Buffer\" title=\"type nalgebra::base::allocator::Allocator::Buffer\">Buffer</a>&lt;T2&gt;&gt;: <a class=\"trait\" href=\"simba/scalar/subset/trait.SupersetOf.html\" title=\"trait simba::scalar::subset::SupersetOf\">SupersetOf</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, D, <a class=\"struct\" href=\"nalgebra/base/dimension/struct.Const.html\" title=\"struct nalgebra::base::dimension::Const\">Const</a>&lt;1&gt;, S&gt;&gt;,\n    <a class=\"struct\" href=\"nalgebra/base/default_allocator/struct.DefaultAllocator.html\" title=\"struct nalgebra::base::default_allocator::DefaultAllocator\">DefaultAllocator</a>: <a class=\"trait\" href=\"nalgebra/base/allocator/trait.Allocator.html\" title=\"trait nalgebra::base::allocator::Allocator\">Allocator</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Cast the components of <code>self</code> to another type.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = Vector3::&lt;f64&gt;::y_axis();\n<span class=\"kw\">let </span>v2 = v.cast::&lt;f32&gt;();\n<span class=\"macro\">assert_eq!</span>(v2, Vector3::&lt;f32&gt;::y_axis());</code></pre></div>\n</div></details></div></details>",0,"rapier2d::math::UnitVector"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#111\">Source</a><a href=\"#impl-Unit%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/unit/trait.Normed.html\" title=\"trait nalgebra::base::unit::Normed\">Normed</a>,</div></h3><div class=\"docblock\"><h4 id=\"construction-with-normalization\"><a class=\"doc-anchor\" href=\"#construction-with-normalization\">§</a>Construction with normalization</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_normalize\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#114\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.new_normalize\" class=\"fn\">new_normalize</a>(value: T) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Normalize the given vector and return it wrapped on a <code>Unit</code> structure.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#122-124\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.try_new\" class=\"fn\">try_new</a>(value: T, min_norm: &lt;T as <a class=\"trait\" href=\"nalgebra/base/unit/trait.Normed.html\" title=\"trait nalgebra::base::unit::Normed\">Normed</a>&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/unit/trait.Normed.html#associatedtype.Norm\" title=\"type nalgebra::base::unit::Normed::Norm\">Norm</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;&gt;<div class=\"where\">where\n    &lt;T as <a class=\"trait\" href=\"nalgebra/base/unit/trait.Normed.html\" title=\"trait nalgebra::base::unit::Normed\">Normed</a>&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/unit/trait.Normed.html#associatedtype.Norm\" title=\"type nalgebra::base::unit::Normed::Norm\">Norm</a>: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to normalize the given vector and return it wrapped on a <code>Unit</code> structure.</p>\n<p>Returns <code>None</code> if the norm was smaller or equal to <code>min_norm</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_and_get\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#131\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.new_and_get\" class=\"fn\">new_and_get</a>(value: T) -&gt; (<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;, &lt;T as <a class=\"trait\" href=\"nalgebra/base/unit/trait.Normed.html\" title=\"trait nalgebra::base::unit::Normed\">Normed</a>&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/unit/trait.Normed.html#associatedtype.Norm\" title=\"type nalgebra::base::unit::Normed::Norm\">Norm</a>)</h4></section></summary><div class=\"docblock\"><p>Normalize the given vector and return it wrapped on a <code>Unit</code> structure and its norm.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_new_and_get\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#141-143\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.try_new_and_get\" class=\"fn\">try_new_and_get</a>(\n    value: T,\n    min_norm: &lt;T as <a class=\"trait\" href=\"nalgebra/base/unit/trait.Normed.html\" title=\"trait nalgebra::base::unit::Normed\">Normed</a>&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/unit/trait.Normed.html#associatedtype.Norm\" title=\"type nalgebra::base::unit::Normed::Norm\">Norm</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;, &lt;T as <a class=\"trait\" href=\"nalgebra/base/unit/trait.Normed.html\" title=\"trait nalgebra::base::unit::Normed\">Normed</a>&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/unit/trait.Normed.html#associatedtype.Norm\" title=\"type nalgebra::base::unit::Normed::Norm\">Norm</a>)&gt;<div class=\"where\">where\n    &lt;T as <a class=\"trait\" href=\"nalgebra/base/unit/trait.Normed.html\" title=\"trait nalgebra::base::unit::Normed\">Normed</a>&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/unit/trait.Normed.html#associatedtype.Norm\" title=\"type nalgebra::base::unit::Normed::Norm\">Norm</a>: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>,</div></h4></section></summary><div class=\"docblock\"><p>Normalize the given vector and return it wrapped on a <code>Unit</code> structure and its norm.</p>\n<p>Returns <code>None</code> if the norm was smaller or equal to <code>min_norm</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.renormalize\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#162\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.renormalize\" class=\"fn\">renormalize</a>(&amp;mut self) -&gt; &lt;T as <a class=\"trait\" href=\"nalgebra/base/unit/trait.Normed.html\" title=\"trait nalgebra::base::unit::Normed\">Normed</a>&gt;::<a class=\"associatedtype\" href=\"nalgebra/base/unit/trait.Normed.html#associatedtype.Norm\" title=\"type nalgebra::base::unit::Normed::Norm\">Norm</a></h4></section></summary><div class=\"docblock\"><p>Normalizes this vector again. This is useful when repeated computations\nmight cause a drift in the norm because of float inaccuracies.</p>\n<p>Returns the norm before re-normalization. See <code>.renormalize_fast</code> for a faster alternative\nthat may be slightly less accurate if <code>self</code> drifted significantly from having a unit length.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.renormalize_fast\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#172\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.renormalize_fast\" class=\"fn\">renormalize_fast</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Normalizes this vector again using a first-order Taylor approximation.\nThis is useful when repeated computations might cause a drift in the norm\nbecause of float inaccuracies.</p>\n</div></details></div></details>",0,"rapier2d::math::UnitVector","rapier2d::math::Rotation"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unit%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#181\">Source</a><a href=\"#impl-Unit%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;</h3><div class=\"docblock\"><h4 id=\"data-extraction-and-construction-without-normalization\"><a class=\"doc-anchor\" href=\"#data-extraction-and-construction-without-normalization\">§</a>Data extraction and construction without normalization</h4></div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#184\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(value: T) -&gt; <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps the given value, assuming it is already normalized.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ref_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#190\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.from_ref_unchecked\" class=\"fn\">from_ref_unchecked</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;T</a>) -&gt; &amp;<a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps the given reference, assuming it is already normalized.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#196\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Retrieves the underlying value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#204\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: use <code>.into_inner()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Retrieves the underlying value.\nDeprecated: use <a href=\"nalgebra/base/unit/struct.Unit.html#method.into_inner\" title=\"method nalgebra::base::unit::Unit::into_inner\"><code>Unit::into_inner</code></a> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#212\">Source</a><h4 class=\"code-header\">pub fn <a href=\"nalgebra/base/unit/struct.Unit.html#tymethod.as_mut_unchecked\" class=\"fn\">as_mut_unchecked</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying value. This is <code>_unchecked</code> because modifying\nthe underlying value in such a way that it no longer has unit length may lead to unexpected\nresults.</p>\n</div></details></div></details>",0,"rapier2d::math::UnitVector","rapier2d::math::Rotation"],["<section id=\"impl-Copy-for-Unit%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#26\">Source</a><a href=\"#impl-Copy-for-Unit%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","rapier2d::math::UnitVector","rapier2d::math::Rotation"],["<section id=\"impl-Eq-for-Unit%3CComplex%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/geometry/unit_complex.rs.html#41\">Source</a><a href=\"#impl-Eq-for-Unit%3CComplex%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","rapier2d::math::Rotation"],["<section id=\"impl-Eq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nalgebra/base/unit.rs.html#87-92\">Source</a><a href=\"#impl-Eq-for-Unit%3CMatrix%3CT,+R,+C,+S%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, R, C, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"nalgebra/base/unit/struct.Unit.html\" title=\"struct nalgebra::base::unit::Unit\">Unit</a>&lt;<a class=\"struct\" href=\"nalgebra/base/matrix/struct.Matrix.html\" title=\"struct nalgebra::base::matrix::Matrix\">Matrix</a>&lt;T, R, C, S&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nalgebra/base/scalar/trait.Scalar.html\" title=\"trait nalgebra::base::scalar::Scalar\">Scalar</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    R: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    C: <a class=\"trait\" href=\"nalgebra/base/dimension/trait.Dim.html\" title=\"trait nalgebra::base::dimension::Dim\">Dim</a>,\n    S: <a class=\"trait\" href=\"nalgebra/base/storage/trait.RawStorage.html\" title=\"trait nalgebra::base::storage::RawStorage\">RawStorage</a>&lt;T, R, C&gt;,</div></h3></section>","Eq","rapier2d::math::UnitVector"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[424597]}
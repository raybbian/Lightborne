searchState.loadedDescShard("bevy", 9, "The features to ensure are enabled regardless of what the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer good defaults from the build type\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nAllows you to choose which minor version of GLES3 to use …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThese are for controlling WGPU’s debug information to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe imposed limits.\nFunction to create a <code>RenderCreation::Manual</code> variant.\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nThis hints to the WGPU device about the preferred memory …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet a features/limits priority from the environment …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe path to pass to wgpu for API call tracing. This only …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns this set of flags, affected by environment …\nPath to the <code>dxcompiler.dll</code> file, or path to the directory …\nPath to the <code>dxil.dll</code> file, or path to the directory …\nDefines the range of allowed memory block sizes for …\nA storage buffer that is prepared as a <code>RenderAsset</code> and …\nA storage buffer that is prepared as a <code>RenderAsset</code> and …\nAdds <code>ShaderStorageBuffer</code> as an asset that is extracted and …\nThe asset usage of the storage buffer.\nThe buffer description used to create the buffer.\nOptional data used to initialize the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new storage buffer with the given data and asset …\nSets the data of the storage buffer to the given <code>ShaderType</code>…\nCreates a new storage buffer with the given size and asset …\nPlugin that registers a component for automatic sync to …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nComponent added on the render world entities to keep track …\nA <code>HashMap</code> pre-configured to use <code>EntityHash</code> hashing with a …\nA <code>HashSet</code> pre-configured to use <code>EntityHash</code> hashing with a …\nComponent added on the main world entities that are synced …\nMarker component that indicates that its entity needs to …\nA plugin that synchronizes entities with <code>SyncToRenderWorld</code> …\nMarker component that indicates that its entity needs to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cached GPU <code>Texture</code> with corresponding <code>TextureView</code>.\nA wrapper for a <code>CachedTexture</code> that is used as a …\nA rendering resource for the default image sampler which …\nA wrapper for a <code>TextureView</code> that is used as a depth-only …\nA <code>RenderApp</code> resource that contains the default “fallback …\nA <code>RenderApp</code> resource that contains a “cubemap fallback …\nA Cache of fallback textures that uses the sample count …\nA <code>RenderApp</code> resource that contains a <em>zero-filled</em> “…\nThe GPU-representation of an <code>Image</code>. Consists of the <code>Texture</code>…\nAdds the <code>Image</code> as an asset and makes sure that they are …\nA wrapper for a <code>TextureView</code> that is used as a …\nA handle to a 1 x 1 transparent white image.\nThis resource caches textures that are created repeatedly …\nFallback image for <code>TextureViewDimension::Cube</code>.\nFallback image for <code>TextureViewDimension::CubeArray</code>.\nFallback image for <code>TextureViewDimension::D1</code>.\nFallback image for <code>TextureViewDimension::D2</code>.\nFallback image for <code>TextureViewDimension::D2Array</code>.\nFallback image for <code>TextureViewDimension::D3</code>.\nThe default image sampler to use when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nRetrieves a texture that matches the <code>descriptor</code>. If no …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment, without the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the texture cache contains no textures.\nConverts the extracted image into a <code>GpuImage</code>.\nUpdates the cache and only retains recently used textures.\nUpdates the <code>TextureCache</code> to only retains recently used …\nLabel for the <code>calculate_bounds</code>, <code>calculate_bounds_2d</code> and …\nLabel for the <code>check_visibility</code> system updating …\nConfigures filmic color grading parameters to adjust the …\nFilmic color grading values applied to the image as a …\nA section of color grading values that can be selectively …\nThe <code>ColorGrading</code> structure, packed into the most efficient …\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nAn identifier for a rendering layer.\nComponent for configuring the number of samples for …\nUse this component to opt-out of built-in frustum culling …\nDescribes which rendering layers an entity belongs to.\nStores information related to <code>VisibilityRange</code>s in the …\nCollection of entities visible from the current view.\nLabel for <code>update_frusta</code> in <code>CameraProjectionPlugin</code>.\nWe need at least 4 storage buffer bindings available to …\nContains <code>OutputColorAttachment</code> used for each target …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nLabel for the system propagating the <code>InheritedVisibility</code> …\nSpecifies the range of distances that this entity must be …\nA plugin that enables <code>VisibilityRange</code>s, which allow …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nCollection of entities visible from the current view.\nStores which entities are in within the <code>VisibilityRange</code>s …\nCreates a new <em>abrupt</em> visibility range, with no crossfade.\nReturns an iterator that visits the shadows, midtones, and …\nApplies the given mutating function to the shadows, …\nGet the bitmask representation of the contained layers.\nReturns a reference to the GPU buffer that stores …\nComputes and adds an <code>Aabb</code> component to entities with a …\nSystem updating the visibility of entities each frame.\nChecks all entities against all views in order to …\nClears the view target <code>OutputColorAttachment</code>s.\nAdjusts the range of colors.\nCreates window surfaces.\nBy default, this structure includes layer <code>0</code>, which …\nThe range of distances, in world units, between which this …\nAn entity that contains the components in <code>Window</code>.\nReturns true if the entity has a visibility range and it …\nReturns true if the entity is in range of any view.\nReturns true if the entity is in range of the given camera.\nExposure value (EV) offset, measured in stops.\nExtracts all <code>VisibilityRange</code> components from the main …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>RenderLayers</code> from a list of layers.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nA linear luminance adjustment, mainly affecting the middle …\nA nonlinear luminance adjustment, mainly affecting the …\nRetrieve this target’s main texture’s color attachment.\nRetrieve this target’s “unsampled” main texture’s …\nFilmic color grading values applied to the image as a …\nColor grading values that are applied to the lighter parts …\nAn adjustment to the hue, in radians.\nReturns the set of layers shared by two instances of …\nDetermine if a <code>RenderLayers</code> intersects another.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if both the start and end transitions for …\nReturns true if the object is completely invisible, given …\nReturns <code>true</code> if and only if the main texture is …\nReturns true if the object will be visible at all, given a …\nGet an iterator of the layers.\nCreate a new <code>RenderLayers</code> belonging to the given layer.\nA fixed luminance adjustment, mainly affecting the lower …\nReturns the index in the GPU buffer corresponding to the …\nThe “main” unsampled texture.\nThe <em>other</em> “main” unsampled texture. In most cases you …\nThe <em>other</em> “main” unsampled texture view. In most cases …\nThe “main” unsampled texture.\nColor grading values that are applied to the parts of the …\nThe luminance (brightness) ranges that are considered part …\nCreate a new <code>RenderLayers</code> that belongs to no layers.\nThe final texture this view will render to.\nThe format of the final texture this view will render to\nThis will start a new “post process write”, which …\nSaturation adjustment applied after tonemapping. Values …\nPrepares the view target <code>OutputColorAttachment</code> for each …\n(re)configures window surfaces, and obtains a swapchain …\nCreates a 3D rangefinder for a view\nThe “main” sampled texture.\nThe “main” sampled texture view.\nValues below 1.0 desaturate, with a value of 0.0 resulting …\nColor grading values that are applied to the darker parts …\nThe range of distances, in world units, between which this …\nNote: this will not always be the swap chain texture view. …\nReturns all layers included in exactly one of the …\nAn adjustment made to the CIE 1931 chromaticity <em>x</em> value.\nAn adjustment made to the CIE 1931 chromaticity <em>y</em> value.\nReturns all layers included in either instance of …\nUpdates <code>Frustum</code>.\nIf set to true, Bevy will use the center of the …\nThe visibility of the entity.\nAdd the given layer.\nCreates a new <code>ColorGrading</code> instance in which shadows, …\nRemoves the given rendering layer.\nWrites the <code>RenderVisibilityRanges</code> table to the GPU.\nLabel for the <code>calculate_bounds</code>, <code>calculate_bounds_2d</code> and …\nLabel for the <code>check_visibility</code> system updating …\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nAn identifier for a rendering layer.\nUse this component to opt-out of built-in frustum culling …\nDescribes which rendering layers an entity belongs to.\nStores information related to <code>VisibilityRange</code>s in the …\nCollection of entities visible from the current view.\nLabel for <code>update_frusta</code> in <code>CameraProjectionPlugin</code>.\nWe need at least 4 storage buffer bindings available to …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nLabel for the system propagating the <code>InheritedVisibility</code> …\nSpecifies the range of distances that this entity must be …\nA plugin that enables <code>VisibilityRange</code>s, which allow …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nCollection of entities visible from the current view.\nStores which entities are in within the <code>VisibilityRange</code>s …\nComputes and adds an <code>Aabb</code> component to entities with a …\nSystem updating the visibility of entities each frame.\nChecks all entities against all views in order to …\nThe range of distances, in world units, between which this …\nExtracts all <code>VisibilityRange</code> components from the main …\nThe range of distances, in world units, between which this …\nUpdates <code>Frustum</code>.\nIf set to true, Bevy will use the center of the …\nThe visibility of the entity.\nWrites the <code>RenderVisibilityRanges</code> table to the GPU.\nCreates window surfaces.\nAn entity that contains the components in <code>Window</code>.\n(re)configures window surfaces, and obtains a swapchain …\nNote: this will not always be the swap chain texture view. …\nA marker component that indicates that a screenshot has …\nA marker component that indicates that a screenshot is …\nA component that signals to the renderer to capture a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCapture a screenshot of the provided render target image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCapture a screenshot of the primary window, if one exists.\nSaves the captured screenshot to disk at the provided path.\nCapture a screenshot of the provided manual texture view.\nCapture a screenshot of the provided window entity.\nContains the set of permitted types by their <code>TypeId</code>.\nContains the set of prohibited types by their <code>TypeId</code>.\nA reflection-powered serializable representation of an …\nA collection of serializable resources and dynamic …\nA <code>DynamicScene</code> builder, used to build a scene from a <code>World</code> …\nA component bundle for a <code>DynamicScene</code> root.\nAdding this component will spawn the scene as a child of …\nUnique id identifying a scene instance.\nInformation about a scene instance.\nAn IO Error\nScene contains a proxy without a represented type.\nScene with the given id does not exist.\nDynamic scene with the given id does not exist.\nA RON Error\nA composition of <code>World</code> objects.\nA component bundle for a <code>Scene</code> root.\nA filter used to control which types can be added to a …\n<code>InstanceId</code> of a spawned scene. It can be used with the …\nTriggered on a scene’s parent entity when …\nAsset loader for a Bevy dynamic scene (<code>.scn</code> / <code>.scn.ron</code>).\nPossible errors that can be produced by <code>SceneLoader</code>\nPlugin that provides scene functionality to an <code>App</code>.\nAdding this component will spawn the scene as a child of …\nErrors that can occur when spawning a scene.\nHandles spawning and despawning scenes in the world, …\nScene contains an unregistered type which has a <code>TypePath</code>.\nScene contains an unregistered component type.\nScene contains an unregistered resource type.\nScene contains an unregistered type.\nRepresents an unset filter.\nA vector of boxed components that belong to the given …\nEntities contained in the dynamic scene.\nThe identifier of the entity, unique within a scene (and …\nMapping of entities from the scene world to the instance …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nGlobal transform of the scene root entity.\nGlobal transform of the scene root entity.\nInherited visibility of the scene root entity.\nInherited visibility of the scene root entity.\nInstance which has been spawned.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcesses the asset in an asynchronous closure.\nThe scene prelude.\nResources stored in the dynamic scene.\nHandle to the scene to spawn.\nHandle to the scene to spawn.\nSystem that will spawn scenes from the <code>SceneRoot</code> and …\nSystem that handles scheduled scene instance spawning and …\n<code>serde</code> serialization and deserialization implementation for …\nSerialize a given Rust data structure into rust object …\nTransform of the scene root entity.\nTransform of the scene root entity.\nAlgorithmically-computed visibility of the scene root …\nAlgorithmically-computed visibility of the scene root …\nUser-driven visibility of the scene root entity.\nUser-driven visibility of the scene root entity.\nThe world of the scene, containing its entities and …\nId of the non-existent dynamic scene.\nId of the non-existent scene.\nThe type name for the unregistered type.\nType of the unregistered component.\nType of the unregistered resource.\nThe unregistered type.\nThe dynamic instance type.\nContains the set of permitted types by their <code>TypeId</code>.\nContains the set of prohibited types by their <code>TypeId</code>.\nA collection of serializable resources and dynamic …\nA <code>DynamicScene</code> builder, used to build a scene from a <code>World</code> …\nA component bundle for a <code>DynamicScene</code> root.\nAdding this component will spawn the scene as a child of …\nA composition of <code>World</code> objects.\nA component bundle for a <code>Scene</code> root.\nA filter used to control which types can be added to a …\nAdding this component will spawn the scene as a child of …\nHandles spawning and despawning scenes in the world, …\nRepresents an unset filter.\nEntities contained in the dynamic scene.\nGlobal transform of the scene root entity.\nGlobal transform of the scene root entity.\nInherited visibility of the scene root entity.\nInherited visibility of the scene root entity.\nResources stored in the dynamic scene.\nHandle to the scene to spawn.\nHandle to the scene to spawn.\nTransform of the scene root entity.\nTransform of the scene root entity.\nAlgorithmically-computed visibility of the scene root …\nAlgorithmically-computed visibility of the scene root …\nUser-driven visibility of the scene root entity.\nUser-driven visibility of the scene root entity.\nThe world of the scene, containing its entities and …\nName of the serialized component field in an entity struct.\nName of the serialized entity struct type.\nHandles serialization of multiple entities as a map of …\nHandles entity serialization as a map of component type to …\nName of the serialized entities field in a scene struct.\nName of the serialized resources field in a scene struct.\nName of the serialized scene struct type.\nHandles scene deserialization.\nHandles deserialization for a collection of entities.\nHandle deserialization of an entity and its components.\nHandles deserialization of a sequence of values with …\nHandles serializing a list of values with a unique type as …\nSerializer for a <code>DynamicScene</code>.\nThe entities to serialize.\nThe entity to serialize.\nId of the deserialized entity.\nList of boxed values of unique type to serialize.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new serializer from a <code>DynamicScene</code> and an …\nThe type registry containing the types present in the …\nType registry in which the component types used by the …\nType registry in which the component types used by the …\nType registry in which the types used in <code>entries</code> are …\nType registry in which the types of the values to …\nThe scene to serialize.\nType registry in which the components and resources types …\nType registry in which the component types used by the …\nType registry in which the component types used by the …\nBitmask reserving bits for the <code>AlphaMode2d</code> Values are just …\nSets how a 2d material’s base color alpha channel is …\nHow a sprite is positioned relative to its <code>Transform</code>. It …\nThe sprite will take on the size of the image by default, …\nThe base color alpha value defines the opacity of the …\nStruct defining a <code>Sprite</code> border with padding values\nA 2d material that renders 2d meshes with a texture tinted …\nThe GPU representation of the uniform data of a …\nA component bundle for entities with a <code>Mesh2d</code> and a …\nCustom anchor point. Top left is <code>(-0.5, 0.5)</code>, center is …\n<code>RenderCommand</code> for sprite rendering.\nHelper utility to update <code>TextureAtlasLayout</code> on the fly.\nContains the error value\nReduce transparency to fully opaque or fully transparent …\nMaterials are used alongside <code>Material2dPlugin</code>, <code>Mesh2d</code>, and …\nRender pipeline data for a given <code>Material2d</code>\nAdds the necessary ECS resources and render logic to …\nCommon <code>Material2d</code> properties, calculated for a specific …\nA component bundle for entities with a <code>Mesh2d</code> and a …\nA material used for rendering a <code>Mesh2d</code>.\nDisables wireframe rendering for any entity it is attached …\nContains the success value\nBase color alpha values are overridden to be fully opaque …\nData prepared for a <code>Material2d</code> instance.\nDefines how a texture slice scales when resized\nThe texture will be cut in 9 slices, keeping the texture …\nDescribes a sprite to be rendered to a 2D camera\nA <code>Bundle</code> of components for drawing a single sprite from an …\nControls how the image is altered when scaled.\nAdds support for 2D sprite rendering.\nA component that marks entities that aren’t themselves …\nSystem set for sprite rendering.\nThe slice will be stretched to fit the area\nAn index into a <code>TextureAtlasLayout</code>, which corresponds to a …\nA builder which is used to create a texture atlas from …\nStores a map used to lookup the position of a texture in a …\nStores a mapping from sub texture handles to the related …\nSingle texture slice, representing a texture rect to draw …\nSlices a texture using the <strong>9-slicing</strong> technique. This …\nThe slice will be tiled to fit the area\nThe texture will be repeated if stretched beyond …\nEnables wireframe rendering for any entity it is attached …\nSets the color of the <code>Wireframe2d</code> of the entity it is …\nA <code>Plugin</code> that draws wireframes for 2D meshes.\nA convenient alias for <code>Or&lt;With&lt;Sprite&gt;, With&lt;SpriteSource&gt;&gt;</code>…\nWhether to add the sprite picking backend to the app.\nAdd a new texture to <code>atlas_layout</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe <code>AlphaMode2d</code> of this material.\n<code>Anchor</code> point of the sprite in the world\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe sprite borders, defining the 9 sections of the image\nPixel padding to the bottom\nSystem calculating and inserting an <code>Aabb</code> component to …\nDefines how the center part of the 9 slices will scale\nThe sprite’s color tint\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nChange the on-screen size of the sprite\nAn optional custom size for the sprite that will be used …\nIf <code>Self::global</code> is set, any <code>Entity</code> that does not have a …\nAdd a bias to the view depth of the mesh which can be used …\nAdd a bias to the view depth of the mesh which can be used …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nslice draw size\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlip the sprite along the <code>X</code> axis\nFlip the sprite along the <code>Y</code> axis\nReturns this material’s fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nWhether to show wireframes for all 2D meshes. Can be …\nThe absolute transform of the sprite. This should …\nThe image used to render the sprite\nAsset ID of the <code>Image</code> of this sprite PERF: storing an …\nHow the sprite’s image will be scaled.\nTexture atlas section index\nInherited visibility of an entity.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nTexture atlas layout handle\nPixel padding to the left\nDefines the maximum scale of the 4 corner slices (default …\nThe bits in the <code>Mesh2dPipelineKey</code> for this material.\nCreate a new <code>DynamicTextureAtlasBuilder</code>\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\noffset of the slice\nFor cases where additional <code>ExtractedSprites</code> are created …\nThe sprite prelude.\nSelect an area of the texture\nAn optional rectangle representing the region of the sprite…\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nPixel padding to the right\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nDefines how the 4 side parts of the 9 slices will scale\nTotal size of texture atlas.\nCustomizes the default <code>RenderPipelineDescriptor</code>.\nSpecifies the rendering properties of the sprite, such as …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMarker component that indicates that its entity needs to …\nThe (optional) texture atlas used to render the sprite\nMaps from a specific image handle to the index in <code>textures</code> …\ntexture area to draw\nThe specific areas of the atlas where each texture can be …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPixel padding to the top\nThe local transform of the sprite, relative to its parent.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns this material’s vertex shader. If …\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nThe slice will repeat when the ratio between the <em>drawing </em>…\nThe texture will repeat when the ratio between the <em>drawing </em>…\nShould the image repeat horizontally\nShould the image repeat vertically\nThe sprite will take on the size of the image by default, …\nStruct defining a <code>Sprite</code> border with padding values\nA 2d material that renders 2d meshes with a texture tinted …\nA component bundle for entities with a <code>Mesh2d</code> and a …\nA material used for rendering a <code>Mesh2d</code>.\nDefines how a texture slice scales when resized\nThe texture will be cut in 9 slices, keeping the texture …\nDescribes a sprite to be rendered to a 2D camera\nA <code>Bundle</code> of components for drawing a single sprite from an …\nControls how the image is altered when scaled.\nThe slice will be stretched to fit the area\nAn index into a <code>TextureAtlasLayout</code>, which corresponds to a …\nA builder which is used to create a texture atlas from …\nStores a map used to lookup the position of a texture in a …\nStores a mapping from sub texture handles to the related …\nSingle texture slice, representing a texture rect to draw …\nSlices a texture using the <strong>9-slicing</strong> technique. This …\nThe slice will be tiled to fit the area\nThe texture will be repeated if stretched beyond …\n<code>Anchor</code> point of the sprite in the world\nThe sprite borders, defining the 9 sections of the image\nPixel padding to the bottom\nDefines how the center part of the 9 slices will scale\nThe sprite’s color tint\nAn optional custom size for the sprite that will be used …\nslice draw size\nFlip the sprite along the <code>X</code> axis\nFlip the sprite along the <code>Y</code> axis\nThe absolute transform of the sprite. This should …\nThe image used to render the sprite\nHow the sprite’s image will be scaled.\nTexture atlas section index\nInherited visibility of an entity.\nTexture atlas layout handle\nPixel padding to the left\nDefines the maximum scale of the 4 corner slices (default …\noffset of the slice\nAn optional rectangle representing the region of the sprite…\nPixel padding to the right\nDefines how the 4 side parts of the 9 slices will scale\nTotal size of texture atlas.\nSpecifies the rendering properties of the sprite, such as …\nMarker component that indicates that its entity needs to …\nThe (optional) texture atlas used to render the sprite\nMaps from a specific image handle to the index in <code>textures</code> …\ntexture area to draw\nThe specific areas of the atlas where each texture can be …\nPixel padding to the top\nThe local transform of the sprite, relative to its parent.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nThe slice will repeat when the ratio between the <em>drawing </em>…\nThe texture will repeat when the ratio between the <em>drawing </em>…\nShould the image repeat horizontally\nShould the image repeat vertically\nProvides <code>App</code> and <code>SubApp</code> with state installation methods\nProvides extension methods for <code>Commands</code>.\nProvides definitions for the runtime conditions that …\nThe state prelude.\nProvides definitions for the basic traits required by the …\nProvides definitions for the basic traits required by the …\nProvides <code>StateScoped</code> and <code>clear_state_scoped_entities</code> for …\nProvides <code>App</code> and <code>SubApp</code> with methods for registering …\nState installation methods for <code>App</code> and <code>SubApp</code>.\nRegisters the <code>StateTransition</code> schedule in the …\nSets up a type implementing <code>ComputedStates</code>.\nSets up a type implementing <code>SubStates</code>.\nEnable state-scoped entity clearing for state <code>S</code>.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nInitializes a <code>State</code> with standard starting values.\nInserts a specific <code>State</code> to the current <code>App</code> and overrides …\nCalls <code>U::from(self)</code>.\nRegisters the state type <code>T</code> using <code>App::register_type</code>, and …\nRegisters the state type <code>T</code> using <code>App::register_type</code>, and …\nExtension trait for <code>Commands</code> adding <code>bevy_state</code> helpers.\nSets the next state the app should move to.\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nState installation methods for <code>App</code> and <code>SubApp</code>.\nExtension trait for <code>Commands</code> adding <code>bevy_state</code> helpers.\nA state whose value is automatically computed based on the …\nSystem set that runs enter schedule(s) for state <code>S</code>.\nSystem set that runs exit schedule(s) for state <code>S</code>.\nThe next state of <code>State&lt;S&gt;</code>.\nThe label of a <code>Schedule</code> that <strong>only</strong> runs whenever <code>State&lt;S&gt;</code> …\nThe label of a <code>Schedule</code> that <strong>only</strong> runs whenever <code>State&lt;S&gt;</code> …\nThe label of a <code>Schedule</code> that <strong>only</strong> runs whenever <code>State&lt;S&gt;</code> …\nThere is a pending transition for state <code>S</code>\nA struct used to operate on the reflected …\nA struct used to operate on the reflected <code>States</code> trait of …\nThe total <code>DEPENDENCY_DEPTH</code> of all the states that are part …\nThe set of states from which the <code>Self</code> is derived.\nThe set of states from which the <code>Self</code> is derived.\nA finite-state machine whose transitions have associated …\nEntities marked with this component will be removed when …\nExtension trait for <code>App</code> adding methods for registering …\nA <code>States</code> type or tuple of types which implement <code>States</code>.\nRuns state transitions.\nEvent sent when any state transition of <code>S</code> happens. This …\nTypes that can define world-wide states in a finite-state …\nA sub-state is a state that exists only when the source …\nSystem set that runs transition schedule(s) for state <code>S</code>.\nNo state transition is pending\nSets up a type implementing <code>ComputedStates</code>.\nAdds an <code>Event</code> that is automatically cleaned up when …\nSets up a type implementing <code>SubStates</code>.\nComputes the next value of <code>State&lt;Self&gt;</code>. This function gets …\nEnable state-scoped entity clearing for state <code>S</code>.\nThe state being entered.\nThe state being entered.\nThe state being exited.\nThe state being exited.\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nInitializes a <code>State</code> with standard starting values.\nInserts a specific <code>State</code> to the current <code>App</code> and overrides …\nReturns the latest state transition event of type <code>S</code>, if …\nSets up the systems needed to compute <code>T</code> whenever any <code>State</code> …\nSets up the systems needed to compute whether <code>T</code> exists …\nRegisters the state type <code>T</code> using <code>App::register_type</code>, and …\nRegisters the state type <code>T</code> using <code>App::register_type</code>, and …\nSets the next state the app should move to.\nThis function gets called whenever one of the <code>SourceStates</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA struct used to operate on the reflected …\nThe raw function pointers needed to make up a …\nA struct used to operate on the reflected <code>States</code> trait of …\nThe raw function pointers needed to make up a <code>ReflectState</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the default set of <code>ReflectStateFns</code> for a specific …\nGet the default set of <code>ReflectFreelyMutableStateFns</code> for a …\nFunction pointer implementing <code>ReflectState::reflect()</code>.\nFunction pointer implementing …\nA state whose value is automatically computed based on the …\nStates apply their transitions from <code>NextState</code> and compute …\nSystem set that runs enter schedule(s) for state <code>S</code>.\nEnter schedules are executed in root to leaf order.\nSystem set that runs exit schedule(s) for state <code>S</code>.\nExit schedules are executed in leaf to root order\nThis trait allows a state to be mutated directly using the …\nThe next state of <code>State&lt;S&gt;</code>.\nThe label of a <code>Schedule</code> that <strong>only</strong> runs whenever <code>State&lt;S&gt;</code> …\nThe label of a <code>Schedule</code> that <strong>only</strong> runs whenever <code>State&lt;S&gt;</code> …\nThe label of a <code>Schedule</code> that <strong>only</strong> runs whenever <code>State&lt;S&gt;</code> …\nThere is a pending transition for state <code>S</code>\nThe total <code>DEPENDENCY_DEPTH</code> of all the states that are part …\nThe set of states from which the <code>Self</code> is derived.\nThe set of states from which the <code>Self</code> is derived.\nA finite-state machine whose transitions have associated …\nA <code>States</code> type or tuple of types which implement <code>States</code>.\nRuns state transitions.\nEvent sent when any state transition of <code>S</code> happens. This …\nApplies state transitions and runs transitions schedules …\nTypes that can define world-wide states in a finite-state …\nA sub-state is a state that exists only when the source …\nSystem set that runs transition schedule(s) for state <code>S</code>.\nTransition schedules are executed in arbitrary order.\nNo state transition is pending\nComputes the next value of <code>State&lt;Self&gt;</code>. This function gets …\nThe state being entered.\nThe state being entered.\nThe state being exited.\nThe state being exited.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the latest state transition event of type <code>S</code>, if …\nSets up the systems needed to compute <code>T</code> whenever any <code>State</code> …\nThis function registers all the necessary systems to apply …\nSets up the systems needed to compute whether <code>T</code> exists …\nSets up the schedules and systems for handling state …\nThis function gets called whenever one of the <code>SourceStates</code> …\nEntities marked with this component will be removed when …\nRemoves entities marked with <code>StateScoped&lt;S&gt;</code> when their …\nExtension trait for <code>App</code> adding methods for registering …\nAdds an <code>Event</code> that is automatically cleaned up when …\nA newtype for a task pool for CPU-intensive work that may …\nA newtype for a task pool for CPU-intensive work that must …\nA newtype for a task pool for IO-intensive work (i.e. …\n<code>ParallelIterator</code> closely emulates the <code>std::iter::Iterator</code> …\nProvides functions for mapping read-only slices across a …\nProvides functions for mapping mutable slices across a …\nA <code>TaskPool</code> scope for running one or more non-<code>&#39;static</code> …\nWraps <code>async_executor::Task</code>, a spawned future.\nA thread pool for executing tasks.\nUsed to create a <code>TaskPool</code>\nAn executor that can only be ticked on the thread it was …\nUsed to tick the <code>ThreadExecutor</code>. The executor does not …\nTests if every element of the parallel iterator matches a …\nTests if any element of the parallel iterator matches a …\nGets the logical CPU core count available to the current …\nBlocks the current thread on a future.\nCreates a new <code>TaskPool</code> based on the current options.\nBorrows a parallel iterator, rather than consuming it.\nCancels the task and waits for it to stop running.\nTakes two parallel iterators and returns a parallel …\nCreates a parallel iterator which clones all of its items.\nTransforms a parallel iterator into a collection.\nCreates a parallel iterator which copies all of its items.\nConsumes the parallel iterator and returns the number of …\nRepeats a parallel iterator endlessly.\nDetaches the task to let it keep running in the …\nCreates a parallel iterator which uses a closure to …\nCreates a parallel iterator that both filters and maps.\nCreates a parallel iterator that works like map, but …\nCreates a parallel iterator that flattens nested structure.\nRepeatedly applies a function to items of each batch of a …\nCalls a closure on each item of a parallel iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates a parallel iterator which ends after the first …\nGets the global <code>ComputeTaskPool</code> instance.\nGets the global <code>AsyncComputeTaskPool</code> instance.\nGets the global <code>IoTaskPool</code> instance.\nGets the global <code>ComputeTaskPool</code> instance, or initializes …\nGets the global <code>AsyncComputeTaskPool</code> instance, or …\nGets the global <code>IoTaskPool</code> instance, or initializes it …\nEach thread should only create one <code>ThreadExecutor</code>, …\nDoes something with each item of a parallel iterator, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the current task is finished.\nReturns true if <code>self</code> and <code>other</code>’s executor is same\nConsumes the parallel iterator and returns the last item.\nTakes a closure and creates a parallel iterator which …\nReturns the maximum item of a parallel iterator.\nReturns the item that gives the maximum value with respect …\nReturns the item that gives the maximum value from the …\nReturns the minimum item of a parallel iterator.\nReturns the item that gives the minimum value with respect …\nReturns the item that gives the minimum value from the …\nCreates a new task from a given <code>async_executor::Task</code>\nCreates a new <code>TaskPoolBuilder</code> instance\nCreate a <code>TaskPool</code> with the default configuration.\ncreate a new <code>ThreadExecutor</code>\nReturns the next batch of items for processing.\nConsumes the parallel iterator and returns the nth item.\nOverride the number of threads created for the pool. If …\nSets a callback that is invoked once for every created …\nSets a callback that is invoked once for every created …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nConsumes a parallel iterator, creating two collections …\nPolls a future just once and returns an <code>Option</code> with the …\nSearches for an element in a parallel iterator, returning …\nThe tasks prelude.\nMultiplies all the items of a parallel iterator.\nAllows spawning non-<code>&#39;static</code> futures on the thread pool. …\nThis allows passing an external executor to spawn tasks …\nReturns the bounds on the remaining number of items in the …\nSpawns a static future onto the thread pool. The returned …\nSpawns a scoped future onto the thread pool. The scope <em>must</em>…\nSpawn a task on the thread executor\nSpawns a static future on the thread-local async executor …\nSpawns a scoped future onto the thread of the external …\nSpawns a scoped future onto the thread the scope is run …\nOverride the stack size of the threads created for the pool\nSums the items of a parallel iterator.\nOverride the name of the threads created for the pool. If …\nReturn the number of threads owned by the task pool\nTick the thread executor.\nA function used by <code>bevy_core</code> to tick the global tasks …\nGets the <code>ThreadExecutorTicker</code> for this executor. Use this …\nAttempts to get the global <code>ComputeTaskPool</code> instance, or …\nAttempts to get the global <code>AsyncComputeTaskPool</code> instance, …\nAttempts to get the global <code>IoTaskPool</code> instance, or returns …\nSynchronously try to tick a task on the executor. Returns …\nRuns a function with the local executor. Typically used to …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nClones all items.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCombinators for the <code>Future</code> trait.\nCalls a closure on each item and passes it on.\nTools and combinators for I/O.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nMaps items while <code>predicate</code> returns <code>Some</code>.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nPins a variable of type <code>T</code> on the stack and rebinds it as …\nAttempts to resolve the future to a final value, …\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nTraits <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, <code>AsyncWrite</code>, <code>AsyncBufRead</code>,\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads all bytes and appends them into <code>buf</code> until the …\nUnwraps <code>Poll&lt;T&gt;</code> or returns <code>Pending</code>.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nCombinators for the <code>Stream</code> trait.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + &#39;static&gt;&gt;</code>.\nFuture for the <code>FutureExt::catch_unwind()</code> method.\n<code>Future</code> for the <code>fuse</code> method.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nFuture for the <code>or()</code> function and the <code>FutureExt::or()</code> …\nThe type of value produced on completion.\nCreates a future which never resolves, representing a …\nFuture for the <code>poll_fn()</code> function.\nFuture for the <code>poll_once()</code> function.\nFuture for the <code>race()</code> function and the <code>FutureExt::race()</code> …\nA future that is immediately ready with a value.\nFuture for the <code>try_zip()</code> function.\nFuture for the <code>yield_now()</code> function.\nFuture for the <code>zip()</code> function.\nBlocks the current thread on a future.\nBoxes the future and changes its type to …\nBoxes the future and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nCatches panics while polling the future.\nCatches panics while polling the future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a future such that <code>poll</code> will never again be called …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Ready</code>, returning the wrapped value.\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nCreates a future from a function returning <code>Poll</code>.\nPolls a future just once and returns an <code>Option</code> with the …\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nRace two futures but with a predefined random seed.\nCreates a future that is immediately ready with a value.\nJoins two fallible futures, waiting for both to complete …\nWakes the current task and returns <code>Poll::Pending</code> once.\nJoins two futures, waiting for both to complete.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nAsserts that a type implementing <code>std::io</code> traits can be …\nA wrapper around a type that implements <code>AsyncRead</code> or …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nBlocks on all async I/O operations and implements <code>std::io</code> …\nType alias for <code>Pin&lt;Box&lt;dyn AsyncRead + Send + &#39;static&gt;&gt;</code>.\nType alias for <code>Pin&lt;Box&lt;dyn AsyncWrite + Send + &#39;static&gt;&gt;</code>.\nThe operation failed because a pipe was closed.\nAdds buffering to a reader.\nAdds buffering to a writer.\nReader for the <code>AsyncReadExt::bytes()</code> method.\nReader for the <code>AsyncReadExt::chain()</code> method.\nFuture for the <code>AsyncWriteExt::close()</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nGives an in-memory buffer a cursor for reading and writing.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFuture for the <code>AsyncBufReadExt::fill_buf()</code> method.\nFuture for the <code>AsyncWriteExt::flush()</code> method.\nThe remote host is not reachable.\nThe operation was partially successful and needs to be …\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nStream for the <code>AsyncBufReadExt::lines()</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFilesystem quota or some other kind of quota was exceeded.\nFuture for the <code>AsyncReadExt::read_exact()</code> method.\nFuture for the <code>AsyncReadExt::read()</code> method.\nThe read half returned by <code>split()</code>.\nFuture for the <code>AsyncBufReadExt::read_line()</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>AsyncReadExt::read_to_end()</code> method.\nFuture for the <code>AsyncReadExt::read_to_string()</code> method.\nFuture for the <code>AsyncBufReadExt::read_until()</code> method.\nFuture for the <code>AsyncReadExt::read_vectored()</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nFuture for the <code>AsyncSeekExt::seek()</code> method.\nWriter for the <code>sink()</code> function.\nStream for the <code>AsyncBufReadExt::split()</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>AsyncReadExt::take()</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>AsyncWriteExt::write_all()</code> method.\nFuture for the <code>AsyncWriteExt::write()</code> method.\nThe write half returned by <code>split()</code>.\nFuture for the <code>AsyncWriteExt::write_vectored()</code> method.\nAn error returned when an operation could not be completed …\nReturns a reference to the internal buffer.\nReturns a reference to the internal buffer.\nAttempt to shutdown the I/O handle.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nThe context we are using to poll the future.\nCopies the entire contents of a reader into a writer.\nAttempts to downcast the custom boxed error to <code>E</code>.\nCreates an empty reader.\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nConvert a <code>serde_json::Error</code> into an <code>io::Error</code>.\nReturns the argument unchanged.\nConverts <code>TryReserveError</code> to an error with …\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nConverts Calloop’s error type into a <code>std::io::Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nCreates <code>Self</code> using <code>default()</code>.\nReturns a mutable reference to the inner error wrapped by …\nGets a mutable reference to the inner I/O handle.\nGets a mutable reference to the async I/O handle.\nGets a mutable reference to the underlying reader.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying buffer.\nGets a mutable reference to the underlying reader.\nGets mutable references to the underlying readers.\nReturns a reference to the inner error wrapped by this …\nGets a reference to the inner I/O handle.\nGets a reference to the async I/O handle.\nGets a reference to the underlying reader.\nGets a reference to the underlying writer.\nGets a reference to the underlying buffer.\nGets a reference to the underlying reader.\nGets references to the underlying readers.\nThe actual reader/writer we are wrapping.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nExtracts the inner I/O handle.\nExtracts the inner async I/O handle.\nUnwraps the buffered reader, returning the underlying …\nUnwraps the buffered writer, returning the underlying …\nUnwraps the cursor, returning the underlying buffer.\nUnwraps the adapter, returning the underlying reader.\nUnwraps the adapter, returning the underlying readers.\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the number of bytes before this adapter will …\nCreates a new I/O error from a known kind of error as well …\nWraps an I/O handle implementing <code>std::io</code> traits.\nWraps an I/O handle implementing <code>AsyncRead</code> or <code>AsyncWrite</code> …\nWraps an async I/O handle into a blocking interface.\nCreates a buffered reader with the default buffer capacity.\nCreates a buffered writer with the default buffer capacity.\nCreates a cursor for an in-memory buffer.\nCreates a new I/O error from an arbitrary error payload.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to seek to an offset, in bytes, in a stream.\nSeeks to an offset, in bytes, in the underlying reader.\nSeek to the offset, in bytes, in the underlying writer.\nPoll this <code>AsyncAsSync</code> for some function.\nAttempt to write bytes from <code>buf</code> into the object.\nReturns the current position of this cursor.\nReturns the OS error that this error represents (if any).\nCreates an infinite reader that reads the same byte …\nPuts a limit on the number of bytes.\nSets the position of this cursor.\nCreates a writer that consumes and drops all data.\nSplits a stream into <code>AsyncRead</code> and <code>AsyncWrite</code> halves.\nCreates a buffered reader with the specified capacity.\nCreates a buffered writer with the specified buffer …\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nExtension trait for <code>AsyncSeek</code>.\nExtension trait for <code>Future</code>.\nExtension trait for <code>Stream</code>.\nExtension trait for <code>AsyncRead</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the stream and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nAppends another stream to the end of this one.\nAppends another stream to the end of this one.\nClones all items.\nClones all items.\nCollects all items in the stream into a collection.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCopies all items.\nCounts the number of items in the stream.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nRepeats the stream from beginning to end, forever.\nYields all immediately available values from a stream.\nYields all immediately available values from a stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nCalls a closure on each item and passes it on.\nReturns the last item in the stream.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nMaps items of the stream to new values using a closure.\nMaps items while <code>predicate</code> returns <code>Some</code>.\nMaps items while <code>predicate</code> returns <code>Some</code>.\nRetrieves the next item in the stream.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nGets the <code>n</code>th item of the stream.\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nAttempts to resolve the future to a final value, …\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nFinds the index of the first item of the stream for which …\nMerges with <code>other</code> stream, with no preference for either …\nMerges with <code>other</code> stream, with no preference for either …\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads all bytes and appends them into <code>buf</code> until the …\nReads all bytes and appends them into <code>buf</code> until the …\nMaps items of the stream to new values using a state value …\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.\nZips up two streams into a single stream of pairs.\nFuture for the <code>StreamExt::all()</code> method.\nFuture for the <code>StreamExt::any()</code> method.\nIterator for the <code>block_on()</code> function.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Stream&lt;Item = T&gt; + &#39;static&gt;&gt;</code>.\nStream for the <code>StreamExt::chain()</code> method.\nStream for the <code>StreamExt::cloned()</code> method.\nFuture for the <code>StreamExt::collect()</code> method.\nStream for the <code>StreamExt::copied()</code> method.\nFuture for the <code>StreamExt::count()</code> method.\nStream for the <code>StreamExt::cycle()</code> method.\nStream for the <code>StreamExt::drain()</code> method.\nStream for the <code>empty()</code> function.\nStream for the <code>StreamExt::enumerate()</code> method.\nStream for the <code>StreamExt::filter()</code> method.\nStream for the <code>StreamExt::filter_map()</code> method.\nFuture for the <code>StreamExt::find()</code> method.\nFuture for the <code>StreamExt::find_map()</code> method.\nStream for the <code>StreamExt::flat_map()</code> method.\nStream for the <code>StreamExt::flatten()</code> method.\nFuture for the <code>StreamExt::fold()</code> method.\nFuture for the <code>StreamExt::for_each()</code> method.\nStream for the <code>StreamExt::fuse()</code> method.\nStream for the <code>StreamExt::inspect()</code> method.\nValues yielded by the stream.\nStream for the <code>iter()</code> function.\nFuture for the <code>StreamExt::last()</code> method.\nStream for the <code>StreamExt::map()</code> method.\nStream for the <code>StreamExt::map_while()</code> method.\nFuture for the <code>StreamExt::next()</code> method.\nFuture for the <code>StreamExt::nth()</code> method.\nStream for the <code>once()</code> function.\nStream for the <code>once_future()</code> method.\nStream for the <code>or()</code> function and the <code>StreamExt::or()</code> …\nFuture for the <code>StreamExt::partition()</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn()</code> function.\nFuture for the <code>StreamExt::position()</code> method.\nStream for the <code>race()</code> function and the <code>StreamExt::race()</code> …\nStream for the <code>repeat()</code> function.\nStream for the <code>repeat_with()</code> function.\nStream for the <code>StreamExt::scan()</code> method.\nStream for the <code>StreamExt::skip()</code> method.\nStream for the <code>StreamExt::skip_while()</code> method.\nStream for the <code>StreamExt::step_by()</code> method.\nStream for the [<code>StreamExt::stop_after_future()</code>] method.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nStream for the <code>StreamExt::take()</code> method.\nStream for the <code>StreamExt::take_while()</code> method.\nStream for the <code>StreamExt::then()</code> method.\nFuture for the <code>StreamExt::try_collect()</code> method.\nFuture for the <code>StreamExt::try_fold()</code> method.\nFuture for the <code>StreamExt::try_for_each()</code> method.\nFuture for the <code>StreamExt::try_next()</code> method.\nStream for the <code>try_unfold()</code> function.\nStream for the <code>unfold()</code> function.\nFuture for the <code>StreamExt::unzip()</code> method.\nStream for the <code>StreamExt::zip()</code> method.\nConverts a stream into a blocking iterator.\nCreates an empty stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the underlying stream.\nGet a reference to the underlying stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this stream and get the underlying stream.\nWhether the stream was stopped yet by the stopping future …\nCreates a stream from an iterator.\nCreates a stream that yields a single item.\nCreates a stream that invokes the given future as its …\nMerges two streams, preferring items from <code>stream1</code> whenever …\nCreates a stream that is always pending.\nCreates a stream from a function returning <code>Poll</code>.\nAttempt to pull out the next value of this stream, …\nMerges two streams, with no preference for either stream …\nRaces two streams, but with a user-provided seed for …\nCreates an infinite stream that yields the same item …\nCreates an infinite stream from a closure that generates …\nTake elements from this stream until the provided future …\nExtract the stopping future out of the combinator.\nOnce the stopping future is resolved, this method can be …\nCreates a stream from a seed value and a fallible async …\nCreates a stream from a seed value and an async closure …\nA newtype for a task pool for CPU-intensive work that may …\nA newtype for a task pool for CPU-intensive work that must …\nA newtype for a task pool for IO-intensive work (i.e. …\n<code>ParallelIterator</code> closely emulates the <code>std::iter::Iterator</code> …\nProvides functions for mapping read-only slices across a …\nProvides functions for mapping mutable slices across a …\nTests if every element of the parallel iterator matches a …\nTests if any element of the parallel iterator matches a …\nBlocks the current thread on a future.\nBorrows a parallel iterator, rather than consuming it.\nTakes two parallel iterators and returns a parallel …\nCreates a parallel iterator which clones all of its items.\nTransforms a parallel iterator into a collection.\nCreates a parallel iterator which copies all of its items.\nConsumes the parallel iterator and returns the number of …\nRepeats a parallel iterator endlessly.\nCreates a parallel iterator which uses a closure to …\nCreates a parallel iterator that both filters and maps.\nCreates a parallel iterator that works like map, but …\nCreates a parallel iterator that flattens nested structure.\nRepeatedly applies a function to items of each batch of a …\nCalls a closure on each item of a parallel iterator.\nCreates a parallel iterator which ends after the first …\nDoes something with each item of a parallel iterator, …\nConsumes the parallel iterator and returns the last item.\nTakes a closure and creates a parallel iterator which …\nReturns the maximum item of a parallel iterator.\nReturns the item that gives the maximum value with respect …\nReturns the item that gives the maximum value from the …\nReturns the minimum item of a parallel iterator.\nReturns the item that gives the minimum value with respect …\nReturns the item that gives the minimum value from the …\nReturns the next batch of items for processing.\nConsumes the parallel iterator and returns the nth item.\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice in chunks of size <code>chunks_size</code> or less and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nSplits the slice into a maximum of <code>max_tasks</code> chunks, and …\nConsumes a parallel iterator, creating two collections …\nSearches for an element in a parallel iterator, returning …\nMultiplies all the items of a parallel iterator.\nReturns the bounds on the remaining number of items in the …\nSums the items of a parallel iterator.\nThe default grayscale antialiasing. Produces text that …\nLines will be broken without discrimination on any …\nBlack weight (900), the thickest value.\nBold weight (700).\nBottom to top Y-axis orientation, for 2d world space\nLeftmost &amp; rightmost characters are equidistant to the …\nComputed information for a text block.\nThe contents that could not be parsed\nWrapper for <code>cosmic_text::Buffer</code>\nA wrapper resource around a <code>cosmic_text::FontSystem</code>\nThe raw data for the default font used by <code>bevy_text</code>\nExtra-bold weight (800).\nExtra light weight (200).\nFailed to add glyph to a newly created atlas for some …\nFailed to get scaled glyph image for cache key\nAn <code>Asset</code> that contains the data for a loaded font, if …\nRasterized glyphs are cached, stored in, and retrieved …\nIdentifies a font size and smoothing method in a …\nA map of font sizes to their corresponding <code>FontAtlas</code>es, …\nA map of font faces to their corresponding <code>FontAtlasSet</code>s.\nAn owned version of <code>Family</code>\nAn <code>AssetLoader</code> for <code>Font</code>s, for use by the <code>AssetServer</code>\nPossible errors that can be produced by <code>FontLoader</code>\nDetermines which antialiasing method to use when rendering …\nA face width.\nAllows italic or oblique faces to be selected.\nSpecifies the weight of glyphs in the font, their degree …\nInformation about a glyph in an atlas.\nThe location of a glyph in an atlas, and how it should be …\nAn IO Error\nA form that is generally cursive in nature.\nWords are spaced so that leftmost &amp; rightmost characters …\nDescribes the horizontal alignment of multiple lines of …\nLight weight (300).\nLeftmost character is immediately to the right of the …\nDetermines how lines will be broken when preventing text …\nMedium weight (500, higher than normal).\nNormal (400).\nFont was not found, this could be that the font has not …\nNo soft wrapping, where text is automatically broken up …\nNo antialiasing. Useful for when you want to render text …\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA glyph of a font, typically representing a single …\nRightmost character is immediately to the left of the …\nSemibold weight (600).\nA wrapper resource around a <code>cosmic_text::SwashCache</code>\nThin weight (100), the thinnest value.\nThe top-level 2D text component.\n<code>Text2dBundle</code> was removed in favor of required components. …\n2d alias for <code>TextReader</code>.\n2d alias for <code>TextWriter</code>.\nThe maximum width and height of text. The text will wrap …\nThe color of the text for this section.\nA sub-entity of a <code>ComputedTextBlock</code>.\nErrors related to the textsystem\n<code>TextFont</code> determines the style of a text span within a …\nComponent with text format settings for a block of text.\nRender information for a corresponding text block.\nSize information for a corresponding <code>ComputedTextBlock</code> …\nThe <code>TextPipeline</code> is used to layout and render text blocks …\nAdds text rendering support to an app.\nSystem parameter for reading text spans in a text block.\nHelper trait for the root text component in a text block.\nA span of UI text in a tree of spans under an entity with …\nHelper trait for using the <code>TextReader</code> and <code>TextWriter</code> …\nHelper trait for the text span components in a text block.\nIterator returned by <code>TextReader::iter</code>.\nSystem parameter for reading and writing text spans in a …\nTop to bottom Y-axis orientation, for UI\nUnbounded text will not be truncated or wrapped.\nSystem set in <code>PostUpdate</code> where all 2d text update systems …\nUses the Unicode Line Breaking Algorithm. Lines will be …\nWraps at the word level, or fallback to character level if …\nText is rendered for two different view projections; …\nAdd a glyph to the atlas, updating both its texture and …\nAdds the given subpixel-offset glyph to the <code>FontAtlas</code>es in …\nInformation about the glyph’s atlas.\nSystem calculating and inserting an <code>Aabb</code> component to …\nGets the <code>TextColor</code> of a text span within a text block at a …\nGets the <code>TextColor</code> of a text span within a text block at a …\nComputes the size of the text area within the provided …\nQueues text for measurement\nContent of a font file as bytes\nRecords the hierarchy depth of the entity within a …\nSystem that detects changes to text blocks and sets …\nUsed to update the <code>TextureAtlasLayout</code>.\nAccesses entities in this block.\nThe entity that is measured.\nThe entity.\nThis system extracts the sprites from the 2D text …\nGets the <code>TextFont</code> of a text span within a text block at a …\nGets the <code>TextFont</code> of a text span within a text block at a …\nThe specific font face to use, as a <code>Handle</code> to a <code>Font</code> asset.\nThe vertical height of rasterized glyphs in the font atlas …\nThe antialiasing method to use when rendering text.\nInvokes a callback on each span in a text block, starting …\nInvokes a callback on each span’s <code>TextColor</code> in a text …\nInvokes a callback on each span’s <code>TextFont</code> in a text …\nInvokes a callback on each span’s string value in a text …\nInvokes a callback on each span in a text block, starting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGet a reference to the <code>FontAtlasSet</code> with the given font …\nGets a text span within a text block at a specific index …\nGets a mutable reference to a text span within a text …\nGets the <code>TextColor</code> of a text span within a text block at a …\nGets the <code>TextColor</code> of a text span within a text block at a …\nGets the <code>TextFont</code> of a text span within a text block at a …\nGets the <code>TextFont</code> of a text span within a text block at a …\nReturns the <code>cosmic_text::fontdb::ID</code> for a given <code>Font</code> asset.\nGenerates the <code>GlyphAtlasInfo</code> for the given subpixel-offset …\nGet the <code>GlyphAtlasLocation</code> for a subpixel-offset glyph.\nGet a mutable reference to the <code>FontAtlasSet</code> with the given …\nGet the texture of the glyph as a rendered image, and its …\nGets the text value of a text span within a text block at …\nGets the text value of a text span within a text block at …\nThe index of the glyph in the atlas\nA mapping between subpixel-offset glyphs and their …\nScaled and positioned glyphs in screenspace\nChecks if the given subpixel-offset glyph is contained in …\nChecks if the given subpixel-offset glyph is contained in …\nThe maximum height of text in logical pixels. If <code>None</code>, the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of font atlases in this set\nReturns an iterator over the <code>FontAtlas</code>es in this set\nReturns an iterator over text spans in a text block, …\nThe text’s internal alignment. Should not affect its …\nReturns the number of font atlases in this set\nHow the text should linebreak when running out of the …\nProcesses the asset in an asynchronous closure.\nLocation and offset of a glyph within the texture atlas.\nMaximum size for a text area in pixels, to be used when …\nMinimum size for a text area in pixels, to be used when …\nIndicates if the text needs to be refreshed in …\nCreate a new <code>FontAtlas</code> with the given size, adding it to …\nCreates a new <code>TextBounds</code>, bounded with the specified width …\nCreates a new <code>PositionedGlyph</code>\nCreates a new <code>TextBounds</code>, bounded with the specified width …\nCreates a new <code>TextBounds</code>, bounded with the specified …\nThe required offset (relative positioning) when placed\nThe position of the glyph in the text block’s bounding …\nThe text prelude.\nQueues text for rendering\nGets the text span’s string.\nA system that cleans up <code>FontAtlasSet</code>s for removed <code>Font</code>s\nScales <code>value</code> by <code>factor</code>.\nThe width and height of the glyph in logical pixels.\nThe glyphs resulting size\nThe index of the glyph in the <code>ComputedTextBlock</code>’s …\nGets the text value of a text span within a text block at …\nGets the text value of a text span within a text block at …\nThe texture where this font atlas is located\nA handle to the <code>Image</code> data for the texture atlas this …\nThe handle to the <code>TextureAtlasLayout</code> that holds the …\nA handle to the <code>TextureAtlasLayout</code> map for the texture …\nReturns a numeric representation of a width.\nUtilizes <code>cosmic_text::Buffer</code> to shape and layout text\nUpdates the layout and size information whenever the text …\nThe maximum width of text in logical pixels. If <code>None</code>, the …\nGets mutable reference to the text span’s string.\nAn action to perform on an <code>Editor</code>\nAdvanced text shaping and font fallback.\nWhether to associate cursors placed at a boundary between …\nAlign or justify\nRepresents an angle in degrees or radians.\nText attributes\nList of text attributes to apply to a line\nAn owned version of <code>Attrs</code>\nDelete text behind cursor\nBasic shaping with no font fallback.\nAn iterator over the paragraphs in the input text. It is …\nA value borrowed together with an <code>FontSystem</code>\nA buffer of text that is shaped and laid out\nMove cursor to the end of the document\nA line (or paragraph) of text that is shaped and laid out\nMove cursor to the start of the document\nKey for building a glyph cache\nFlags that change rendering\nMetrics, but implementing Eq and Hash using u32 …\nA set of change items grouped into one logical change\nA unique change to an editor\nMouse click at specified position\nCloses a subpath, connecting the final point to the …\nText color\n32-bit RGBA bitmap.\nPath command.\nUse <code>\\r</code> for line ending (many legacy systems)\nUse <code>\\r\\n</code> for line ending (Windows-style)\nGlyphs in cursive fonts generally use a more informal …\nCurrent cursor location\nA cubic bezier curve from the previous point to the final …\nDelete text in front of cursor\nMouse double click at specified position\nMove cursor down\nMouse drag to specified position\nA trait to allow easy replacements of <code>Editor</code>, like …\nA wrapper of [<code>Buffer</code>] for easy editing\nMove cursor to end of line\nCreate new line\nEscape, clears selection\nSkew by 14 degrees to synthesize italic\nA font family.\nAn owned version of <code>Family</code>\nFantasy fonts are primarily decorative or expressive fonts …\nA font\nFont-specific part of <code>Attrs</code> to be used for matching\nAccess to the system fonts.\nWraps at a glyph level\nMove cursor to specific line\nMove cursor to start of line\nIdentity matrix.\nInsert character at cursor\nA form that is generally cursive in nature.\nThe position of a cursor within a [<code>Buffer</code>].\nApply specific <code>LayoutCursor</code>\nA laid out glyph\nA line of laid out glyphs\nA line of visible text for rendering\nAn iterator of visible text lines, see <code>LayoutRun</code>\nMove cursor left\nMove cursor to next word boundary to the left\nUse <code>\\n</code> for line ending (POSIX-style)\nUse <code>\\n\\r</code> for line ending (some legacy systems)\nSelect by lines\nLine ending\nIterator over lines terminated by <code>LineEnding</code>\nA straight line from the previous point to the specified …\n8-bit alpha mask.\nMetrics of text\nThe sole criterion of a monospace font is that all glyphs …\nA motion to perform on a <code>Cursor</code>\nMove the cursor with some motion\nBegins a new subpath at the specified point.\nThe name of a font family of choice.\nMove cursor to next character (Self::Right in LTR, …\nMove cursor to next word boundary\nNo selection\nNo wrapping\nNo line ending\nA face that is neither italic not obliqued.\nNormal selection\nA typically-sloped version of the regular face.\nMove cursor down one page\nMove cursor up one page\nMove cursor to end of paragraph\nMove cursor to start of paragraph\nDescribes the offset and dimensions of a rendered mask.\nMove cursor to previous character (Self::Left in LTR, …\nMove cursor to previous word boundary\nA quadratic curve from the previous point to the final …\nMove cursor right\nMove cursor to next word boundary to the right\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nScroll position in [<code>Buffer</code>]\nScroll specified number of lines\nSelection mode\nSerif fonts represent the formal text style for a script.\nA set of buffers containing allocations for shaped text.\nA shaped glyph\nA shaped line (or paragraph)\nA helper structure for caching shape runs.\nKey for caching shape runs.\nA shaped span (for bidirectional processing)\nA shaped word (for word wrapping)\nThe shaping strategy of some text.\nMove cursor to start of line, skipping whitespace\nA face width.\nAllows italic or oblique faces to be selected.\nBinning of subpixel position for cache optimization\n32-bit RGBA subpixel mask.\nCache for rasterizing with the swash scaler\nContent of a scaled glyph image.\nScaled glyph image.\nTwo dimensional transformation matrix.\nMouse triple click at specified position\nMove cursor up\nMove cursor up or down by a number of pixels\nSpecifies the weight of glyphs in the font, their degree …\nSelect by words\nWraps at the word level\nWraps at the word level, or fallback to glyph level if a …\nWrapping mode\nAngle of zero degrees.\nGet the alpha component\nPerform an Action on the editor\nPerform an Action on the editor\nAdd an attribute span, removes any previous matching parts …\nWhether to associate the cursor with the run before it or …\nGet the Text alignment\nGet a flags value with all known bits set.\nAppend line at end of this line\nApply a change\nGet an array over all of the components, in <code>[r, g, b, a]</code> …\nGet a tuple over all of the attributes, in <code>(r, g, b, a)</code> …\nGet the line ending as a str\nGet attributes list\nGet the current automatic indentation setting\nGet the blue component\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMutably borrows <code>self</code> together with an <code>FontSystem</code> for more …\nMutably borrows the buffer together with an <code>FontSystem</code> for …\nGet the internal <code>BufferRef</code>\nGet the internal <code>BufferRef</code>\nConcurrently cache fonts by id list\nCache key, see CacheKey\nSet <code>CacheKeyFlags</code>\n<code>CacheKeyFlags</code>\nResets the image to a default state.\nClear the current attribute spans\nSet Color\nOptional color override\nCheck if this set of attributes can be shaped with another\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGiven an origin, offset and bounding box, computes the …\nWhether all set bits in a source flags value are also set …\nContent of the image.\nCopy selection\nGet the current cursor\nApply a <code>Motion</code> to a <code>Cursor</code>\nApply a <code>Motion</code> to a <code>Cursor</code>\nGet X and Y position of the top left corner of the cursor\nRaw image data.\nGet the database.\nGet a mutable reference to the database.\nGet the default Attrs\nDelete text starting at start Cursor and ending at end …\nDelete selection, adjusting cursor and returning true if …\nReturns the determinant of the transform.\nThe intersection of a source flags value with the …\nDraw the buffer\nDraw the editor\nDraw the buffer\nGet a flags value with all bits unset.\nCursor indicating end of change\nEnd index of cluster in original line\nGet line ending\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSet Family\nGet completed change\n<code>CacheKeyFlags</code>\nFont ID\nFont id of the glyph\nFont size in pixels\nFont size of the glyph\n<code>f32</code> bits of font size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new angle from degrees.\nCreates a new angle from gradians.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a new angle from radians.\nCreates a new angle from turns.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGet the green component\nGet cache item, updating age if found\nGet a font by its ID.\nCreate a swash Image from a cache key, caching results\nCreate a swash Image from a cache key, without caching …\nGet the attribute span for an index\nIndex of [<code>LayoutGlyph</code>] in [<code>LayoutLine::glyphs</code>]\nGlyph ID\nFont id of the glyph\nThe array of layout glyphs to draw\nGlyphs in line\nHeight in pixels.\nReturn the pixel span <code>Some((x_left, x_width))</code> of the …\nConvert x, y position to Cursor (hit detection)\nThe horizontal position of scroll in fractional pixels\nFirst-byte-index of glyph at cursor (will insert behind …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert cache item with current age\nInsert if true, delete if false\nInsert text at specified cursor with specified attrs_list\nInsert a string at the current cursor or replacing the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this <code>FontSystem</code> and return the locale and database.\nConsume this line, returning only its text contents as a …\nReturns the inverse of the transform, if any.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nChange items grouped into one change\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLayout line, will cache results\nIndex of [<code>LayoutLine</code>] in [<code>BufferLine::layout</code>]\nConvert a <code>Cursor</code> to a <code>LayoutCursor</code>\nLayout a line using a pre-existing shape buffer, will …\nGet line layout cache\nGet the visible layout runs for rendering and other tasks\nHorizontal offset with respect to the origin specified …\nUnicode BiDi embedding level, character is left-to-right …\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]. This will be …\nY offset to next line\nLine height in pixels\nLine height of the glyph, will override buffer setting\nMaximum line height of any spans in line\nThe index of the original text line\nLay out the provided line index and return the result\nLay out the provided line index and return the result\nShape the provided line index and return the result\nShape the provided line index and return the result\nY offset to top of line\nWidth of line\nY offset to baseline of line\nBufferLines (or paragraphs) of text in the buffer\nGet the locale.\nCheck if font matches\nMaximum ascent of the glyphs in line\nMaximum descent of the glyphs in line\nSet metadata\nGet line metadata. This will be None if …\nMetadata from <code>Attrs</code>\nSet <code>Metrics</code>, overriding values in buffer\nGet the current <code>Metrics</code>\nGet the current <code>monospace_width</code>\nCreate a new <code>FontSystem</code>, that allows access to any …\nCreate a new swash cache\nCreate a new set of attributes with sane defaults\nCreate a new attributes list with a set of default Attrs\nCreate an iterator to split the input text into paragraphs …\nCreate metrics with given font size and line height\nCreates a new transform.\nCreate a new <code>Buffer</code> with the provided <code>FontSystem</code> and …\nCreate a new line with the given text and attributes list …\nCreate a new cursor\nCreate a new <code>LayoutCursor</code>\nCreate a new scroll\nCreate a new <code>Editor</code> with the provided [<code>Buffer</code>]\nCreate an iterator of lines in a string slice\nPanics\nCreates a new empty scaled image.\nCreate an empty <code>Buffer</code> with the provided <code>Metrics</code>. This is …\nShape a word into a set of glyphs, using a scratch buffer.\nShape a span into a set of words, using a scratch buffer.\nShape a line into a set of spans, using a scratch buffer. …\nCreate a new cursor, specifying the affinity\nCreate a new <code>FontSystem</code> with a pre-specified set of fonts.\nCreate a new <code>FontSystem</code> with a pre-specified locale and …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOffset and size of the image.\nReturns a new transform that represents a rotation …\nReturns a new transform that represents a scale followed …\nReturns a new transform that represents a translation …\nGet the red component\nGet the <code>Buffer</code> redraw flag\nTrue if a redraw is needed\nCreate metrics with given font size and calculate line …\nThe intersection of a source flags value with the …\nReset shaping, layout, and metadata caches\nReset only layout cache\nReset shaping and layout caches\nCreate new color with red, green, and blue components\nCreate new color with red, green, blue, and alpha …\nCreates a rotation transform.\nCreates a rotation transform around a point.\nTrue if the original paragraph direction is RTL\nScale font size and line height\nCreates a scale transform.\nGet the current scroll location\nGet the current selection position\nGet the bounds of the current selection\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the text alignment\nSet attributes list\nEnable or disable automatic indentation\nSet the current cursor\nSet line ending\nSet line metadata. This is stored until the next line reset\nSet the current <code>Metrics</code>\nSet the current <code>Metrics</code>\nSet the current <code>Metrics</code> and buffer dimensions at the same …\nSet the current <code>Metrics</code> and buffer dimensions at the same …\nSet monospace width monospace glyphs should be resized to …\nSet the <code>Buffer</code> redraw flag\nSet redraw needed flag\nSet text of buffer, using an iterator of styled spans …\nSet text of buffer, using an iterator of styled spans …\nSet the current scroll location\nSet the current selection position\nSet the current buffer dimensions\nSet the current buffer dimensions\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nSet tab width (number of spaces between tab stops)\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nSet text of buffer, using provided attributes for each …\nSet text and attributes list\nSet text of buffer, using provided attributes for each …\nSet the current <code>Wrap</code>\nSet the current <code>Wrap</code>\nShape line, will cache results\nShape lines until scroll, after adjusting scroll if the …\nShape lines until scroll, after adjusting scroll if the …\nShape a line using a pre-existing shape buffer, will cache …\nGet line shaping cache\nCache for shaped runs\nShape lines until cursor, also scrolling to include cursor …")
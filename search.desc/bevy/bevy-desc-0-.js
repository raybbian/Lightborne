searchState.loadedDescShard("bevy", 0, "Bevy Logo\nThis plugin group will add all the default plugins for a …\nThis plugin group will add the minimal plugins for a <em>Bevy</em> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>use bevy::prelude::*;</code> to import common components, …\nComponent to wrap a <code>accesskit::Node</code>, representing this …\nPlugin managing non-GUI aspects of integrating with …\nResource that tracks whether an assistive technology has …\nSet enum for the systems relating to accessibility\nWrapper struct for <code>accesskit::ActionRequest</code>. Required to …\nResource representing which entity has keyboard focus, if …\nResource whose value determines whether the accessibility …\nUpdate the accessibility tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns <code>true</code> if an access technology is active and …\nReturns <code>true</code> if the ECS should update the accessibility …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets whether accessibility updates were requested by an …\nSets whether the ECS should update the accessibility tree.\nThe UUID namespace of animation targets (e.g. bones).\nAn animation that an <code>AnimationPlayer</code> is currently either …\nA list of <code>VariableCurve</code>s and the <code>AnimationTargetId</code>s to …\nA mapping from <code>AnimationTargetId</code> (e.g. bone in a skinned …\nA type alias for <code>EntityMutExcept</code> as used in animation.\nWhy Bevy failed to evaluate an animation.\nTemporary data that the <code>animate_targets</code> system maintains.\nAnimation controls.\nAdds animation support to an app\nAn entity that can be animated by an <code>AnimationPlayer</code>.\nA unique UUID for an animation target (e.g. bone in a …\nThe component to be animated isn’t present on the …\nThe animation will finish after running “n” times.\nThe animation will never finish.\nAn internal error occurred in the implementation of …\nThe animation will finish after running once.\nThe component to be animated was present, but the property …\nRepetition behavior of an animation.\nContains an animation curve which is used to animate a …\nA system that advances the time for all playing animations.\nTraits and type for interpolating between values.\nA system that modifies animation targets (e.g. bones in a …\nReturns an <code>AnimatedField</code> with a given <code>$component</code> and <code>$field</code>…\nThe <code>AnimationCurve</code> trait and adaptors that allow curves to …\nReturns the number of times this animation has completed.\nReturns the amount of time the animation has been playing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>AnimationTargetId</code> by hashing a list of …\nCreates a new <code>AnimationTargetId</code> by hashing a single name.\nCreates a new <code>AnimationTargetId</code> by hashing a list of names.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nConcrete curve structures used to load glTF curves into …\nThe animation graph, which allows animations to be blended …\nThe ID of this animation target.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the animation has finished, based on its …\nReturns true if this animation is currently paused.\nReturns true if the animation is playing in reverse.\nPause the animation.\nThe entity containing the <code>AnimationPlayer</code>.\nThe animation prelude.\nMarks this animation as repeating forever.\nReturns the repeat mode assigned to this active animation.\nReset back to the initial state as if no time has elapsed.\nUnpause the animation.\nSeeks to the beginning of the animation.\nReturns the seek time of the animation.\nSeeks to a specific time in the animation.\nSets the repeat mode for this playing animation.\nSeeks to a specific time in the animation.\nSets the speed of the animation playback.\nSets the weight of this animation.\nReturns the speed of the animation playback.\nAnimation transitions.\nReturns the current weight of this animation.\nAn animatable value type.\nAn individual input for <code>Animatable::blend</code>.\nWhether or not to additively blend this input into the …\nBlends one or more values together.\nInterpolates between <code>a</code> and <code>b</code> with  a interpolation factor …\nEvaluates a cubic Bézier curve at a value <code>t</code>, given two …\nThe input value to be blended.\nThe individual item’s weight. This may not be bound to …\nThis type allows the conversion of a curve valued in the …\nAn <code>AnimatableCurveEvaluator</code> for <code>AnimatableProperty</code> …\nA curve defined by keyframes with values in an animatable …\nA value on a component that Bevy can animate.\nA <code>Component</code> field that can be animated, defined by a …\nThis trait collects the additional requirements on top of …\nA low-level trait that provides control over how curves …\nA low-level trait for use in <code>crate::VariableCurve</code> that …\nCorresponds to a specific field on a specific component …\nThe <code>EvaluatorId</code> is used to look up the …\nThe animated property type.\nCorresponds to a custom property of a given type. This …\nThis type allows an <code>IterableCurve</code> valued in <code>f32</code> to be used …\nAdditively blends the top element of the stack with the …\nSamples the curve at the given time <code>t</code>, and pushes the …\nBlends the top element of the stack with the blend …\nReturns a boxed clone of this value.\nPops the top value off the stack and writes it into the …\nReturns a newly-instantiated <code>AnimationCurveEvaluator</code> for …\nThe inner curve whose values are used to animate the …\nThe range of times for which this animation is defined.\nThe <code>EvaluatorId</code> used to look up the <code>AnimationCurveEvaluator</code>…\nReturns the type ID of the <code>AnimationCurveEvaluator</code>.\nRetrieves the property from the given <code>entity</code>.\nThe property selector, which defines what component to …\nPushes the current value of the blend register onto the …\nA curve which takes a constant value over its domain. …\nAn error was returned by the internal core constructor.\nA keyframe-defined curve that uses cubic spline …\nA keyframe-defined curve that uses cubic spline …\nA curve which interpolates between keyframes by using …\nThe number of given values was not divisible by a multiple …\nA curve which interpolates weights linearly between …\nA curve which interpolates weights between keyframes in …\nA keyframe-defined curve that “interpolates” by …\nA curve specifying the <code>MorphWeights</code> for a mesh in …\nA keyframe-defined curve that uses cubic interpolation …\nAn error indicating that a multisampling keyframe curve …\nA keyframe-defined curve that uses linear interpolation …\nA keyframe-defined curve that uses stepped “interpolation…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SteppedKeyframeCurve</code>. If the curve could not …\nCreate a new <code>CubicKeyframeCurve</code> from keyframe <code>times</code> and …\nCreate a new <code>CubicRotationCurve</code> from keyframe <code>times</code> and …\nCreate a new <code>WideLinearKeyframeCurve</code>. An error will be …\nCreate a new <code>WideSteppedKeyframeCurve</code>. An error will be …\nCreate a new <code>WideCubicKeyframeCurve</code>.\nThe number that <code>values_given</code> was supposed to be divisible …\nThe number of values given.\nAn <em>additive blend node</em>, which combines the animations of …\nCorresponds to <code>AnimationNodeType::Add</code>.\nA type alias for the <code>petgraph</code> data structure that defines …\nA graph structure that describes how animation clips are …\nAn <code>AssetLoader</code> that can load <code>AnimationGraph</code>s as assets.\nA <code>Handle</code> to the <code>AnimationGraph</code> to be used by the …\nVarious errors that can occur when serializing or …\nAn individual node within an animation graph.\nThe type of an animation mask bitfield.\nThe index of either an animation or blend node in the …\nAnimation node data specific to the type of node (clip, …\nThe fallback that records an asset ID.\nRecords an asset path.\nA <em>blend node</em>, which blends its children according to their …\nCorresponds to <code>AnimationNodeType::Blend</code>.\nA <em>clip node</em>, which plays an animation clip.\nCorresponds to <code>AnimationNodeType::Clip</code>.\nAn I/O error occurred.\nAn error occurred in RON serialization or deserialization.\nA version of <code>Handle&lt;AnimationClip&gt;</code> suitable for …\nA version of <code>AnimationGraph</code> suitable for serializing as an …\nA version of <code>AnimationGraphNode</code> suitable for serializing …\nA version of <code>AnimationNodeType</code> suitable for serializing as …\nAn error occurred in RON deserialization, and the location …\nAn acceleration structure for an animation graph that …\nAcceleration structures for animation graphs that allows …\nA mapping from node index to a bitfield specifying the …\nThe <code>petgraph</code> data structure that defines the animation …\nCorresponds to the <code>graph</code> field on <code>AnimationGraph</code>.\nA bitfield specifying the mask groups that this node and …\nCorresponds to the <code>mask</code> field on <code>AnimationGraphNode</code>.\nThe mask groups that each animation target (bone) belongs …\nCorresponds to the <code>mask_groups</code> field on <code>AnimationGraph</code>.\nAnimation node data specific to the type of node (clip, …\nCorresponds to the <code>node_type</code> field on <code>AnimationGraphNode</code>.\nThe index of the root node in the animation graph.\nCorresponds to the <code>root</code> field on <code>AnimationGraph</code>.\nA mapping from each parent node index to the range within …\nA list of the children of each node, sorted in ascending …\nA cached postorder traversal of the graph.\nThe weight of this node, which signifies its contribution …\nCorresponds to the <code>weight</code> field on <code>AnimationGraphNode</code>.\nAn <em>additive blend node</em>, which combines the animations of …\nCorresponds to <code>AnimationNodeType::Add</code>.\nAn animatable value type.\nThis type allows the conversion of a curve valued in the …\nAn <code>AnimatableCurveEvaluator</code> for <code>AnimatableProperty</code> …\nA curve defined by keyframes with values in an animatable …\nA value on a component that Bevy can animate.\nA <code>Component</code> field that can be animated, defined by a …\nA list of <code>VariableCurve</code>s and the <code>AnimationTargetId</code>s to …\nThis trait collects the additional requirements on top of …\nA low-level trait that provides control over how curves …\nA low-level trait for use in <code>crate::VariableCurve</code> that …\nA type alias for the <code>petgraph</code> data structure that defines …\nA graph structure that describes how animation clips are …\nAn <code>AssetLoader</code> that can load <code>AnimationGraph</code>s as assets.\nA <code>Handle</code> to the <code>AnimationGraph</code> to be used by the …\nVarious errors that can occur when serializing or …\nAn individual node within an animation graph.\nThe type of an animation mask bitfield.\nThe index of either an animation or blend node in the …\nAnimation node data specific to the type of node (clip, …\nAnimation controls.\nAdds animation support to an app\nAn animation that is being faded out as part of a …\nManages fade-out of animation blend factors, allowing for …\nThe fallback that records an asset ID.\nRecords an asset path.\nA <em>blend node</em>, which blends its children according to their …\nCorresponds to <code>AnimationNodeType::Blend</code>.\nAn individual input for <code>Animatable::blend</code>.\nA <em>clip node</em>, which plays an animation clip.\nCorresponds to <code>AnimationNodeType::Clip</code>.\nCorresponds to a specific field on a specific component …\nThe <code>EvaluatorId</code> is used to look up the …\nAn I/O error occurred.\nThe animated property type.\nAn error occurred in RON serialization or deserialization.\nA version of <code>Handle&lt;AnimationClip&gt;</code> suitable for …\nA version of <code>AnimationGraph</code> suitable for serializing as an …\nA version of <code>AnimationGraphNode</code> suitable for serializing …\nA version of <code>AnimationNodeType</code> suitable for serializing as …\nAn error occurred in RON deserialization, and the location …\nAn acceleration structure for an animation graph that …\nAcceleration structures for animation graphs that allows …\nCorresponds to a custom property of a given type. This …\nContains an animation curve which is used to animate a …\nThis type allows an <code>IterableCurve</code> valued in <code>f32</code> to be used …\nAdditively blends the top element of the stack with the …\nWhether or not to additively blend this input into the …\nA system that alters the weight of currently-playing …\nSamples the curve at the given time <code>t</code>, and pushes the …\nBlends one or more values together.\nBlends the top element of the stack with the blend …\nReturns a boxed clone of this value.\nPops the top value off the stack and writes it into the …\nA mapping from node index to a bitfield specifying the …\nReturns a newly-instantiated <code>AnimationCurveEvaluator</code> for …\nThe inner curve whose values are used to animate the …\nThe range of times for which this animation is defined.\nThe <code>EvaluatorId</code> used to look up the <code>AnimationCurveEvaluator</code>…\nReturns the type ID of the <code>AnimationCurveEvaluator</code>.\nA system that removed transitions that have completed from …\nRetrieves the property from the given <code>entity</code>.\nThe <code>petgraph</code> data structure that defines the animation …\nCorresponds to the <code>graph</code> field on <code>AnimationGraph</code>.\nInterpolates between <code>a</code> and <code>b</code> with  a interpolation factor …\nEvaluates a cubic Bézier curve at a value <code>t</code>, given two …\nA bitfield specifying the mask groups that this node and …\nCorresponds to the <code>mask</code> field on <code>AnimationGraphNode</code>.\nThe mask groups that each animation target (bone) belongs …\nCorresponds to the <code>mask_groups</code> field on <code>AnimationGraph</code>.\nAnimation node data specific to the type of node (clip, …\nCorresponds to the <code>node_type</code> field on <code>AnimationGraphNode</code>.\nThe property selector, which defines what component to …\nPushes the current value of the blend register onto the …\nThe index of the root node in the animation graph.\nCorresponds to the <code>root</code> field on <code>AnimationGraph</code>.\nA mapping from each parent node index to the range within …\nA list of the children of each node, sorted in ascending …\nA cached postorder traversal of the graph.\nThe input value to be blended.\nThe individual item’s weight. This may not be bound to …\nThe weight of this node, which signifies its contribution …\nCorresponds to the <code>weight</code> field on <code>AnimationGraphNode</code>.\nAn animation that is being faded out as part of a …\nManages fade-out of animation blend factors, allowing for …\nA system that alters the weight of currently-playing …\nA system that removed transitions that have completed from …\nPlugins are being added.\nRuns after the fixed update logic.\nAnimation system set. This exists in <code>PostUpdate</code>.\n<code>App</code> is the primary API for writing user applications. It …\nAn event that indicates the <code>App</code> should exit. If one or …\nA strongly-typed class of labels used to identify an <code>App</code>.\nGenerates an impl of the <code>AppLabel</code> trait.\nRuns before the fixed update logic.\nCleanup has been executed for all plugins added.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nThe <code>App</code> experienced an unhandleable error. Holds the exit …\nFinish has been executed for all plugins added.\nRuns first in the schedule.\nRuns first in the <code>FixedMain</code> schedule.\nThe schedule that runs last in <code>FixedMain</code>\nThe schedule that contains systems which only run after a …\nContains the fixed update logic. Runs <code>FixedMain</code> zero or …\nDefines the schedules to be run for the <code>FixedMain</code> …\nThe schedule that runs after the <code>FixedUpdate</code> schedule, for …\nThe schedule that contains logic that must run before …\nThe schedule that contains most gameplay logic, which runs …\nA shorthand for <code>Interned&lt;dyn AppLabel&gt;</code>.\nRuns last in the schedule.\nIndicates that the <code>App</code>’s schedule should run repeatedly.\nThe schedule that contains the app logic that is evaluated …\nDefines the schedules to be run for the <code>Main</code> schedule, …\nInitializes the <code>Main</code> schedule, sub schedules, and …\nIndicates that the <code>App</code>’s schedule should run only once.\nAdds sensible panic handlers to Apps. This plugin is part …\nA collection of Bevy app logic and configuration.\nCombines multiple <code>Plugin</code>s into a single unit.\nFacilitates the creation and configuration of a <code>PluginGroup</code>…\nTypes that represent a set of <code>Plugin</code>s.\nPlugins state in the application\nThe schedule that runs once after <code>Startup</code>.\nThe schedule that contains logic that must run after <code>Update</code>…\nThe schedule that runs before <code>Startup</code>.\nThe schedule that contains logic that must run before …\nAll plugins already added are ready.\nRuns the <code>FixedMain</code> schedule in a loop according until all …\nSet enum for the systems that want to run inside …\nDetermines the method used to run an <code>App</code>’s <code>Schedule</code>.\nConfigures an <code>App</code> to run its <code>Schedule</code> according to a given …\nThe schedule that contains scene spawning.\nThe schedule that runs once when the app starts.\nA secondary application with its own <code>World</code>. These can run …\nThe collection of sub-apps that belong to an <code>App</code>.\n<code>App</code> exited without any problems.\nGracefully handles <code>Ctrl+C</code> by emitting a <code>AppExit</code> event. …\nThe schedule that contains any app logic that must run …\nAdds the plugin <code>Plugin</code> at the end of this …\nAdds a <code>Plugin</code> in this <code>PluginGroupBuilder</code> after the plugin …\nAdds a <code>Plugin</code> in this <code>PluginGroupBuilder</code> before the plugin …\nAdds a <code>PluginGroup</code> at the end of this <code>PluginGroupBuilder</code>. …\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nConfigures the <code>App</code> to which this plugin is added.\nConfigures the <code>Plugin</code>s that are to be added.\nDisables a <code>Plugin</code>, preventing it from being added to the …\nClones this <code>AppLabel</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given [<code>Hasher</code>].\nEnables a <code>Plugin</code>.\nSends a <code>AppExit</code> event when the user presses <code>Ctrl+C</code> on the …\nConsumes the <code>PluginGroupBuilder</code> and builds the contained …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nSends the <code>AppExit</code> event to all apps using this plugin to …\nAdds the given <code>schedule</code> after the <code>after</code> schedule in the …\nAdds the given <code>schedule</code> after the <code>after</code> schedule\nAdds the given <code>schedule</code> before the <code>before</code> schedule in the …\nAdds the given <code>schedule</code> before the <code>before</code> schedule\nAdds the given <code>schedule</code> after the <code>after</code> schedule in the …\nAdds the given <code>schedule</code> before the <code>before</code> schedule in the …\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the sub-apps (starting with the …\nReturns a mutable iterator over the sub-apps (starting …\nThe labels to run for the main phase of the <code>Main</code> schedule …\nThe labels to run for the <code>FixedMain</code> schedule (in the order …\nThe primary sub-app that contains the “main” world.\nA macro for generating a well-documented <code>PluginGroup</code> from …\nThe app prelude.\nA system that runs the fixed timestep’s “main schedule…\nSee <code>RunMode::Loop</code>.\nDetermines whether the <code>Schedule</code> is run once or repeatedly.\nSee <code>RunMode::Once</code>.\nSets the value of the given <code>Plugin</code>, if it exists.\nStart a new builder for the <code>PluginGroup</code>.\nThe labels to run for the startup phase of the <code>Main</code> …\nOther, labeled sub-apps.\nCalls <code>update</code> for the main sub-app, and then calls <code>extract</code> …\nThe schedule that will be run by <code>update</code>.\nExtract data from the main world into the <code>SubApp</code> with the …\nThe minimum <code>Duration</code> to wait after a <code>Schedule</code> has …\nCtrl-C\nCtrl-C error.\nCtrl-C signal handler already registered.\nSignal could not be found from the system.\nOther signal/event using platform-specific data\nAbort\nAlarm clock\nBus error\nTo parent on child stop or exit\nContinue a stopped process\nFloating point exception\nHangup\nIllegal instruction (not reset when caught)\nInterrupt\nInput/output possible signal\nKill (cannot be caught or ignored)\nWrite on a pipe with no one to read it\nProfiling time alarm\nPower failure imminent.\nQuit\nSegmentation violation\nStack fault (obsolete)\nSendable stop signal not from tty\nBad system call\nSoftware termination signal from kill\nTrace trap (not reset when caught)\nStop signal from tty\nTo readers pgrp upon background tty read\nLike TTIN if (tp-&gt;t_local&amp;LTOSTOP)\nUrgent condition on IO channel\nUser defined signal 1\nUser defined signal 2\nVirtual time alarm\nWindow size changes\nExceeded CPU time limit\nExceeded file size limit\nPlatform specific signal type\nA cross-platform way to represent Ctrl-C or program …\nUnexpected system error.\nProgram termination Maps to <code>SIGTERM</code> and <code>SIGHUP</code> on *nix, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister signal handler for Ctrl-C.\nThe same as ctrlc::set_handler but errors if a handler …\nRuns after the fixed update logic.\n<code>App</code> is the primary API for writing user applications. It …\nAn event that indicates the <code>App</code> should exit. If one or …\nRuns before the fixed update logic.\nThe <code>App</code> experienced an unhandleable error. Holds the exit …\nRuns first in the schedule.\nRuns first in the <code>FixedMain</code> schedule.\nThe schedule that runs last in <code>FixedMain</code>\nContains the fixed update logic. Runs <code>FixedMain</code> zero or …\nThe schedule that runs after the <code>FixedUpdate</code> schedule, for …\nThe schedule that contains logic that must run before …\nThe schedule that contains most gameplay logic, which runs …\nRuns last in the schedule.\nThe schedule that contains the app logic that is evaluated …\nA collection of Bevy app logic and configuration.\nCombines multiple <code>Plugin</code>s into a single unit.\nThe schedule that runs once after <code>Startup</code>.\nThe schedule that contains logic that must run after <code>Update</code>…\nThe schedule that runs before <code>Startup</code>.\nThe schedule that contains logic that must run before …\nRuns the <code>FixedMain</code> schedule in a loop according until all …\nSet enum for the systems that want to run inside …\nThe schedule that contains scene spawning.\nThe schedule that runs once when the app starts.\nA secondary application with its own <code>World</code>. These can run …\n<code>App</code> exited without any problems.\nThe schedule that contains any app logic that must run …\nConfigures the <code>App</code> to which this plugin is added.\nConfigures the <code>Plugin</code>s that are to be added.\nThe schedule that will be run by <code>update</code>.\nEmitted whenever an <code>Asset</code> is added.\nAlways check if assets have meta files. If the meta does …\nDeclares that this type is an asset, which can be loaded …\nThe top level <code>Asset</code> loaded by this <code>AssetLoader</code>.\nAdds asset-related builder methods to <code>App</code>.\nA type erased container for an <code>Asset</code> value that is capable …\nEvents that occur for a specific loaded <code>Asset</code>, such as “…\nA system set where events accumulated in <code>Assets</code> are …\nProvides <code>Handle</code> and <code>UntypedHandle</code> <em>for a specific asset type</em>…\nA unique runtime-only identifier for an <code>Asset</code>. This is …\nA generational runtime-only identifier for a specific <code>Asset</code>…\nAn error that occurs during an <code>Asset</code> load.\nAn event emitted when a specific <code>Asset</code> fails to load.\nLoads an <code>Asset</code> from a given byte <code>Reader</code>. This can accept …\nConfigures how / if meta files will be checked. If an asset…\nControls whether or not assets are pre-processed before …\nRepresents a path to an asset in a “virtual filesystem”…\nProvides “asset” loading and processing functionality. …\nLoads and tracks the state of <code>Asset</code> values from a …\nThe “asset mode” the server is currently in.\nStores <code>Asset</code> values identified by their <code>AssetId</code>.\nA mutable iterator over <code>Assets</code>.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncWrite</code>.\n<code>NestedLoader</code> will create and return asset handles …\nThe load state of an asset’s dependencies.\nAn error that occurs while deserializing <code>AssetMeta</code>.\n<code>NestedLoader</code> has been configured with info on what type of …\nProvides type-erased access to an <code>AssetLoader</code>.\nA “type erased / boxed” counterpart to <code>LoadedAsset</code>. …\nThe type of error which could be encountered by this …\nThe asset failed to load. The underlying <code>AssetLoadError</code> is …\nOne or more dependencies have failed to load. The …\nOne or more dependencies have failed to load in this asset…\nA strong or weak handle to a specific <code>Asset</code>. If a <code>Handle</code> …\n<code>NestedLoader</code> will immediately load an asset when requested.\nA small / efficient runtime identifier that can be used to …\nA small / efficient runtime identifier that can be used to …\nError that occurs when the <code>AssetPath::label</code> section of a …\nError that occurs when the <code>AssetPath::source</code> section of a …\nEncountered an I/O error while loading an asset.\nA context that provides access to assets in <code>AssetLoader</code>s, …\nAn error that occurs when attempting to call …\nThe load state of an asset.\nThe asset has been loaded and has been added to the <code>World</code>\nDependencies have all loaded\nDependencies in this asset’s dependency tree have all …\nThe successful result of an <code>AssetLoader::load</code> call. This …\nA “loaded folder” containing handles for all assets …\nA “loaded asset” containing the untyped handle for an …\nEmitted whenever an <code>Asset</code> has been fully loaded (including …\nThe asset is in the process of loading.\nDependencies are still loading\nDependencies in this asset’s dependency tree are still …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nAn error that occurs when an <code>AssetLoader</code> is not registered …\nError that occurs when a path string has an …\nError that occurs when a path string has an …\nEmitted whenever an <code>Asset</code> value is modified.\nA builder for loading nested assets inside a <code>LoadContext</code>.\nNever check if assets have meta files and always use the …\nThe asset has not started loading yet\nThe asset has not started loading yet\nThe asset has not started loading yet\nAn error that occurs when parsing a string type to create …\nOnly look up meta files for the provided paths. The …\nThis server loads processed assets.\nAssets will be “pre-processed”. This enables assets to …\nAn error produced when calling …\nThe recursive load state of an asset’s dependencies.\nType data for the <code>TypeRegistry</code> used to operate on …\nReflect type data struct relating a <code>Handle&lt;T&gt;</code> back to the <code>T</code>…\nEmitted whenever an <code>Asset</code> is removed.\nDefines where the asset will be used.\nThe settings type used by this <code>AssetLoader</code>.\n<code>NestedLoader</code> will be provided the type of asset as a type …\nA “strong” reference to a live (or loading) <code>Asset</code>. If …\nThe internal “strong” <code>Asset</code> handle storage for …\nA system set that holds all “track asset” operations.\nCaused when trying to convert an <code>UntypedHandle</code> into a …\nCaused when trying to convert an <code>UntypedAssetId</code> into an …\n<code>NestedLoader</code> does not know what type of asset it will be …\nThis server loads unprocessed assets.\nLoads assets from their <code>AssetSource</code>’s default <code>AssetReader</code>…\nErrors preventing the conversion of to/from an …\nAn “untyped” / “generic-less” <code>Asset</code> identifier …\nErrors preventing the conversion of to/from an …\nAn untyped version of <code>AssetLoadFailedEvent</code>.\nAn untyped variant of <code>Handle</code>, which internally stores the …\nEmitted when the last <code>super::Handle::Strong</code> of an <code>Asset</code> is …\nA stable-across-runs / const asset identifier. This will …\nA stable-across-runs / const asset identifier. This will …\nThis trait defines how to visit the dependencies of an …\nAn error when attempting to wait asynchronously for an …\nA “weak” reference to an <code>Asset</code>. If a <code>Handle</code> is …\nEquivalent of <code>Assets::add</code>\nInsert an asset similarly to <code>Assets::add</code>.\nThis will add the given <code>asset</code> as a “labeled <code>Asset</code>” …\nAdd a <code>LoadedAsset</code> that is a “labeled sub asset” of the …\nGet a flags value with all known bits set.\nIndicates this <code>AssetPath</code> should have a static lifetime.\nGets the source asset path for this load context.\nReturns the <code>TypeId</code> of the top-level <code>Asset</code> loaded by the …\nRetrieves the <code>TypeId</code> of the stored <code>Asset</code> type.\nThe <code>TypeId</code> of the asset\nReturns the type name of the top-level <code>Asset</code> loaded by the …\nRetrieves the <code>type_name</code> of the stored <code>Asset</code> type.\nThe <code>TypeId</code> of the <code>Assets&lt;T&gt;</code> resource\nBegins a new labeled asset load. Use the returned …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBoxes the reader and changes its type to …\nBoxes the reader and changes its type to …\nBoxes the reader and changes its type to …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nBoxes the writer and changes its type to …\nBoxes the writer and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCreates an adapter which will chain this stream with …\nCreates an adapter which will chain this stream with …\nCreates an adapter which will chain this stream with …\nClones this into an “owned” value. If internally a …\nCloses the writer.\nCloses the writer.\nCloses the writer.\nCloses the writer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns the default render asset usage flags: …\nReturns the default meta value for the <code>AssetLoader</code> (erased …\nWhen <code>load</code>ing, create only asset handles, rather than …\nDeserializes metadata from the input <code>meta</code> bytes into the …\nThe intersection of a source flags value with the …\nCast this loaded asset as the given type. If the type does …\nReturns a boxed object from a boxed trait object if the …\nA way to go from a <code>Handle&lt;T&gt;</code> in a <code>dyn Any</code> to a …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nCreates a new <code>embedded</code> asset by embedding the bytes of the …\nReturns the <code>Path</code> for a given <code>embedded</code> asset. This is used …\nGet a flags value with all bits unset.\nWhy the asset failed to load.\nWhy the asset failed to load.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns a list of extensions supported by this asset …\nReturns a list of extensions supported by this <code>AssetLoader</code>…\nThe default file path to use (relative to the project …\n“Finishes” this context by populating the final <code>Asset</code> …\nFlushes the stream to ensure that all buffered contents …\nFlushes the stream to ensure that all buffered contents …\nFlushes the stream to ensure that all buffered contents …\nFlushes the stream to ensure that all buffered contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an opaque <code>u64</code> acquired from <code>AssetIndex::to_bits</code> …\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a new <code>AssetPath</code> from a <code>Path</code>.\nConstructs an <code>AssetPath</code> with a static lifetime.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nRetrieves a reference to the internal <code>Asset</code> type.\nRetrieves a reference to the internal <code>Asset</code> type, if it …\nEquivalent of <code>Assets::get</code>\nReturns the full extension (including multiple ‘.’ …\nReturns a handle to an asset of type <code>A</code> with the label <code>label</code>…\nReturns the <code>ErasedLoadedAsset</code> for the given label, if it …\nReturns the <code>ErasedLoadedAsset</code> for the given label, if it …\nEquivalent of <code>Assets::get_mut</code>\nEquivalent of <code>Assets::get_mut</code>, but works with an …\nA system that manages internal <code>AssetServer</code> events, such as …\nThe <code>TypeId</code> of the <code>Handle&lt;T&gt;</code> for this asset\nReturns <code>true</code> if an asset with the label <code>label</code> exists in …\nEquivalent of <code>Assets::ids</code>\nThe <code>load</code> call itself will load an asset, rather than …\nInitializes the given <code>Asset</code> in the <code>App</code> by:\nInitializes the given loader in the <code>App</code>’s <code>AssetServer</code>.\nEquivalent of <code>Assets::insert</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this into an “owned” value. If internally a …\nReturns true if the trait object wraps an object of type …\nWhether all known bits in this flags value are set.\nEquivalent of <code>Assets::is_empty</code>\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this instance is <code>LoadState::Failed</code>\nReturns <code>true</code> if this instance is …\nReturns <code>true</code> if this instance is …\nReturns <code>true</code> if this instance is <code>LoadState::Loaded</code>\nReturns <code>true</code> if this instance is …\nReturns <code>true</code> if this instance is …\nReturns <code>true</code> if this instance is <code>LoadState::Loading</code>\nReturns <code>true</code> if this instance is …\nReturns <code>true</code> if this instance is …\nYield a set of contained flags values.\nIterate over all labels for “labeled assets” in the …\nIterate over all labels for “labeled assets” in the …\nYield a set of contained named flags values.\nGets the “sub-asset label”.\nGets the “sub-asset label”.\nCreates a new <code>LoadContext</code> for the given <code>label</code>. The <code>load</code> …\nEquivalent of <code>Assets::len</code>\nAsynchronously loads <code>AssetLoader::Asset</code> (and any other …\nAsynchronously loads the asset(s) from the bytes provided …\nRetrieves a handle for the asset at the given path and …\nAttempts to load the asset at the given <code>path</code> immediately.\nAttempts to load the asset at the given <code>path</code> immediately.\nRetrieves a handle for the asset at the given path and …\nAttempts to load the asset at the given <code>path</code> immediately.\nRetrieves a handle for the asset at the given path and …\nRetrieves a handle for the asset at the given path and …\nLoad an asset similarly to <code>AssetServer::load</code>.\nLoad an asset with settings, similarly to …\nLoads an “internal” asset by embedding the string …\nLoads an “internal” binary asset by embedding the …\nCreate a builder for loading nested assets in this context.\nHow/If asset meta files should be checked.\nThe <code>AssetMode</code> to use for this server.\nCreate a new loaded asset. This will use …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns an <code>AssetPath</code> for the parent folder of this path, …\nCreates a new <code>AssetPath</code> from a string in the asset path …\nGets the source path for this load context.\nGets the path to the asset in the “virtual filesystem”.\nThe asset path that was attempted.\nThe asset path that was attempted.\nThe asset prelude.\nPreregisters a loader for the given extensions, that will …\nThe default file path to use (relative to the project …\nAsset processing in Bevy is a framework for automatically …\nReads some bytes from the byte stream.\nReads some bytes from the byte stream.\nReads some bytes from the byte stream.\nReads some bytes from the byte stream.\nReads the asset at the given path and returns its bytes\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads the entire contents and appends them to a <code>String</code>.\nLike <code>read()</code>, except it reads into a slice of buffers.\nLike <code>read()</code>, except it reads into a slice of buffers.\nLike <code>read()</code>, except it reads into a slice of buffers.\nLike <code>read()</code>, except it reads into a slice of buffers.\nRegisters the given <code>loader</code> in the <code>App</code>’s <code>AssetServer</code>.\nRegisters the given <code>processor</code> in the <code>App</code>’s <code>AssetProcessor</code>…\nRegisters the asset type <code>T</code> using <code>[App::register]</code>, and adds …\nRegisters the given <code>AssetSourceBuilder</code> with the given <code>id</code>.\nEquivalent of <code>Assets::remove</code>\nThe intersection of a source flags value with the …\nRemoves a “sub-asset label” from this <code>AssetPath</code>, if …\nReserves a new strong <code>UntypedHandle</code> (with a new …\nResolves a relative asset path via concatenation. The …\nResolves an embedded asset path via concatenation. The …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the default asset processor for the given <code>extension</code>.\nGets the “asset source”, if one was defined. If none …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCast (and take ownership) of the <code>Asset</code> value of the given …\nCast (and take ownership) of the <code>Asset</code> value of the given …\nTakes the “sub-asset label” from this <code>AssetPath</code>, if …\nConvert the <code>AssetIndex</code> into an opaque blob of bits to …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCreates a new <code>AssetPath</code> from a string in the asset path …\nTry to convert this to a “typed” <code>AssetId</code>.\nReturns the <code>TypeId</code> of the <code>AssetLoader</code>.\nReturns the stored <code>TypeId</code> of the referenced <code>Asset</code>.\nReturns the type name of the <code>AssetLoader</code>.\nConverts this to a “typed” <code>AssetId</code>.\nA way to go from a <code>UntypedHandle</code> to a <code>Handle&lt;T&gt;</code> in a …\nConverts this to a “typed” <code>AssetId</code>. When compiled in …\nConverts this to a “typed” <code>AssetId</code> without checking …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConverts this to an “untyped” / “generic-less” …\nIf set, will override the default “watch for changes” …\nWhen <code>load</code>ing, the loader will attempt to load an asset …\nReturns this asset path with the given label. This will …\nSpecify the reader to use to read the asset data.\nConfigure the settings used to load the asset.\nReturns this asset path with the given asset source. This …\nWhen <code>load</code>ing, you must pass in the asset type as a type …\nWhen <code>load</code>ing, we will infer what type of asset to load from\nGets the path to the asset in the “virtual filesystem” …\nWrites some bytes into the byte stream.\nWrites some bytes into the byte stream.\nWrites some bytes into the byte stream.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nWrites an entire buffer into the byte stream.\nWrites an entire buffer into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nLike <code>write()</code>, except that it writes a slice of buffers.\nLike <code>write()</code>, except that it writes a slice of buffers.\nLike <code>write()</code>, except that it writes a slice of buffers.\nAn asset at this path was added.\nA folder at the given path was added.\nAsset metadata at this path was added.\nPerforms read operations on an asset storage. <code>AssetReader</code> …\nErrors that occur while loading assets.\nA future that returns a value or an <code>AssetReaderError</code>\nA collection of unprocessed and processed <code>AssetReader</code>, …\nMetadata about an “asset source”, such as how to …\nA <code>Resource</code> that hold (repeatable) functions capable of …\nAn “asset source change event” that occurs whenever …\nA reference to an “asset source”, which maps to an …\nA collection of <code>AssetSource</code>s.\nA handle to an “asset watcher” process, that will …\nPreforms write operations on an asset storage. <code>AssetWriter</code> …\nErrors that occur while loading assets.\nAsynchronously advances the cursor position by a specified …\nExtension trait for <code>AsyncSeekForward</code>.\nExtension trait for <code>AsyncWrite</code>.\nThe default asset source.\nEquivalent to an <code>AssetReader</code> but using boxed futures, …\nEquivalent to an <code>AssetWriter</code> but using boxed futures, …\nThe HTTP request completed but returned an unhandled HTTP …\nEncountered an I/O error while loading an asset.\nEncountered an I/O error while loading an asset.\nAn error returned when an <code>AssetSource</code> does not exist for a …\nAn error returned when an <code>AssetWriter</code> does not exist for a …\nAn error returned when a processed <code>AssetReader</code> does not …\nAn error returned when a processed <code>AssetWriter</code> does not …\nAn asset at this path was modified.\nAsset metadata at this path was modified.\nA non-default named asset source.\nPath not found.\nA type returned from <code>AssetReader::read</code>, which is used to …\nAn asset at this path was removed.\nA folder at the given path was removed.\nAsset metadata at this path was removed.\nSomething of unknown type was removed. It is the job of …\nAn asset at this path was renamed.\nA folder at the given path was renamed.\nAsset metadata at this path was renamed.\nThe maximum size of a future returned from …\nAn <code>AsyncRead</code> implementation capable of reading a [<code>&amp;[u8]</code>].\nA wrapper that stores a future in space allocated by the …\nAn <code>AsyncRead</code> implementation capable of reading a <code>Vec&lt;u8&gt;</code>.\nIndicates this <code>AssetSourceId</code> should have a static lifetime.\nReturns <code>None</code> if this is <code>AssetSourceId::Default</code> and <code>Some</code> …\nBoxes the writer and changes its type to …\nStarts building a new <code>AssetSource</code>.\nBuilds a new <code>AssetSource</code> with the given <code>id</code>. If <code>watch</code> is …\nBuilds a new <code>AssetSources</code> collection. If <code>watch</code> is true, …\nClones into an owned [<code>AssetSourceId&lt;&#39;static&gt;</code>]. This is …\nCloses the writer.\nCreates a directory at the given path, including all …\nCreates a directory at the given path, including all …\nEquality comparison for <code>AssetReaderError::Io</code> is not full …\nReturn’s this source’s unprocessed event receiver, if …\nFlushes the stream to ensure that all buffered contents …\nCreates a <code>StackFuture</code> from an existing future\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a StackFuture from the given future, boxing if …\nConstructs an <code>AssetSourceId</code> with a static lifetime.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThis will cause processed <code>AssetReader</code> futures (such as …\nThis will cause processed <code>AssetReader</code> futures (such as …\nGets the <code>AssetSource</code> with the given <code>id</code>, if it exists.\nReturns a builder function for this platform’s default …\nReturns the default non-existent <code>AssetWatcher</code> warning for …\nReturns a builder function for this platform’s default …\nReturns a builder function for this platform’s default …\nGets a mutable builder with the given <code>id</code>, if it exists.\nDetermines whether this <code>StackFuture</code>’s alignment is …\nDetermines whether this <code>StackFuture</code>’s alignment is …\nDetermines whether this <code>StackFuture</code> can hold a value of …\nDetermines whether this <code>StackFuture</code> can hold the …\nReturns this source’s id.\nIterates over the <code>AssetSourceId</code> of every <code>AssetSource</code> in …\nInitializes the default <code>AssetSourceBuilder</code> if it has not …\nInserts a new builder with the given <code>id</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is not already an owned / static id, create one. …\nReturns true if the provided path points to a directory.\nReturns true if the provided path points to a directory.\nIterates all asset sources in the collection (including …\nMutably iterates all asset sources in the collection …\nIterates all processed asset sources in the collection …\nMutably iterates all processed asset sources in the …\nCreate a new <code>VecReader</code> for <code>bytes</code>.\nCreate a new <code>SliceReader</code> for <code>bytes</code>.\nCreates a new <code>AssetSourceId</code>\nReturns a builder containing the “platform default source…\nAttempts to asynchronously seek forward by a specified …\nReturn’s this source’s processed event receiver, if …\nReturn’s this source’s processed <code>AssetReader</code>, if it …\nReturn’s this source’s processed <code>AssetWriter</code>, if it …\nReturns a future to load the full file data at the …\nReturns a future to load the full file data at the …\nReturns an iterator of directory entry names at the …\nReturns an iterator of directory entry names at the …\nReturns a future to load the full file data at the …\nReturns a future to load the full file data at the …\nReads asset metadata bytes at the given <code>path</code> into a <code>Vec&lt;u8&gt;</code>…\nReads asset metadata bytes at the given <code>path</code> into a <code>Vec&lt;u8&gt;</code>…\nReads the entire contents of this reader and appends them …\nReturn’s this source’s unprocessed <code>AssetReader</code>.\nRemoves the asset stored at the given path.\nRemoves the asset stored at the given path.\nRemoves all assets (and directories) in this directory, …\nRemoves all assets (and directories) in this directory, …\nRemoves the directory at the given path, including all …\nRemoves the directory at the given path, including all …\nRemoves the directory at the given path, but only if it is …\nRemoves the directory at the given path, but only if it is …\nRemoves the asset meta stored at the given path. This …\nRemoves the asset meta stored at the given path. This …\nRenames the asset at <code>old_path</code> to <code>new_path</code>\nRenames the asset at <code>old_path</code> to <code>new_path</code>\nRenames the asset meta for the asset at <code>old_path</code> to …\nRenames the asset meta for the asset at <code>old_path</code> to …\nSeek by the provided <code>offset</code> in the forwards direction, …\nReturns true if the assets in this source should be …\nAttempts to create a <code>StackFuture</code> from an existing future\nWill use the given <code>reader</code> function to construct processed …\nEnables a warning for the processed source watcher, which …\nWill use the given <code>watcher</code> function to construct processed …\nWill use the given <code>writer</code> function to construct processed …\nWill use the given <code>reader</code> function to construct …\nEnables a warning for the unprocessed source watcher, …\nWill use the given <code>watcher</code> function to construct …\nWill use the given <code>writer</code> function to construct …\nWrites the full asset bytes at the provided path.\nWrites the full asset bytes at the provided path.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nWrites the asset <code>bytes</code> to the given <code>path</code>.\nWrites the asset <code>bytes</code> to the given <code>path</code>.\nWrites the full asset meta bytes at the provided path. …\nWrites the full asset meta bytes at the provided path. …\nWrites the asset meta <code>bytes</code> to the given <code>path</code>.\nWrites the asset meta <code>bytes</code> to the given <code>path</code>.\nLike <code>write()</code>, except that it writes a slice of buffers.\nReturn’s this source’s unprocessed <code>AssetWriter</code>, if it …\nThis field is only relevant if <code>path</code> is determined to be an …\nThe path of the removed asset or folder (undetermined). …\nA <code>Resource</code> that manages “rust source files” in a …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nInserts a new asset. <code>full_path</code> is the full path (as <code>file</code> …\nInserts new asset metadata. <code>full_path</code> is the full path (as …\nCalls <code>U::from(self)</code>.\nRemoves an asset stored using <code>full_path</code> (the full path as …\nI/O implementation for the local filesystem.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the base path of the assets directory, which is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FileAssetIo</code> at a path relative to the …\nCreates a new <code>FileAssetIo</code> at a path relative to the …\nReturns the root directory where assets are loaded from.\nOpens path “gates” for a <code>GatedReader</code>.\nA “gated” reader that will prevent asset reads from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GatedReader</code>, which wraps the given <code>reader</code>. …\nOpens the <code>path</code> “gate”, allowing a <em>single</em> <code>AssetReader</code> …\nAsset data stored in a <code>Dir</code>.\nA clone-able (internally Arc-ed) / thread-safe “in memory…\nIn-memory <code>AssetReader</code> implementation. This is primarily …\nStores either an allocated vec of bytes or a static array …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Dir</code> for the given <code>path</code>.\nRemoves the stored asset at <code>path</code> and returns the <code>Data</code> …\nAn <code>AssetReader</code> that will prevent asset (and asset …\nAn <code>AsyncRead</code> impl that will hold its asset’s transaction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ProcessorGatedReader</code>.\nConfigures how an asset source file should be handled by …\nThis is a minimal counterpart to <code>AssetAction</code> that exists …\nAsset metadata that informs how an <code>Asset</code> should be handled …\nA dynamic type-erased counterpart to <code>AssetMeta</code> that …\nThis is a minimal counterpart to <code>AssetMeta</code> that exists to …\nDo nothing with the asset\nLoad the asset with the given loader and settings See …\nProcess the asset with the given processor and settings. …\nInformation about a dependency used to process an asset. …\nInfo produced by the <code>AssetProcessor</code> for a given processed …\nThis is a minimal counterpart to <code>ProcessedInfo</code> that exists …\nSettings used by the asset system, such as by <code>AssetLoader</code>, …\nHow to handle this asset in the asset system. See …\nDeserializes the given serialized byte representation of …\nReturns a boxed object from a boxed trait object if the …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nReturns a reference to the object within the trait object …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nA hash of the asset bytes, the asset .meta data, and the …\nA hash of the asset bytes and the asset .meta data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns true if the trait object wraps an object of type …\nReturns a reference to the <code>AssetLoader</code> settings, if they …\nReturns a mutable reference to the <code>AssetLoader</code> settings, …\nThe version of the meta format being used. This will …\nInformation about the “process dependencies” used to …\nReturns a reference to the <code>ProcessedInfo</code> if it exists.\nInformation produced by the <code>AssetProcessor</code> <em>after</em> …\nReturns a mutable reference to the <code>ProcessedInfo</code> if it …\nSerializes the internal <code>AssetMeta</code>.\nEmitted whenever an <code>Asset</code> is added.\nDeclares that this type is an asset, which can be loaded …\nAdds asset-related builder methods to <code>App</code>.\nEvents that occur for a specific loaded <code>Asset</code>, such as “…\nA unique runtime-only identifier for an <code>Asset</code>. This is …\nControls whether or not assets are pre-processed before …\nProvides “asset” loading and processing functionality. …\nLoads and tracks the state of <code>Asset</code> values from a …\nStores <code>Asset</code> values identified by their <code>AssetId</code>.\nA strong or weak handle to a specific <code>Asset</code>. If a <code>Handle</code> …\nA small / efficient runtime identifier that can be used to …\nEmitted whenever an <code>Asset</code> has been fully loaded (including …\nEmitted whenever an <code>Asset</code> value is modified.\nAssets will be “pre-processed”. This enables assets to …\nEmitted whenever an <code>Asset</code> is removed.\nA “strong” reference to a live (or loading) <code>Asset</code>. If …\nLoads assets from their <code>AssetSource</code>’s default <code>AssetReader</code>…\nAn untyped variant of <code>Handle</code>, which internally stores the …\nEmitted when the last <code>super::Handle::Strong</code> of an <code>Asset</code> is …\nA stable-across-runs / const asset identifier. This will …\nA “weak” reference to an <code>Asset</code>. If a <code>Handle</code> is …\nInsert an asset similarly to <code>Assets::add</code>.\nThe default file path to use (relative to the project …\nInitializes the given <code>Asset</code> in the <code>App</code> by:\nInitializes the given loader in the <code>App</code>’s <code>AssetServer</code>.\nLoad an asset similarly to <code>AssetServer::load</code>.\nLoad an asset with settings, similarly to …\nHow/If asset meta files should be checked.\nThe <code>AssetMode</code> to use for this server.\nPreregisters a loader for the given extensions, that will …\nThe default file path to use (relative to the project …\nRegisters the given <code>loader</code> in the <code>App</code>’s <code>AssetServer</code>.\nRegisters the given <code>processor</code> in the <code>App</code>’s <code>AssetProcessor</code>…\nRegisters the asset type <code>T</code> using <code>[App::register]</code>, and adds …\nRegisters the given <code>AssetSourceBuilder</code> with the given <code>id</code>.\nSets the default asset processor for the given <code>extension</code>.\nIf set, will override the default “watch for changes” …\nA “background” asset processor that reads asset values …\nInternal data stored inside an <code>AssetProcessor</code>.\nA type-erased variant of <code>Process</code> that enables interacting …\nThe processor has finished processing all valid assets and …\nAn error that occurs when initializing the <code>AssetProcessor</code>.\nThe processor is still initializing, which involves …\nA flexible <code>Process</code> implementation that loads the source …\nSettings for the <code>LoadAndSave</code> <code>Process::Settings</code> …\nA flexible <code>Process</code> implementation that loads the source …\nSettings for the <code>LoadTransformAndSave</code> <code>Process::Settings</code> …\nAn error that occurs when validating individual …\nThe <code>AssetLoader</code> that will be used to load the final …\nAsset “processor” logic that reads input asset bytes …\nProvides scoped data access to the <code>AssetProcessor</code>. This …\nAn error that is encountered during <code>Process::process</code>.\nThe (successful) result of processing an asset\nThe final status of processing an asset\nThe processor is currently processing assets.\nThe “current” in memory view of the asset space. This …\nThe current state of the <code>AssetProcessor</code>.\nA “write ahead” logger that helps ensure asset …\nAn error that occurs when reading from the …\nThe configuration / settings used to process the asset. …\nAn error that occurs when validating the …\nAn error that occurs when writing to the …\nThe source bytes of the asset being processed.\nGets a reference to the <code>Arc</code> containing the …\nReturns the default type-erased <code>AssetMeta</code> for the …\nDeserialized <code>meta</code> as type-erased <code>AssetMeta</code>, operating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the default processor for the given <code>extension</code>, if …\nReturns the processor with the given <code>processor_type_name</code>, …\nRetrieves the <code>AssetSource</code> for this processor\nRetrieves the current <code>ProcessorState</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListens for changes to assets in the source <code>AssetSource</code> …\nLoad the source asset using the <code>L</code> <code>AssetLoader</code> and the …\nThe <code>AssetLoader::Settings</code> for <code>LoadTransformAndSave</code>.\nThe <code>AssetLoader::Settings</code> for <code>LoadTransformAndSave</code>.\nInitializes a new <code>AssetProcessorData</code> using the given …\nCreates a new <code>AssetProcessor</code> instance.\nThe path of the asset being processed.\nProcesses the asset stored on <code>context</code> in some way using …\nType-erased variant of <code>Process::process</code>.\nProcesses all assets. This will:\nRegister a new asset processor.\nThe <code>AssetSaver::Settings</code> for <code>LoadTransformAndSave</code>.\nThe <code>AssetSaver::Settings</code> for <code>LoadTransformAndSave</code>.\nThe “internal” <code>AssetServer</code> used by the <code>AssetProcessor</code>. …\nSet the default processor for the given <code>extension</code>. Make …\nStarts the processor in a background thread.\nThe <code>AssetTransformer::Settings</code> for <code>LoadTransformAndSave</code>.\nThe <code>AssetTransformer::Settings</code> for <code>LoadTransformAndSave</code>.\nReturns a future that will not finish until processing has …\nReturns a future that will not finish until the processor …\nReturns a future that will not finish until the path has …\nThe RON deserializer.\nContains the error value\nA <code>Value</code> to <code>Value</code> map.\nA wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.\nContains the success value\nRoundtrip serde options.\nThe RON serializer.\nIf the <code>Number</code> is a float, return it. Otherwise return <code>None</code>.\nIf the <code>Number</code> is an integer, return it. Otherwise return …\nExtensions that are enabled by default during …\nCheck if the remaining bytes are whitespace only, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nCreates a value from a string reference.\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nInserts a new element, returning the previous element with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>f64</code> representation of the <code>Number</code> regardless of …\nTries to deserialize this <code>Value</code> into <code>T</code>.\nReturns <code>true</code> if <code>self.len() == 0</code>, <code>false</code> otherwise.\nIterate all key-value pairs.\nIterate all key-value pairs mutably.\nIterate all keys.\nReturns the number of elements in the map.\nMap this number to a single type using the appropriate …\nCreates a new <code>Serializer</code>.\nCreates a new, empty <code>Map</code>.\nConstruct a new number.\nRoundtrip serde Options module.\nDefault recursion limit that is checked during …\nRemoves an element by its <code>key</code>.\nRetains only the elements specified by the <code>keep</code> predicate.\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> in the recommended RON layout in a pretty …\nSerializes <code>value</code> into <code>writer</code>.\nSerializes <code>value</code> into <code>writer</code> in a pretty way.\nValue module.\nIterate all values.\nIterate all values mutably.\nEnable <code>default_extension</code> by default during serialization …\nCreates a new <code>Serializer</code>.\nSet a maximum recursion limit during serialization and …\nDo NOT enable <code>default_extension</code> by default during …\nDisable the recursion limit during serialization and …\nThe RON deserializer.\nThis type represents all possible errors that can occur …\nReturns the argument unchanged.\nReturns the argument unchanged.\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nA convenience function for building a deserializer and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nThis type represents all possible errors that can occur …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates an extension flag from an ident.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRoundtrip serde options.\nExtensions that are enabled by default during …\nDefault recursion limit that is checked during …\nPretty serializer configuration.\nThe RON serializer.\nConfigures whether every array should be a single line (…\nEnable compact arrays\nLimits the pretty-formatting based on the number of …\nLimit the pretty-ness up to the given depth.\nConfigures whether a comment shall be added to every array …\nEnumerate array items in comments\nConfigures extensions\nEnable extensions. Only configures ‘implicit_some’, ‘…\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nConfigures the string sequence used for indentation.\nIndentation string\nCalls <code>U::from(self)</code>.\nCreates a default <code>PrettyConfig</code>.\nConfigures the newlines used for serialization.\nNew line string\nConfigures whether tuples are single- or multi-line. If …\nSeparate tuple members with indentation\nConfigures the string sequence used to separate items …\nSeparator string\nConfigures whether to emit struct names.\nSerializes <code>value</code> and returns it as string.\nSerializes <code>value</code> in the recommended RON layout in a pretty …\nSerializes <code>value</code> into <code>writer</code>.\nSerializes <code>value</code> into <code>writer</code> in a pretty way.\nA wrapper for <code>f64</code>, which guarantees that the inner value …\nA <code>Value</code> to <code>Value</code> map.\nA wrapper for a number, which can be either <code>f64</code> or <code>i64</code>.\nReturns the argument unchanged.\nReturns the wrapped float.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Float</code>.\nThe top level <code>Asset</code> saved by this <code>AssetSaver</code>.\nSaves an <code>Asset</code> of a given <code>AssetSaver::Asset</code> type. …\nA type-erased dynamic variant of <code>AssetSaver</code> that allows …\nThe type of error which could be encountered by this saver.\nThe type of <code>AssetLoader</code> used to load this <code>Asset</code>\nAn <code>Asset</code> (and any labeled “sub assets”) intended to be …\nThe settings type used by this <code>AssetSaver</code>.\nReturns the argument unchanged.\nCreates a new <code>SavedAsset</code> from <code>asset</code> if its internal value …\nCreates a new <code>SavedAsset</code> from the a <code>TransformedAsset</code>\nRetrieves the value of this asset.\nReturns the type-erased labeled asset, if it exists and …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the labeled asset, if it exists and matches this …\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nCalls <code>U::from(self)</code>.\nIterate over all labels for “labeled assets” in the …\nSaves the given runtime <code>Asset</code> by writing it to a byte …\nSaves the given runtime <code>ErasedLoadedAsset</code> by writing it to …\nThe type name of the <code>AssetSaver</code>.\nThe <code>Asset</code> type which this <code>AssetTransformer</code> takes as and …\nThe <code>Asset</code> type which this <code>AssetTransformer</code> outputs.\nTransforms an <code>Asset</code> of a given <code>AssetTransformer::AssetInput</code>…\nThe type of error which could be encountered by this …\nAn identity <code>AssetTransformer</code> which infallibly returns the …\nThe settings type used by this <code>AssetTransformer</code>.\nAn <code>Asset</code> (and any “sub assets”) intended to be …\nA labeled sub-asset of <code>TransformedAsset</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TransformedAsset</code> from <code>asset</code> if its internal …\nCreates a new <code>TransformedSubAsset</code> from <code>asset</code> if its …\nCreates <code>Self</code> using <code>default()</code>.\nRetrieves the value of this asset.\nRetrieves the value of this asset.\nReturns the type-erased labeled asset, if it exists and …\nReturns the type-erased labeled asset, if it exists and …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the <code>Handle</code> of the labeled asset with the provided …\nReturns the labeled asset, if it exists and matches this …\nReturns the labeled asset, if it exists and matches this …\nMutably retrieves the value of this asset.\nMutably retrieves the value of this asset.\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nReturns the <code>UntypedHandle</code> of the labeled asset with the …\nAdds <code>asset</code> as a labeled sub asset using <code>label</code> and <code>handle</code>\nAdds <code>asset</code> as a labeled sub asset using <code>label</code> and <code>handle</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all labels for “labeled assets” in the …\nIterate over all labels for “labeled assets” in the …\nCreates a new <code>TransformedAsset</code> from <code>asset</code>, transferring …\nTakes the labeled assets from <code>labeled_source</code> and places …\nTransforms the given <code>TransformedAsset</code> to …\nA trait that allows adding a custom audio source to the …\nBundle for playing a standard bevy audio asset\nLoads files as <code>AudioSource</code> <code>Assets</code>\nA component for playing a sound.\nAdds support for audio playback to a Bevy Application\nUsed to control audio during playback.\nCommon interactions with an audio sink.\nA source of audio data\nBundle for playing a sound.\nA trait for working generically across different <strong>Sample</strong> …\nA type implementing this trait can be converted to a …\nThe type of the iterator of the audio samples, which …\nThe type of the audio samples. Usually a <code>u16</code>, <code>i16</code> or <code>f32</code>, …\nThe default scale factor applied to the positions of audio …\nDespawn the entity and its children when the sound …\nThe equilibrium value for the wave that this <code>Sample</code> type …\nWhen multiplying two samples of a signal together, it is …\nUse this <code>Resource</code> to control the global volume of all …\nThe multiplicative identity of the signal.\nRepeat the sound forever.\nPlay the sound once. Do nothing when it ends.\nA source of sine wave sound\nBundle for playing a bevy note sound\nThe way Bevy manages the sound playback.\nInitial settings to be used when audio starts playing.\nRemove the audio components from the entity, when the …\nRepresents a value of a single sample.\nWhen summing two samples of a signal together, it is …\nA source of samples.\nUsed to control spatial audio during playback.\nSettings for the listener for spatial audio sources.\nA scale factor applied to the positions of audio sources …\nA volume level equivalent to a non-negative float.\nZero (silent) volume level\nAdds (or “offsets”) the amplitude of the <code>Sample</code> by the …\nRegisters an audio source. The type must implement …\nMultiplies the value of this sample by the given amount.\nAmplifies the sound by the given value.\nStores the source in a buffer in addition to returning it. …\nRaw data of the audio source.\nReturns the number of channels. Channels are always …\nConverts the samples of this source to another type.\nReturns the number of samples before the current frame …\nBuild and return a <code>Self::Decoder</code> of the implementing type\nThe scale factor applied to the positions of audio sources …\nDelays the sound by a certain duration.\nDuration for which sound will be played\nReturns true if this sink has no more sounds to play.\nFades in the sound.\nFrequency at which sound will be played\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Self</code> from any type that implements <code>ToSample&lt;Self&gt;</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGet the value of the volume level.\nThe global volume for all audio entities.\nApplies a high-pass filter to the source.\nApplies a high-pass filter to the source while allowing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this sink paused?\nLeft ear position relative to the <code>GlobalTransform</code>.\nLinear interpolation between two samples.\nProcesses the asset in an asynchronous closure.\nApplies a low-pass filter to the source. <strong>Warning</strong>: Probably …\nApplies a low-pass filter to the source while allowing the …\nMixes this source with another one.\nThe desired playback behavior.\nMultiplies (or “scales”) the amplitude of the <code>Sample</code> …\nCreate a new volume level.\nCreate a new <code>SpatialScale</code> with the same value for all 3 …\nCreate a new <code>SpatialScale</code> with the same value for <code>x</code> and <code>y</code>, …\nMakes the sound pausable.\nPauses playback of this sink.\nCreate the sink in paused state. Useful for “deferred …\nCalls the <code>access</code> closure on <code>Self</code> the first time the source …\nResumes playback of a paused sink.\nThe audio prelude.\nRepeats this source forever.\nAdds a basic reverb effect.\nRight ear position relative to the <code>GlobalTransform</code>.\nReturns the rate at which the source should be played. In …\nCalls <code>saturating_add</code> on the sample.\nChanges the speed of the sound.\nChanges the volume of the sound.\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nImmediately skips a certain duration of this source.\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nEnables spatial audio for this source.\nOptional scale factor applied to the positions of this …\nGets the speed of the sound.\nChanges the play speed of the sound. Does not adjust the …\nSpeed to play at.\nStops the sink.\nMakes the sound stoppable.\nMixes this sound fading out with another sound fading in …\nTakes a certain duration of this source and then stops.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nConvert <code>self</code> to any type that implements <code>FromSample&lt;Self&gt;</code>.\nConverts <code>self</code> to the equivalent <code>Sample</code> in the associated …\nReturns the total duration of this source, if known.\nStart tracking the elapsed duration since the start of the …\nAttempts to seek to a given position in the current source.\nGets the volume of the sound.\nVolume to play at.\nThe global volume of all audio.\nReturns the value corresponding to the absence of sound.\nBundle for playing a standard bevy audio asset\nA component for playing a sound.\nUsed to control audio during playback.\nCommon interactions with an audio sink.\nA source of audio data\nBundle for playing a sound.\nA type implementing this trait can be converted to a …\nThe type of the iterator of the audio samples, which …\nThe type of the audio samples. Usually a <code>u16</code>, <code>i16</code> or <code>f32</code>, …\nUse this <code>Resource</code> to control the global volume of all …\nA source of sine wave sound\nBundle for playing a bevy note sound\nInitial settings to be used when audio starts playing.\nUsed to control spatial audio during playback.\nSettings for the listener for spatial audio sources.\nRaw data of the audio source.\nBuild and return a <code>Self::Decoder</code> of the implementing type\nDuration for which sound will be played\nReturns true if this sink has no more sounds to play.\nFrequency at which sound will be played\nIs this sink paused?\nLeft ear position relative to the <code>GlobalTransform</code>.\nThe desired playback behavior.\nPauses playback of this sink.\nCreate the sink in paused state. Useful for “deferred …\nResumes playback of a paused sink.\nRight ear position relative to the <code>GlobalTransform</code>.\nChanges the speed of the sound.\nChanges the volume of the sound.\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nInitial settings that the audio starts playing with. If …\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nAsset containing the audio data to play.\nEnables spatial audio for this source.\nOptional scale factor applied to the positions of this …\nGets the speed of the sound.\nSpeed to play at.\nStops the sink.\nGets the volume of the sound.\nVolume to play at.\nThe global volume of all audio.\nMethods for manipulating alpha values.\nA pure black color.\nInvalid character.\nAn enumerated type that can represent any of the color …\nA curve whose samples are defined by a collection of …\nRepresents a range of colors that can be linearly …\nTrait with methods for converting colors to non-color types\nTrait with methods for converting colors to packed …\nTrait for returning a grayscale color of a provided …\nError returned if a hex string could not be parsed as a …\nColor in Hue-Saturation-Lightness (HSL) color space with …\nA color in the HSL color space with alpha.\nColor in Hue-Saturation-Value (HSV) color space with alpha.\nA color in the HSV color space with alpha.\nTrait for manipulating the hue of a color.\nColor in Hue-Whiteness-Blackness (HWB) color space with …\nA color in the HWB color space with alpha.\nColor in LAB color space, with alpha\nA color in the LAB color space with alpha.\nColor in LCH color space, with alpha\nA color in the LCH color space with alpha.\nInvalid length.\nLinear RGB color with alpha.\nA color in the linear sRGB color space with alpha.\nMethods for changing the luminance of a color. Note that …\nLinear interpolation of two colors within a given color …\nColor in Oklab color space, with alpha\nA color in the Oklab color space with alpha.\nColor in Oklch color space, with alpha\nA color in the Oklch color space with alpha.\nParsing error.\nNon-linear standard RGB with alpha.\nA color in the sRGB color space with alpha.\nA pure white color.\nCIE 1931 color space, also known as XYZ, with an alpha …\nA color in the XYZ color space with alpha.\nThe a axis. [-1.5, 1.5]\nThe ‘a’ channel. [-1.0, 1.0]\nReturn a the alpha component of this color.\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nGet the color value at the given interpolation factor, …\nThe b axis. [-1.5, 1.5]\nThe ‘b’ channel. [-1.0, 1.0]\nThe blackness channel. [0.0, 1.0]\nThe blue channel. [0.0, 1.0]\nThe blue channel. [0.0, 1.0]\nThe chroma channel. [0.0, 1.5]\nThe ‘chroma’ channel. [0.0, 1.0]\nModule for calculating distance between two colors in the …\nReturn a darker version of this color. The <code>amount</code> should …\nReturns the argument unchanged.\nConvert from an f32 array\nConvert from an f32 array without the alpha value\nConvert from [u8; 4] where that makes sense (Srgba is most …\nConvert to [u8; 3] where that makes sense (Srgba is most …\nConvert from a Vec3\nConvert from a Vec4\nThe green channel. [0.0, 1.0]\nThe green channel. [0.0, 1.0]\nReturn the hue of this color [0.0, 360.0].\nThe hue channel. [0.0, 360.0]\nThe hue channel. [0.0, 360.0]\nThe hue channel. [0.0, 360.0]\nThe hue channel. [0.0, 360.0]\nThe ‘hue’ channel. [0.0, 360.0]\nCalls <code>U::from(self)</code>.\nReturn a lighter version of this color. The <code>amount</code> should …\nThe lightness channel. [0.0, 1.0]\nThe lightness channel. [0.0, 1.5]\nThe lightness channel. [0.0, 1.5]\nThe ‘lightness’ channel. [0.0, 1.0]\nThe ‘lightness’ channel. [0.0, 1.0]\nReturn the luminance of this color (0.0 - 1.0).\nLinearly interpolate between this and another color, by …\nCreate a new <code>ColorCurve</code> from a collection of mixable …\nColor palettes consisting of collections of const colors.\nThe color prelude.\nThe red channel. [0.0, 1.0]\nThe red channel. [0.0, 1.0]\nThe saturation channel. [0.0, 1.0]\nThe saturation channel. [0.0, 1.0]\nSets the alpha component of this color.\nSets the hue of this color.\nConvert to an f32 array\nConvert to an f32 array without the alpha value\nConvert to [u8; 4] where that makes sense (Srgba is most …\nConvert to [u8; 3] where that makes sense (Srgba is most …\nConvert to a Vec3\nConvert to a Vec4\nThe value channel. [0.0, 1.0]\nThe whiteness channel. [0.0, 1.0]\nReturn a new version of this color with the given alpha …\nReturn a new version of this color with the hue channel …\nReturn a new version of this color with the given …\nThe x-axis. [0.0, 1.0]\nThe y-axis, intended to represent luminance. [0.0, 1.0]\nThe z-axis. [0.0, 1.0]\nCalculate the distance between this and another color as …\nDistance from <code>self</code> to <code>other</code>.\nDistance squared from <code>self</code> to <code>other</code>.\nNamed colors from the CSS1 specification, also known as …\nExtended colors from the CSS4 specification, Also known as …\nColors from Tailwind CSS (MIT License). Grouped by hue …\nMethods for manipulating alpha values.\nA pure black color.\nInvalid character.\nAn enumerated type that can represent any of the color …\nTrait with methods for converting colors to non-color types\nTrait with methods for converting colors to packed …\nTrait for returning a grayscale color of a provided …\nError returned if a hex string could not be parsed as a …\nColor in Hue-Saturation-Lightness (HSL) color space with …\nA color in the HSL color space with alpha.\nColor in Hue-Saturation-Value (HSV) color space with alpha.\nA color in the HSV color space with alpha.\nTrait for manipulating the hue of a color.\nColor in Hue-Whiteness-Blackness (HWB) color space with …\nA color in the HWB color space with alpha.\nColor in LAB color space, with alpha\nA color in the LAB color space with alpha.\nColor in LCH color space, with alpha\nA color in the LCH color space with alpha.\nInvalid length.\nLinear RGB color with alpha.\nA color in the linear sRGB color space with alpha.\nMethods for changing the luminance of a color. Note that …\nLinear interpolation of two colors within a given color …\nColor in Oklab color space, with alpha\nA color in the Oklab color space with alpha.\nColor in Oklch color space, with alpha\nA color in the Oklch color space with alpha.\nParsing error.\nNon-linear standard RGB with alpha.\nA color in the sRGB color space with alpha.\nA pure white color.\nCIE 1931 color space, also known as XYZ, with an alpha …\nA color in the XYZ color space with alpha.\nThe a axis. [-1.5, 1.5]\nThe ‘a’ channel. [-1.0, 1.0]\nReturn a the alpha component of this color.\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe alpha channel. [0.0, 1.0]\nThe b axis. [-1.5, 1.5]\nThe ‘b’ channel. [-1.0, 1.0]\nThe blackness channel. [0.0, 1.0]\nThe blue channel. [0.0, 1.0]\nThe blue channel. [0.0, 1.0]\nThe chroma channel. [0.0, 1.5]\nThe ‘chroma’ channel. [0.0, 1.0]\nReturn a darker version of this color. The <code>amount</code> should …\nConvert from an f32 array\nConvert from an f32 array without the alpha value\nConvert from [u8; 4] where that makes sense (Srgba is most …\nConvert to [u8; 3] where that makes sense (Srgba is most …\nConvert from a Vec3\nConvert from a Vec4\nThe green channel. [0.0, 1.0]\nThe green channel. [0.0, 1.0]\nReturn the hue of this color [0.0, 360.0].\nThe hue channel. [0.0, 360.0]\nThe hue channel. [0.0, 360.0]\nThe hue channel. [0.0, 360.0]\nThe hue channel. [0.0, 360.0]\nThe ‘hue’ channel. [0.0, 360.0]\nReturn a lighter version of this color. The <code>amount</code> should …\nThe lightness channel. [0.0, 1.0]\nThe lightness channel. [0.0, 1.5]\nThe lightness channel. [0.0, 1.5]\nThe ‘lightness’ channel. [0.0, 1.0]\nThe ‘lightness’ channel. [0.0, 1.0]\nReturn the luminance of this color (0.0 - 1.0).\nLinearly interpolate between this and another color, by …\nThe red channel. [0.0, 1.0]\nThe red channel. [0.0, 1.0]\nThe saturation channel. [0.0, 1.0]\nThe saturation channel. [0.0, 1.0]\nSets the alpha component of this color.\nSets the hue of this color.\nConvert to an f32 array\nConvert to an f32 array without the alpha value\nConvert to [u8; 4] where that makes sense (Srgba is most …\nConvert to [u8; 3] where that makes sense (Srgba is most …\nConvert to a Vec3\nConvert to a Vec4\nThe value channel. [0.0, 1.0]\nThe whiteness channel. [0.0, 1.0]\nReturn a new version of this color with the given alpha …\nReturn a new version of this color with the hue channel …\nReturn a new version of this color with the given …\nThe x-axis. [0.0, 1.0]\nThe y-axis, intended to represent luminance. [0.0, 1.0]\nThe z-axis. [0.0, 1.0]\nMaintains a count of frames rendered since the start of …\nAdds frame counting functionality to Apps.\nComponent used to identify an entity. Stores a hash for …\nConvenient query for giving a human friendly name to an …\nAutomatically generated <code>WorldQuery</code> item type for …\nA dummy type that is <code>!Send</code>, to force systems to run on the …\nHelper for configuring and creating the default task …\nSetup of default task pools: <code>AsyncComputeTaskPool</code>, …\nDefines a simple way to determine how many threads to use …\nRegistration of default types to the <code>TypeRegistry</code> resource.\nUsed to determine number of async compute threads to …\nUsed to determine number of compute threads to allocate\nThe unique identifier of the entity as a fallback.\nThe unique identifier of the entity as a fallback.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to determine number of IO threads to allocate\nUnder no circumstance use more than this many threads for …\nIf the number of physical cores is greater than …\nForce using at least this many threads\nIf the number of physical cores is less than …\nA <code>Name</code> that the entity might have that is displayed if …\nA <code>Name</code> that the entity might have that is displayed if …\nTarget using this percentage of total cores, clamped by …\nThe core prelude.\nOptions for the <code>TaskPool</code> created at application start.\nA system used to increment <code>FrameCount</code> with wrapping …\nAdds frame counting functionality to Apps.\nComponent used to identify an entity. Stores a hash for …\nConvenient query for giving a human friendly name to an …\nHelper for configuring and creating the default task …\nSetup of default task pools: <code>AsyncComputeTaskPool</code>, …\nRegistration of default types to the <code>TypeRegistry</code> resource.\nUsed to determine number of async compute threads to …\nUsed to determine number of compute threads to allocate\nThe unique identifier of the entity as a fallback.\nUsed to determine number of IO threads to allocate\nIf the number of physical cores is greater than …\nIf the number of physical cores is less than …\nA <code>Name</code> that the entity might have that is displayed if …\nOptions for the <code>TaskPool</code> created at application start.\nAdds a skybox to a 3D camera, based on a cubemap texture.\nScale factor applied to the skybox image. After applying …\nDepth of field, a postprocessing effect that simulates …\nExperimental features that are not yet finished. Please …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer-object, per-pixel motion blur.\nOrder Independent Transparency (OIT) for 3d rendering. See …\nMiscellaneous built-in postprocessing effects.\nThe core pipeline prelude.\nRun a prepass before the main pass to generate depth, …\nView space rotation applied to the skybox cubemap. This is …\nSubpixel morphological antialiasing (SMAA).\nComponent that enables auto exposure for an HDR-enabled 2d …\nAn auto exposure compensation curve. This curve is used to …\nVarious errors that can occur when constructing an …\nPlugin for the auto exposure feature.\nA discontinuity was found in the curve.\nThe curve couldn’t be built in the first place.\nThe curve is not monotonically increasing on the x-axis.\nExposure compensation curve to apply after metering. The …\nExposure compensation curve to apply after metering. The …\nThe distance in F-stops from the target exposure from …\nThe distance in F-stops from the target exposure from …\nThe portion of the histogram to consider when metering.\nThe portion of the histogram to consider when metering.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild an <code>AutoExposureCompensationCurve</code> from a …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe mask to apply when metering. The mask will cover the …\nThe mask to apply when metering. The mask will cover the …\nThe range of exposure values for the histogram.\nThe range of exposure values for the histogram.\nThe speed at which the exposure adapts from dark to bright …\nThe speed at which the exposure adapts from dark to bright …\nThe speed at which the exposure adapts from bright to dark …\nThe speed at which the exposure adapts from bright to dark …\nAdds support for specialized “blit pipelines”, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a bloom effect to an HDR-enabled 2d or 3d camera.\nApplies a threshold filter to the input image to extract …\nThe default bloom preset.\nA preset that’s similar to how older games did bloom.\nA preset that applies a very strong bloom, and blurs the …\nControls whether bloom textures are blended between or …\nControls whether bloom textures are blended between or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nTightens how much the light scatters (default: 1.0).\nTightens how much the light scatters (default: 1.0).\nControls the baseline of how much the image is scattered …\nControls the baseline of how much the image is scattered …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow frequency contribution boost. Controls how much more …\nLow frequency contribution boost. Controls how much more …\nLow frequency contribution boost curve. Controls the …\nLow frequency contribution boost curve. Controls the …\nMaximum size of each dimension for the largest mipchain …\nMaximum size of each dimension for the largest mipchain …\nControls the threshold filter used for extracting the …\nControls the threshold filter used for extracting the …\nBaseline of the quadratic threshold curve (default: 0.0).\nBaseline of the quadratic threshold curve (default: 0.0).\nControls how much to blend between the thresholded and …\nControls how much to blend between the thresholded and …\nUV offset for bloom shader. Ideally close to 2.0 / …\nUV offset for bloom shader. Ideally close to 2.0 / …\nAdds Support for Contrast Adaptive Sharpening (CAS).\nApplies a contrast adaptive sharpening (CAS) filter to the …\nWhether to try and avoid sharpening areas that are already …\nWhether to try and avoid sharpening areas that are already …\nEnable or disable sharpening.\nEnable or disable sharpening.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdjusts sharpening strength. Higher values increase the …\nAdjusts sharpening strength. Higher values increase the …\nAlpha mask 2D <code>BinnedPhaseItem</code>s.\nData that must be identical in order to batch phase items …\nA 2D camera component. Enables the 2D render graph for a …\nA <code>bevy_render::render_graph::Node</code> that runs the <code>Opaque2d</code> …\nOpaque 2D <code>BinnedPhaseItem</code>s.\nData that must be identical in order to batch phase items …\nTransparent 2D <code>SortedPhaseItem</code>s.\nThe asset that this phase item is associated with.\nThe asset that this phase item is associated with.\nThe ranges of instances.\nThe ranges of instances.\nThe function used to draw.\nThe function used to draw.\nAn extra index, which is either a dynamic offset or an …\nAn extra index, which is either a dynamic offset or an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key, which determines which can be batched.\nThe key, which determines which can be batched.\nThe ID of a bind group specific to the material.\nThe ID of a bind group specific to the material.\nThe identifier of the render pipeline.\nThe identifier of the render pipeline.\nAn entity from which data will be fetched, including the …\nAn entity from which data will be fetched, including the …\nMarker component that indicates that its entity needs to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 3D camera component. Enables the main 3D render graph …\nThe camera coordinate space is right-handed x-right, y-up, …\nThe depth clear operation to perform for the main 3d pass.\nClear with a specified value. Note that 0.0 is the far …\nTrue if multisampled depth textures are supported on this …\nBetter quality. Suitable for high end GPUs. (e.g. Desktop)\nLoad from memory.\nBest performance at the cost of quality. Suitable for …\nA <code>bevy_render::render_graph::Node</code> that runs the <code>Opaque3d</code> …\nA <code>bevy_render::render_graph::Node</code> that runs the …\nA balanced option between quality and performance.\nOpaque 3D <code>BinnedPhaseItem</code>s.\nData that must be identical in order to batch phase items …\nThe quality of the screen space transmission blur effect, …\nThe highest quality, suitable for non-realtime rendering. …\nThe asset that this phase item is associated with.\nThe ranges of instances.\nThe depth clear operation to perform for the main 3d pass.\nThe texture usages for the depth texture created for the …\nThe function used to draw.\nAn extra index, which is either a dynamic offset or an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key, which determines which can be batched.\nThe lightmap, if present.\nThe ID of a bind group specific to the material.\nThe identifier of the render pipeline.\nAn entity from which data will be fetched, including the …\nThe quality of the screen space specular transmission blur …\nHow many individual steps should be performed in the …\nMarker component that indicates that its entity needs to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlpha mask phase of the 3D Deferred pass.\nOpaque phase of the 3D Deferred pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender node used by the prepass.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nThe extra texture used as the second render target for the …\nA more accurate simulation, in which circles of confusion …\nA component that enables a depth of field postprocessing …\nThe bind group shared among all invocations of the depth …\nThe layout for the bind group shared among all invocations …\nControls the appearance of the effect.\nThe node in the render graph for depth of field.\nInformation needed to specialize the pipeline …\nA key that uniquely identifies depth of field pipelines.\nA plugin that adds support for the depth of field effect …\nData about the depth of field effect that’s uploaded to …\nA faster simulation, in which out-of-focus areas are …\nBind group layouts for depth of field specific to a single …\nAlong with the focal length, controls how much objects not …\nAlong with the focal length, controls how much objects not …\nGiven the sensor height and the FOV, returns the focal …\nConfigures depth textures so that the depth of field …\nThe distance in meters to the location in focus.\nThe distance in meters to the location in focus.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes <code>DepthOfField</code> from a set of …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum diameter, in pixels, that we allow a circle of …\nThe maximum diameter, in pixels, that we allow a circle of …\nObjects are never considered to be farther away than this …\nObjects are never considered to be farther away than this …\nThe appearance of the effect.\nThe appearance of the effect.\nCreates the second render target texture that the first …\nCreates depth of field bind group 1, which is shared among …\nSpecializes the depth of field pipelines specific to a …\nCreates the bind group layouts for the depth of field …\nThe height of the image sensor format in meters.\nThe height of the image sensor format in meters.\nBundle to apply temporal anti-aliasing.\nRender <code>bevy_render::render_graph::Node</code> used by temporal …\nPlugin for temporal anti-aliasing.\nComponent to apply temporal anti-aliasing to a 3D …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet to true to delete the saved temporal history (past …\nSet to true to delete the saved temporal history (past …\nuses the <code>FULLSCREEN_SHADER_HANDLE</code> to output a\nA component for enabling Fast Approximate Anti-Aliasing …\nAdds support for Fast Approximate Anti-Aliasing (FXAA)\nUse lower sensitivity for a sharper, faster, result. Use …\nTrims the algorithm from processing darks.\nEnable render passes for FXAA.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA component that enables and configures motion blur when …\nAdds <code>MotionBlur</code> and the required depth and motion vector …\nAdds support for per-object motion blur to the app. See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe quality of motion blur, corresponding to the number of …\nThe strength of motion blur from <code>0.0</code> to <code>1.0</code>.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis enables “msaa writeback” support for the <code>core_2d</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShader handle for the shader that draws the transparent …\nHolds the buffers that contain the data of all OIT layers. …\nA plugin that adds support for Order Independent …\nUsed to identify which camera will use OIT to render …\nThreshold for which fragments will be added to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nControls how many layers will be used to compute the …\nBuffer containing the index of the last layer that was …\nThe OIT layers containing depth and color for each …\nThis creates or resizes the oit buffers for each camera. …\nModule that defines the necesasry systems to resolve the …\nShader handle for the shader that sorts the OIT layers, …\nBind group for the OIT resolve pass.\nBind group layouts used for the OIT resolve pass.\nThis key is used to cache the pipeline id and to …\nPlugin needed to resolve the Order Independent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the render node used to run the resolve pass.\nDepth bind group layout.\nView bind group layout.\nThe node that executes the OIT resolve pass.\nRender label for the OIT resolve pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds colored fringes to the edges of objects in the scene.\nThe on-GPU version of the <code>ChromaticAberration</code> settings.\nThe render node that runs the built-in postprocessing …\nGPU pipeline data for the built-in postprocessing stack.\nA component attached to cameras in the render world that …\nA key that uniquely identifies a built-in postprocessing …\nA plugin that implements a built-in postprocessing stack …\nA component, part of the render world, that stores the …\nA resource, part of the render world, that stores the …\nThe lookup texture that determines the color gradient.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe size of the streaks around the edges of objects, as a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cap on the number of texture samples that will be …\nSpecializes the built-in postprocessing pipeline for each …\nGathers the built-in postprocessing settings for every …\nA 2D camera component. Enables the 2D render graph for a …\nA 3D camera component. Enables the main 3D render graph …\nThe camera coordinate space is right-handed x-right, y-up, …\nThe depth clear operation to perform for the main 3d pass.\nThe texture usages for the depth texture created for the …\nThe quality of the screen space specular transmission blur …\nHow many individual steps should be performed in the …\nMarker component that indicates that its entity needs to …\nMarker component that indicates that its entity needs to …\nAlpha mask phase of the 3D prepass.\nIf added to a <code>crate::prelude::Camera3d</code> then deferred …\nIf added to a <code>crate::prelude::Camera3d</code> then depth values …\nIf added to a <code>crate::prelude::Camera3d</code> then screen space …\nIf added to a <code>crate::prelude::Camera3d</code> then vertex world …\nOpaque phase of the 3D prepass.\nThe data used to bin each opaque 3D object in the prepass …\nTextures that are written to by the prepass.\nThe ID of the asset.\nThe deferred gbuffer generated by the deferred pass. …\nA texture that specifies the deferred lighting pass id for …\nThe depth texture generated by the prepass. Exists only if …\nThe function used to draw the mesh.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation that separates items into bins.\nThe ID of a bind group specific to the material.\nThe motion vectors texture generated by the prepass. …\nThe normals texture generated by the prepass. Exists only …\nThe ID of the GPU pipeline.\nAn entity from which Bevy fetches data common to all …\nThe size of the textures.\nRender node used by the prepass.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nSixteen search steps, 8 diagonal search steps, and corner …\nFour search steps; no diagonal or corner detection.\nEight search steps; no diagonal or corner detection.\nA component for enabling Subpixel Morphological …\nA render world component that stores the bind groups …\nValues supplied to the GPU for SMAA.\nThe GPU buffer that holds all <code>SmaaInfoUniform</code>s for all …\nA render world component that stores the offset of each …\nA unique identifier for a set of SMAA pipelines.\nThe render graph node that performs subpixel morphological …\nA render world resource that holds all render pipeline …\nAdds support for subpixel morphological antialiasing, or …\nA preset quality level for SMAA.\nStores the specialized render pipelines for SMAA.\nA render world component that holds the intermediate …\nThirty-two search steps, 8 diagonal search steps, and …\nA render world component that holds the pipeline IDs for …\nA four-channel RGBA texture that stores the output from …\nThe bind group for the second pass (blending weight …\nThe bind group for the first pass (edge detection).\nThe two-channel texture that stores the output from the …\nThe 8-bit stencil texture that records which pixels the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe bind group for the final pass (neighborhood blending).\nA predefined set of SMAA parameters: i.e. a quality level.\nA predefined set of SMAA parameters: i.e. a quality level.\nInformation about the width and height of the framebuffer.\nSame base implementation that Godot 4.0 uses for Tonemap …\nBy Troy Sobotka https://github.com/sobotka/AgX Very …\nDefault Filmic Display Transform from blender. Somewhat …\nEnables a debanding shader that applies dithering to …\nThe hue needs to be changed.\nBypass tonemapping.\nSuffers from lots hue shifting, brights don’t desaturate …\nSuffers from hue shifting. Brights don’t desaturate much …\nSaturation/contrast/gamma/gain/lift for one or more …\nBy Tomasz Stachowiak Has little hue shifting in the darks …\nOptionally enables a tonemapping shader that attempts to …\n3D LUT (look up table) textures used for tonemapping\nVarious flags describing what tonemapping needs to do.\nCurrent Bevy default. By Tomasz Stachowiak …\nThe white balance needs to be adjusted.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal system cpu usage in %\nDefault max history length for new diagnostics.\nA timeline of <code>DiagnosticMeasurement</code>s of a specific type. …\nA single measurement of a <code>Diagnostic</code>.\nUnique diagnostic path, separated by <code>/</code>.\nRecord new <code>DiagnosticMeasurement</code>’s.\nAdds core diagnostics resources to an App.\nA collection of <code>Diagnostic</code>s.\nAdds “entity count” diagnostic to an App.\nAdds “frame time” diagnostic to an App, specifically …\nAn App Plugin that logs diagnostics to the console.\nTotal system memory usage in %\nExtend <code>App</code> with new <code>register_diagnostic</code> function.\nA resource that stores diagnostic information about the …\nAdds a System Information Diagnostic, specifically …\nAdd a new <code>Diagnostic</code>.\nAdd a new value as a <code>DiagnosticMeasurement</code>.")
searchState.loadedDescShard("bevy", 1, "Add a measurement to an enabled <code>Diagnostic</code>. The …\nReturns full path, joined by <code>/</code>\nReturn the simple moving average of this diagnostic’s …\nClear the history of this diagnostic.\nReturns an iterator over path components.\nCreate a new <code>DiagnosticPath</code>. Usable in const contexts.\nReturn the duration between the oldest and most recent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>DiagnosticPath</code> from an iterator over …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturn the maximum number of elements for this diagnostic.\nGet the latest <code>DiagnosticMeasurement</code> from an enabled …\nReturn the number of elements for this diagnostic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over all <code>Diagnostic</code>s.\nReturn an iterator over all <code>Diagnostic</code>s, by mutable …\nGet the latest measurement from this diagnostic.\nCreate a new <code>DiagnosticPath</code> from the specified string.\nCreate a new diagnostic with the given path.\nRegister a new <code>Diagnostic</code> with an <code>App</code>.\nReturn the exponential moving average of this diagnostic.\nGet the latest value from this diagnostic.\nSet the maximum history length.\nThe smoothing factor used for the exponential smoothing …\nAdd a suffix to use when logging the value, can be used to …\nTypes for defining <code>Archetype</code>s, collections of entities …\nTypes for controlling batching behavior during parallel …\nTypes for handling <code>Bundle</code>s.\nTypes that detect when their internal data mutate.\nTypes for declaring and storing <code>Component</code>s.\nMacro to define a new label trait\nEntity handling types.\nEvent handling types.\nA module for the unified <code>Identifier</code> ID struct, for use as …\nProvides types used to statically intern immutable values.\nTraits used by label implementations\nTypes for creating and storing <code>Observer</code>s\nThe ECS prelude.\nContains APIs for retrieving component data from the world.\nTypes that enable reflection support.\nAlerting events when a component is removed from an entity.\nContains APIs for ordering systems and executing them on a …\nStorage layouts for ECS data.\nTools for controlling behavior in an ECS application.\nA trait for components that let you traverse the ECS.\nDefines the <code>World</code> and APIs for accessing it directly.\nMetadata for a single archetype within a <code>World</code>.\nAn opaque unique joint ID for a <code>Component</code> in an <code>Archetype</code> …\nMetadata about an <code>Entity</code> in a <code>Archetype</code>.\nThe next <code>ArchetypeId</code> in an <code>Archetypes</code> collection.\nAn opaque unique ID for a single <code>Archetype</code> within a <code>World</code>.\nMetadata about how a component is stored in an <code>Archetype</code>.\nAn opaque location within a <code>Archetype</code>.\nThe backing store of all <code>Archetype</code>s within a <code>World</code>.\nMaps a <code>ComponentId</code> to the list of <code>Archetypes</code> that contain …\nThe ID for the <code>Archetype</code> without any components.\nArchetypes and bundles form a graph. Adding or removing a …\nIndex indicating an invalid archetype row. This is meant …\nSafety:\nReturns the number of components that are stored in …\nReturns the total number of components in the archetype\nGets an iterator of all of the components in the archetype.\nChecks if the archetype contains a specific component. …\nFetches an immutable reference to the archetype’s <code>Edges</code>, …\nFetches an immutable reference to the archetype without …\nFetches the entities contained in this archetype.\nFetches the row in the <code>Table</code> where the components for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the “generation”, a handle to the current …\nFetches an immutable reference to an <code>Archetype</code> using its …\nChecks the cache for the target archetype when adding a …\nFetches the corresponding <code>ArchetypeComponentId</code> for a …\nChecks the cache for the target archetype when removing a …\nGets the type of storage where a component in the …\nChecks the cache for the target archetype when removing a …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nReturns true if any of the components in this archetype …\nThe ID of the entity.\nFetches the ID for the archetype.\nGets the index of the row.\nThe plain value of this <code>ArchetypeId</code>.\nThe first archetype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the archetype has any entities.\nReturns a read-only iterator over all archetypes.\nGets the total number of entities that belong to the …\nFetches the total number of <code>Archetype</code>s within the world.\nCreates a <code>ArchetypeRow</code>.\nCreate an <code>ArchetypeId</code> from a plain value.\nGets an iterator of all of the components stored in …\nGets an iterator of all of the components stored in <code>Table</code>s.\nFetches the archetype’s <code>Table</code> ID.\nThe row in the <code>Table</code> where the entity’s components are …\nDictates how a parallel operation chunks up large …\nThe upper and lower limits for a batch of entities.\nConfigures the number of batches to assign to each thread …\nThe number of batches per thread in the <code>ComputeTaskPool</code>. …\nCalculate the batch size according to the given thread …\nDeclares a batching strategy with a fixed batch size.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nConfigures the maximum allowed batch size of this instance.\nConfigures the minimum allowed batch size of this instance.\nCreates a new unconstrained default batching strategy.\nThe <code>Bundle</code> trait enables insertion and removal of <code>Component</code>…\nFor a specific <code>World</code>, this stores a unique value …\nStores metadata associated with a specific type of <code>Bundle</code> …\nMetadata for bundles. Stores a <code>BundleInfo</code> for each type of …\nThe parts from <code>Bundle</code> that don’t require statically …\nReturns the ID of each component contributed by this …\nReturns the ID of each component explicitly defined in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nGets the metadata associated with a specific type of …\nGets this <code>Bundle</code>’s component ids. This will be <code>None</code> if …\nGets the value identifying a specific type of bundle. …\nReturns a value identifying the associated <code>Bundle</code> type.\nReturns the index of the associated <code>Bundle</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the ID of each component …\nReturns an iterator over the ID of each component …\nReturns an iterator over the ID of each Required Component …\nRegisters components that are required by the components …\nReturns the ID of each Required Component needed by this …\nThe (arbitrarily chosen) minimum number of world tick …\nTypes that can read change detection information. This …\nTypes that implement reliable change detection.\nThe type contained within this smart pointer\nThe maximum change tick difference that won’t overflow …\nUnique mutable borrow of an entity’s component or of a …\nUnique mutable borrow of resources or an entity’s …\nUnique borrow of a non-<code>Send</code> resource.\nShared borrow of an entity’s component with access to …\nShared borrow of a <code>Resource</code>.\nUnique mutable borrow of a <code>Resource</code>.\nReturns a pointer to the value without taking ownership of …\nReturns an immutable pointer to the value without taking …\nManually bypasses change detection, allowing you to mutate …\nReturns the argument unchanged.\nReturns <code>true</code> if this value was changed or mutably …\nCalls <code>U::from(self)</code>.\nReturns the pointer to the value, marking it as changed.\nReturns <code>true</code> if this value was added after the system last …\nReturns <code>true</code> if this value was added or mutably …\nReturns the change tick recording the time this data was …\nTurn this <code>MutUntyped</code> into a <code>Mut</code> by mapping the inner <code>PtrMut</code>…\nReturns a <code>MutUntyped</code> with a smaller lifetime. This is …\nFlags this value as having been changed.\nManually sets the change tick recording the time when this …\nTransforms this <code>MutUntyped</code> into a <code>Mut&lt;T&gt;</code> with the same …\nAn archetype with the component that requires other …\nA data type that can be used to store data for an entity.\nA value describing a component or resource, which may or …\nThe type used for <code>Component</code> lifecycle hooks such as <code>on_add</code>…\n<code>World</code>-mutating functions that run as part of lifecycle …\nA value which uniquely identifies the type of a <code>Component</code> …\nA <code>SystemParam</code> that provides access to the <code>ComponentId</code> for …\nStores metadata for a type of component or resource stored …\nRecords when a component or resource was added and when it …\nStores metadata associated with each kind of <code>Component</code> in …\nThe component is already a directly required component for …\nThe maximum relative age for a change tick. The value of …\nMetadata associated with a required component. See …\nA Required Component constructor. See <code>Component</code> for …\nThe collection of metadata for components that are …\nAn error returned when the registration of a required …\nA constant indicating the storage type used for this …\nProvides fast addition and removal of components, but …\nThe storage used for a specific component type.\nProvides fast and cache-friendly iteration, but slower …\nA value that tracks when a system ran relative to other …\nInterior-mutable access to the <code>Tick</code>s for a single …\nThe tick indicating when the value was added to the world.\nTick recording the time this component or resource was …\nThe tick indicating the last time the value was modified.\nTick recording the time this component or resource was …\nReturns the <code>ComponentId</code> of the given <code>Component</code> type <code>T</code>.\nThe constructor used for the required component.\nGet the function which should be called to clean up values …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGets the value of this change tick.\nGets the <code>ComponentId</code> for the type <code>T</code>.\nType-erased equivalent of <code>Components::component_id()</code>.\nGets the metadata associated with the given component.\nGets the metadata associated with the given component.\nReturns the name associated with the given component.\nType-erased equivalent of <code>Components::resource_id()</code>.\nProvides a reference to the collection of hooks associated …\nReturns a value uniquely identifying the current component.\nReturns the index of the current component.\nThe depth of the component requirement in the requirement …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the component or resource was added after …\nReturns <code>true</code> if the component or resource was added or …\nReturns <code>true</code> if there are no components registered with …\nReturns <code>true</code> if this <code>Tick</code> occurred since the system’s …\nReturns <code>true</code> if the underlying component type can be …\nGets an iterator over all components registered with this …\nIterates the ids of all required components. This includes …\nReturns the layout used to store values of this component …\nReturns the number of components registered with this …\nReturns the name of the current component.\nReturns the name of the current component.\nCreates a new <code>ComponentId</code>.\nCreate a new <code>ComponentDescriptor</code> for the type <code>T</code>.\nCreates a new <code>Tick</code> wrapping the given value.\nCreates a new instance with the same change tick for <code>added</code> …\nCreate a new <code>ComponentDescriptor</code> for a resource.\nCreate a new <code>ComponentDescriptor</code>.\nRegister a <code>ComponentHook</code> that will be run when this …\nRegister a <code>ComponentHook</code> that will be run when this …\nRegister a <code>ComponentHook</code> that will be run when this …\nRegister a <code>ComponentHook</code> that will be run when this …\nRegisters a required component.\nRegisters the <code>Component</code> with the given ID as required if …\nRegisters a <code>Component</code> of type <code>T</code> with this instance. If a …\nRegisters a component described by <code>descriptor</code>.\nRegisters a required component.\nRegisters a non-send resource of type <code>T</code> with this instance.\nRegisters a <code>Resource</code> of type <code>T</code> with this instance. If a …\nRegisters a <code>Resource</code> described by <code>descriptor</code>.\nRetrieves the <code>RequiredComponents</code> collection, which …\nReturns the <code>ComponentId</code> of the given <code>Resource</code> type <code>T</code>.\nSets the value of this change tick.\nManually sets the change tick.\nReturns a value indicating the storage strategy for the …\nReturns a value indicating the storage strategy for the …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nAttempt to register a <code>ComponentHook</code> that will be run when …\nReturns the <code>TypeId</code> of the underlying component type. …\nReturns the <code>TypeId</code> of the underlying component type. …\nA <code>World</code>’s internal metadata store on all of its entities.\nLightweight identifier of an entity.\nA <code>BuildHasher</code> that results in a <code>EntityHasher</code>.\nA <code>HashMap</code> pre-configured to use <code>EntityHash</code> hashing.\nA <code>HashSet</code> pre-configured to use <code>EntityHash</code> hashing.\nA very fast hash that is only designed to work on …\nA location of an entity in an archetype.\nAn implementor of this trait knows how to map an <code>Entity</code> …\nOperation to map all contained <code>Entity</code> fields in a type to …\nAn <code>Iterator</code> returning a sequence of <code>Entity</code> values from\nA wrapper for <code>EntityHashMap&lt;Entity&gt;</code>, augmenting it with …\nApply an operation to all entities in a container.\nApply an operation to mutable references to all entities …\nAllocate an entity ID directly.\nAllocate a specific entity ID, overwriting its generation.\nThe ID of the <code>Archetype</code> the <code>Entity</code> belongs to.\nThe index of the <code>Entity</code> within its <code>Archetype</code>.\nClears all <code>Entity</code> from the World.\nReturns true if the <code>Entities</code> contains <code>entity</code>.\nReserves the allocated references to dead entities within …\nAllocates space for entities previously reserved with …\nSafety\nFlushes all reserved entities to an “invalid” state. …\nDestroy an entity, allowing it to be reused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the location of an <code>Entity</code>. Note: for pending …\nGets a reference to the underlying <code>EntityHashMap&lt;Entity&gt;</code>.\nGets a mutable reference to the underlying …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if any entity is currently active.\nThe count of currently allocated entities.\nUpdates all <code>Entity</code> references stored inside using …\nMap an entity to another entity\nReturns the corresponding mapped entity or reserves a new …\nCreates a new <code>SceneEntityMapper</code>, spawning a temporary base …\nEnsure at least <code>n</code> allocations can succeed without …\nReserve entity IDs concurrently.\nReserve one entity ID concurrently.\nGet the <code>Entity</code> with a given id, if it exists in this …\nThe ID of the <code>Table</code> the <code>Entity</code> belongs to.\nThe index of the <code>Entity</code> within its <code>Table</code>.\nThe count of all entities in the <code>World</code> that have ever been …\nApply an operation to all contained entities.\nApply an operation to mutable references to all contained …\nCreates an <code>SceneEntityMapper</code> from a provided <code>World</code> and …\nWithout any fixed timestep, events should always be …\nSomething that “happens” and might be read / observed …\nStores the state for an <code>EventReader</code> or <code>EventMutator</code>.\nAn <code>EventId</code> uniquely identifies an event stored in a …\nAn iterator that yields any unread events from an …\nAn iterator that yields any unread events (and their IDs) …\nAn iterator that yields any unread events from an …\nAn iterator that yields any unread events (and their IDs) …\nA parallel iterator over <code>Event</code>s.\nMutably reads events of type <code>T</code> keeping track of which …\nA parallel iterator over <code>Event</code>s.\nReads events of type <code>T</code> in order and tracks which events …\nA registry of all of the <code>Events</code> in the <code>World</code>, used by …\nSends events of type <code>T</code>.\nAn event collection that represents the events that …\nAt least one pass of the fixed update schedules has …\n<code>Iterator</code> over sent <code>EventIds</code> from a batch.\nA command to send an arbitrary <code>Event</code>, used by …\nControls whether or not the events in an <code>EventRegistry</code> …\nThe component that describes which Entity to propagate …\nWe need to wait until at least one pass of the fixed …\nChanges the batching strategy used when iterating.\nChanges the batching strategy used when iterating.\nSee <code>EventReader::clear()</code>\nRemoves an event from the world and it’s associated …\nThe event to send.\nA run condition for <code>event_update_system</code>.\nA system that calls <code>Events::update</code> on all registered <code>Events</code>…\nRuns the provided closure for each unread event in …\nRuns the provided closure for each unread event in …\nRuns the provided closure for each unread event in …\nRuns the provided closure for each unread event in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nUniquely identifies the event associated with this ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>EventReader::is_empty()</code>\nReturns <code>true</code> if there are no events remaining in this …\nReturns <code>true</code> if there are no events remaining in this …\nSee <code>EventReader::len</code>\nReturns the number of <code>Event</code>s to be iterated.\nReturns the number of <code>Event</code>s to be iterated.\nAmount of events we missed.\nCreates a new iterator that yields any <code>events</code> that have …\nCreates a new parallel iterator over <code>events</code> that have not …\nCreates a new iterator that yields any <code>events</code> that have …\nCreates a new parallel iterator over <code>events</code> that have not …\nSee <code>EventReader::par_read</code>\nSee <code>EventMutator::par_read</code>\nSee <code>EventReader::read</code>\nSee <code>EventMutator::read</code>\nSee <code>EventMutator::read_with_id</code>\nSee <code>EventReader::read_with_id</code>\nRegisters an event type to be updated in a given <code>World</code>\nUpdates all of the registered events in the World.\nShould the events be updated?\nSignals the <code>event_update_system</code> to run after <code>FixedUpdate</code> …\nIterate over only the events.\nIterate over only the events.\nA unified identifier for all entity and similar IDs.\nError types for <code>super::Identifier</code> conversions. An ID can …\nReturns the argument unchanged.\nConvert a <code>u64</code> into an <code>Identifier</code>.\nReturns the value of the high segment of the <code>Identifier</code>. …\nCalls <code>U::from(self)</code>.\nReturns the kind of <code>Identifier</code> from the high segment.\nReturns the value of the low segment of the <code>Identifier</code>.\nReturns the masked value of the high segment of the …\nConstruct a new <code>Identifier</code>. The <code>high</code> parameter is masked …\nConvert the <code>Identifier</code> into a <code>u64</code>.\nConvert a <code>u64</code> into an <code>Identifier</code>.\nAn  Error type for <code>super::Identifier</code>, mostly for providing …\nA given ID has an invalid configuration of bits for …\nA given ID has an invalid value for initializing to a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait for internable values.\nAn interned value. Will stay valid until the end of the …\nA thread-safe interner which can be used to create …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturn the <code>Interned&lt;T&gt;</code> corresponding to <code>value</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a static reference to <code>self</code>, possibly leaking …\nCreates a new empty interner\nReturns <code>true</code> if the two references point to the same value.\nFeeds the reference to the hasher.\nA pointer type that uniquely owns a heap allocation of …\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn object safe version of <code>Hash</code>. This trait is …\nReturns a reference to the underlying allocator.\nCasts the type to <code>dyn Any</code>.\nCasts the type to <code>dyn Any</code>.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given <code>Hasher</code>.\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nReturns the argument unchanged.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a reference.\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a vector into a boxed slice.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nConverts the boxed slice into a boxed array.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nCollection of <code>ObserverRunner</code> for <code>Observer</code> registered to a …\nCollection of <code>ObserverRunner</code> for <code>Observer</code> registered to a …\nEmit a trigger for a dynamic component id. This is unsafe …\nAn <code>Observer</code> system. Add this <code>Component</code> to an <code>Entity</code> to …\nA description of what an <code>Observer</code> observes.\nType for function that is run when an observer is …\nContains <code>Observer</code> information. This defines how a given …\nEvent trigger metadata for a given <code>Observer</code>,\nMetadata for observers. Stores a cache mapping trigger ids …\nType containing triggered <code>Event</code> information for a given …\nA <code>Command</code> that emits a given trigger for a given set of …\nRepresents a collection of targets for a specific <code>Trigger</code> …\nThe components the trigger should target.\nReturns the components that the trigger targeted.\nThe entities the trigger should target.\nThe entity the trigger targeted.\nThe event to trigger.\nThe <code>Event</code> the trigger targeted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the event type of the resulting trigger, used for …\nThe <code>Entity</code> of the observer handling the trigger.\nThe targets to trigger the event for.\nObserve the given <code>ComponentId</code> list. This will cause the …\nAdd the given <code>components</code> to the descriptor.\nObserve the given <code>Entity</code> list. This will cause the <code>Observer</code>…\nAdd the given <code>entities</code> to the descriptor.\nObserve the given <code>event</code>. This will cause the <code>Observer</code> to …\nObserve the given event list. This will cause the <code>Observer</code> …\nAdd the given <code>events</code> to the descriptor.\nA filter on a component that only retains results the …\nThe <code>AnyOf</code> query parameter fetches entities with any of the …\nA <code>Resource</code> storing <code>TypeRegistry</code> for type registrations …\nThe <code>Bundle</code> trait enables insertion and removal of <code>Component</code>…\nA filter on a component that only retains results the …\nA <code>World</code> mutation.\nA <code>Command</code> queue to perform structural changes to the <code>World</code>.\nA data type that can be used to store data for an entity.\nA system that determines if one or more scheduled systems …\nA <code>SystemParam</code> that stores a buffer which gets applied to …\nTypes that can read change detection information. This …\nTypes that implement reliable change detection.\nLightweight identifier of an entity.\nA <code>Command</code> which gets executed for a given <code>Entity</code>.\nA list of commands that will be run to modify an entity.\nAn implementor of this trait knows how to map an <code>Entity</code> …\nProvides mutable access to a single entity and all of its …\nA read-only reference to a particular <code>Entity</code> and all of …\nA mutable reference to a particular <code>Entity</code>, and the entire …\nSomething that “happens” and might be read / observed …\nMutably reads events of type <code>T</code> keeping track of which …\nReads events of type <code>T</code> in order and tracks which events …\nSends events of type <code>T</code>.\nAn event collection that represents the events that …\nProvides read-only access to a set of <code>Resource</code>s defined by …\nProvides mutable access to a set of <code>Resource</code>s defined by …\nCreates an instance of the type this trait is implemented …\nReturns a bool that describes if an entity has the …\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives an …\nThe input type of this system. See <code>System::In</code>.\nThe system’s input.\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives a …\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives a …\nThe type contained within this smart pointer\nThe inner input type that is passed to functions that run …\nConversion trait to turn something into a <code>System</code>.\nTypes that can convert into a <code>SystemConfigs</code>.\nTypes that can be converted into a <code>SystemSet</code>.\nTypes that can convert into a <code>SystemSetConfigs</code>.\nA system local <code>SystemParam</code>.\nUnique mutable borrow of an entity’s component or of a …\nShared borrow of a non-<code>Send</code> resource.\nUnique borrow of a non-<code>Send</code> resource.\nAn <code>Observer</code> system. Add this <code>Component</code> to an <code>Entity</code> to …\nTrigger emitted when a component is added to an entity. …\nTrigger emitted when a component is inserted onto an …\nTrigger emitted when a component is removed from an …\nTrigger emitted when a component is replaced on an entity. …\nA filter that tests if any of the given filters apply.\nThe return type of this system. See <code>System::Out</code>.\nThe system’s output.\nAn alternative to <code>Commands</code> that can be used in parallel …\nThe wrapper input type that is defined as the first …\nThe <code>SystemParam</code>/s used by this system to access the <code>World</code>.\nA collection of potentially conflicting <code>SystemParam</code>s …\nSystem parameter that works very much like <code>Query</code> except it …\nSystem parameter that provides selective access to the …\nBuilder struct to create <code>QueryState</code> instances at runtime.\nProvides scoped access to a <code>World</code> state according to a …\n<code>System</code> types that do not modify the <code>World</code> when run. This …\nShared borrow of an entity’s component with access to …\nA struct used to operate on reflected <code>Component</code> trait of a …\nA struct used to operate on the reflected <code>FromWorld</code> trait …\nA struct used to operate on reflected <code>Resource</code> of a type.\nA <code>SystemParam</code> that yields entities that had their <code>T</code> …\nShared borrow of a <code>Resource</code>.\nUnique mutable borrow of a <code>Resource</code>.\nA type that can be inserted into a <code>World</code> as a singleton.\nA constant indicating the storage type used for this …\nA collection of systems, and the metadata and executor …\nResource that stores <code>Schedule</code>s mapped to <code>ScheduleLabel</code>s …\nThe type of <code>SystemSet</code> this instance converts into.\nSystem parameter that provides access to single entity’s …\nAn ECS system that can be added to a <code>Schedule</code>\nThe type of <code>System</code> that this instance converts into.\nShorthand way to get the <code>System::In</code> for a <code>System</code> as a …\nTrait for types that can be used as input to <code>System</code>s.\nA builder that can create a <code>SystemParam</code>.\nA trait implemented for all functions that can be used as …\nTypes that identify logical groups of systems.\nDerive macro generating an impl of the trait <code>SystemSet</code>.\nThe component that describes which Entity to propagate …\nType containing triggered <code>Event</code> information for a given …\nFilter that selects entities with a component <code>T</code>.\nFilter that selects entities without a component <code>T</code>.\nStores and exposes operations on entities, components, …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nExecutes this command for the given <code>Entity</code>.\nApplies this command, causing it to mutate the provided …\nInstructs the executor to call <code>System::apply_deferred</code> on …\nApplies any <code>Deferred</code> system parameters (or other system …\nReturns the system’s archetype component <code>Access</code>.\nCasts this value to a form where it can be compared with …\nRegisters any <code>World</code> access used by this <code>SystemParam</code> and …\nManually bypasses change detection, allowing you to mutate …\nChecks any <code>Tick</code>s stored on this system and wraps their …\nReturns the system’s component <code>Access</code>.\nGenerates a <code>Condition</code> that returns true when the passed …\nGenerates a <code>Condition</code> that returns true when the result of …\nClones this <code>SystemSet</code>.\nFeeds this value into the given <code>Hasher</code>.\nCreates <code>Self</code> using data from the given <code>World</code>.\nGets this <code>Bundle</code>’s component ids. This will be <code>None</code> if …\nGets the tick indicating the last time this system ran.\nReturns true if system has deferred buffers.\nList of <code>ComponentId</code>s to ignore when reporting system order …\nInitialize the system.\nConvert into a <code>SystemConfigs</code>.\nTurns this value into its corresponding <code>System</code>.\nConverts this instance to its associated <code>SystemSet</code> type.\nReturns <code>true</code> if this value was added after the system last …\nReturns <code>true</code> if this value was added or mutably …\nReturns true if the system must be run exclusively.\nReturns true if the system is <code>Send</code>.\nReturns the change tick recording the time this data was …\nMap an entity to another entity\nReturns the system’s name.\nGenerates a <code>Condition</code> that inverses the result of passed …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nEnqueues any <code>Deferred</code> system parameters (or other system …\nRegisters components that are required by the components …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nExecutes this system once. See <code>System::run</code> or …\nA <code>Condition</code>-satisfying system that returns <code>true</code> on the …\nRuns the system with the given input in the world. Unlike …\nFlags this value as having been changed.\nManually sets the change tick recording the time when this …\nOverwrites the tick indicating the last time this system …\nUpdate the system’s archetype component <code>Access</code>.\nValidates that all parameters can be acquired and that …\nConverts a <code>SystemInput::Inner</code> into a <code>SystemInput::Param</code>.\nUsed as a type argument to <code>Ptr</code>, <code>PtrMut</code> and <code>OwningPtr</code> to …\nA newtype around <code>NonNull</code> that only allows conversion to …\nTrait that is only implemented for <code>Aligned</code> and <code>Unaligned</code> …\nType-erased Box-like pointer to some unknown type chosen …\nType-erased borrow of some unknown type chosen when …\nType-erased mutable borrow of some unknown type chosen …\nConceptually equivalent to <code>&amp;&#39;a [T]</code> but with length …\nUsed as a type argument to <code>Ptr</code>, <code>PtrMut</code> and <code>OwningPtr</code> to …\nExtension trait for helper methods on <code>UnsafeCell</code>\nGets a mutable pointer from this owned pointer.\nGets the underlying pointer, erasing the associated …\nGets the underlying pointer, erasing the associated …\nGets the underlying pointer, erasing the associated …\nReturns a shared reference to the value.\nGets an immutable reference from this mutable reference\nGets an immutable pointer from this owned pointer.\nTransforms this <code>Ptr</code> into an <code>PtrMut</code>\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer (convenience for …\nCalculates the offset from a pointer. As the pointer is …\nCalculates the offset from a pointer. As the pointer is …\nCalculates the offset from a pointer. As the pointer is …\nCreates a dangling pointer with specified alignment. See …\nSafety\nTransforms this <code>Ptr&lt;T&gt;</code> into a <code>&amp;T</code> with the same lifetime\nSafety\nTransforms this <code>PtrMut&lt;T&gt;</code> into a <code>&amp;mut T</code> with the same …\nConsumes the <code>OwningPtr</code> to drop the underlying data of type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndexes the slice without doing bounds checks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes a value and creates an <code>OwningPtr</code> to it while …\nCreates a new <code>ConstNonNull</code> if <code>ptr</code> is non-null.\nCreates a new instance from a raw pointer.\nCreates a new instance from a raw pointer.\nCreates a new instance from a raw pointer.\nCreates a new <code>ConstNonNull</code>.\nTransforms this <code>PtrMut</code> into an <code>OwningPtr</code>\nReturns a copy of the contained value.\nConsumes the <code>OwningPtr</code> to obtain ownership of the …\nConsumes the <code>OwningPtr</code> to obtain ownership of the …\nGets a <code>PtrMut</code> from this with a smaller lifetime.\nRemoves the alignment requirement of this pointer\nRemoves the alignment requirement of this pointer\nRemoves the alignment requirement of this pointer\nTracks read and write access to specific elements in a …\nRecords how two accesses conflict with each other\nA filter on a component that only retains results the …\nThe <code>Entity</code> was requested mutably more than once.\nConflict is for all indices\nThe <code>AnyOf</code> query parameter fetches entities with any of the …\nA marker trait to indicate that the filter works at an …\nA filter on a component that only retains results the …\nPer archetype/table state used by this <code>WorldQuery</code> to fetch …\nAn <code>Access</code> that has been filtered to include and exclude …\nA collection of <code>FilteredAccess</code> instances.\nReturns a bool that describes if an entity has the …\nReturns true if (and only if) this Filter relies strictly …\nReturns true if (and only if) every table of every …\nThere is a conflict for a subset of indices\nThe item returned by this <code>WorldQuery</code> For <code>QueryData</code> this …\nMultiple entities fit the query.\nNo entity fits the query.\nThe given <code>Entity</code> does not exist.\nA filter that tests if any of the given filters apply.\nBuilder struct to create <code>QueryState</code> instances at runtime.\nAn iterator over <code>K</code>-sized combinations of query items …\nTypes that can be fetched from a <code>World</code> using a <code>Query</code>.\nImplement <code>QueryData</code> to use a struct as a data parameter in …\nThe given <code>Entity</code>’s components do not match the query.\nAn error that occurs when retrieving a specific <code>Entity</code>’s …\nTypes that filter the results of a <code>Query</code>.\nImplement <code>QueryFilter</code> to use a struct as a filter …\nThe item type returned when a <code>WorldQuery</code> is iterated over\nAn <code>Iterator</code> over query results of a <code>Query</code>.\nAn <code>Iterator</code> over the query items generated from an …\nA parallel iterator over query results of a <code>Query</code>.\nAn error that occurs when evaluating a <code>Query</code> or <code>QueryState</code> …\nAn <code>Iterator</code> over sorted query results of a <code>Query</code>.\nProvides scoped access to a <code>World</code> state according to a …\nThe read-only variant of the item type returned when a …\nThe <code>WorldQuery::Fetch</code> type for <code>&amp; T</code>.\nThe read-only variant of this <code>QueryData</code>, which satisfies …\nA <code>QueryData</code> that is read only.\nState used to construct a <code>Self::Fetch</code>. This will be cached …\nFilter that selects entities with a component <code>T</code>.\nFilter that selects entities without a component <code>T</code>.\nTypes that can be used as parameters in a <code>Query</code>. Types …\nThe <code>WorldQuery::Fetch</code> type for <code>&amp;mut T</code>.\nReturns a reference to the underlying unfiltered access.\nReturns a mutable reference to the underlying unfiltered …\nAdds the filtered access to the set.\nAdds an archetypal (indirect) access to the component …\nAdds access to the component given by <code>index</code>.\nAdds access to the component given by <code>index</code>.\nAdds exclusive access to the component given by <code>index</code>.\nAdds exclusive access to the component given by <code>index</code>.\nAdds access to the resource given by <code>index</code>.\nAdds access to the resource given by <code>index</code>.\nAdds exclusive access to the resource given by <code>index</code>.\nAdds exclusive access to the resource given by <code>index</code>.\nAdds a <code>With</code> filter: corresponds to a conjunction (AND) …\nAdds a <code>Without</code> filter: corresponds to a conjunction (AND) …\nAppends an array of filters: corresponds to a disjunction …\nReturns the indices of the components that this has an …\nChanges the batching strategy used when iterating.\nRemoves all accesses.\nRemoves all accesses stored in this set.\nRemoves all writes.\nReturns a reference to the unfiltered access of the entire …\nAdds all access from <code>other</code>.\nAdds all access and filters from <code>other</code>.\nAdds all of the accesses from the passed set to <code>self</code>.\nAdds all of the accesses from <code>other</code> to <code>self</code>.\nFetch <code>Self::Item</code> for either the given <code>entity</code> in the …\nGet next result from the query\nGet next combination of queried components\nGet next result from the back of the query\nReturns true if the provided <code>Entity</code> and <code>TableRow</code> should be …\nRuns <code>func</code> on each query result in parallel.\nRuns <code>func</code> on each query result in parallel on a value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a vector of elements that the access and <code>other</code> …\nReturns a vector of elements that this and <code>other</code> cannot …\nReturns a vector of elements that this set and <code>other</code> …\nReturns a vector of elements that this set and <code>other</code> …\nAttempts to initialize a <code>State</code> for this <code>WorldQuery</code> type …\nReturns <code>true</code> if this can access any component.\nReturns <code>true</code> if this accesses any component mutably.\nReturns <code>true</code> if this can access any resource.\nReturns <code>true</code> if this accesses any resource mutably.\nReturns true if this has an archetypal (indirect) access …\nReturns <code>true</code> if this can access the component given by …\nReturns <code>true</code> if this can exclusively access the component …\nReturns <code>true</code> if this has access to all indexed elements …\nReturns <code>true</code> if this has access to all components (i.e. …\nReturns <code>true</code> if this has access to all resources (i.e. …\nReturns <code>true</code> if this can access the resource given by <code>index</code>…\nReturns <code>true</code> if this can exclusively access the resource …\nReturns <code>true</code> if this has write access to all indexed …\nReturns <code>true</code> if this has write access to all components …\nReturns <code>true</code> if this has write access to all resources …\nCreates a new instance of this fetch.\nCreates and initializes a <code>State</code> for this <code>WorldQuery</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the access and <code>other</code> can be active at the …\nReturns <code>true</code> if this and <code>other</code> can be active at the same …\nReturns <code>true</code> if this and <code>other</code> can be active at the same …\nReturns <code>true</code> if the access and <code>other</code> can be active at the …\nReturns <code>true</code> if the access and <code>other</code> can be active at the …\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nReturns <code>true</code> if the set’s component access is a subset …\nReturns <code>true</code> if the set’s resource access is a subset of …\nReturns <code>true</code> if this query matches a set of components. …\nReturns a <code>FilteredAccess</code> which has no access and matches …\nReturns a <code>FilteredAccess</code> which has no access and matches …\nCreates an empty <code>Access</code> collection.\nSets this as having access to all indexed elements (i.e. …\nSets the underlying unfiltered access as having access to …\nMarks the set as reading all possible indices of type T.\nSets this as having access to all components (i.e. …\nSets the underlying unfiltered access as having access to …\nSets this as having access to all resources (i.e. <code>&amp;World</code>).\nCreates a new separate iterator yielding the same …\nCreates a new separate iterator yielding the same …\nRemoves both read and write access to the component given …\nRemoves write access to the component given by <code>index</code>.\nReturns the indices of the resources this has …\nReturns the indices of the resources this has access to.\nReturns the indices of the resources this has exclusive …\nSets available accesses for implementors with dynamic …\nAdjusts internal state to account for the next <code>Archetype</code>. …\nAdjusts internal state to account for the next <code>Table</code>. This …\nThis function manually implements subtyping for the query …\nThis function manually implements subtyping for the query …\nSorts all query items into a new iterator, using the query …\nSorts all query items into a new iterator with a …\nSort all query items into a new iterator with a key …\nSorts all query items into a new iterator with a key …\nSorts all query items into a new iterator, using the query …\nSorts all query items into a new iterator with a …\nSorts all query items into a new iterator with a key …\nAdds any component accesses used by this <code>WorldQuery</code> to …\nReturns the indices of the elements that this access …\nReturns the indices of the elements that this access …\nSets this as having mutable access to all indexed elements …\nSets the underlying unfiltered access as having mutable …\nMarks the set as writing all T.\nSets this as having mutable access to all components (i.e. …\nSets the underlying unfiltered access as having mutable …\nSets this as having mutable access to all resources (i.e. …\nA <code>Resource</code> storing <code>TypeRegistry</code> for type registrations …\nA struct used to operate on reflected <code>Bundle</code> trait of a …\nThe raw function pointers needed to make up a <code>ReflectBundle</code>…\nAn extension trait for <code>EntityCommands</code> for reflection …\nA struct used to operate on reflected <code>Component</code> trait of a …\nThe raw function pointers needed to make up a …\nA struct used to operate on the reflected <code>FromWorld</code> trait …\nThe raw function pointers needed to make up a …\nFor a specific type of value, this maps any fields with …\nA struct used to operate on reflected <code>Resource</code> of a type.\nThe raw function pointers needed to make up a …\nFor a reflected value, apply an operation to all contained …\nFor a reflected value, apply an operation to mutable …\nUses reflection to set the value of this <code>Bundle</code> type in …\nFunction pointer implementing <code>ReflectBundle::apply</code>.\nFunction pointer implementing <code>ReflectComponent::apply()</code>.\nFunction pointer implementing <code>ReflectResource::apply()</code>.\nUses reflection to set the value of this <code>Bundle</code> type in …\nFunction pointer implementing …\nFunction pointer implementing …\nFunction pointer implementing …\nFunction pointer implementing <code>ReflectComponent::contains()</code>.\nFunction pointer implementing <code>ReflectComponent::copy()</code>.\nFunction pointer implementing <code>ReflectResource::copy()</code>.\nThe underlying function pointers implementing methods on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>T</code> from a <code>&amp;dyn PartialReflect</code>.\nFunction pointer implementing …\nInsert a reflected <code>Bundle</code> into the entity like <code>insert()</code>.\nFunction pointer implementing <code>ReflectBundle::insert</code>.\nFunction pointer implementing <code>ReflectComponent::insert()</code>.\nFunction pointer implementing <code>ReflectResource::insert()</code>.\nAdds the given boxed reflect component or bundle to the …\nSame as <code>insert_reflect</code>, but using the <code>T</code> resource as type …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA general method for remapping entities in a reflected …\nCreate a custom implementation of <code>ReflectBundle</code>.\nGet the default set of <code>ReflectBundleFns</code> for a specific …\nGet the default set of <code>ReflectComponentFns</code> for a specific …\nGet the default set of <code>ReflectFromWorldFns</code> for a specific …\nGet the default set of <code>ReflectResourceFns</code> for a specific …\nFunction pointer implementing <code>ReflectComponent::reflect()</code>.\nFunction pointer implementing <code>ReflectResource::reflect()</code>.\nFunction pointer implementing …\nFunction pointer implementing …\nFunction pointer implementing …\nFunction pointer implementing …\nFunction pointer implementing …\nRemoves this <code>Bundle</code> type from the entity. Does nothing if …\nFunction pointer implementing <code>ReflectBundle::remove</code>.\nFunction pointer implementing <code>ReflectComponent::remove()</code>.\nFunction pointer implementing <code>ReflectResource::remove()</code>.\nRemoves from the entity the component or bundle with the …\nSame as <code>remove_reflect</code>, but using the <code>T</code> resource as type …\nRemoves all components in the <code>Bundle</code> from the entity and …\nFunction pointer implementing <code>ReflectBundle::take</code>.\nA general method for applying an operation to all entities …\nA general method for applying an operation to all entities …\nWrapper around <code>Entity</code> for <code>RemovedComponents</code>. Internally, …\nStores the <code>RemovedComponents</code> event buffers for all types …\nWrapper around a <code>EventCursor&lt;RemovedComponentEntity&gt;</code> so …\nA <code>SystemParam</code> that yields entities that had their <code>T</code> …\nIterator over entities that had a specific component …\nIterator over entities that had a specific component …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGets the event storage for a given component.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over components and their entity …\nCreates an empty storage buffer for component removal …\nSends a removal event for the specified component.\nFor each type of component, swaps the event buffers and …\nSystems with conflicting access have indeterminate run …\nCombines the outputs of two systems using the <code>&amp;&amp;</code> operator.\nA <code>SystemSet</code> implicitly created when using …\nA type-erased run condition stored in a <code>Box</code>.\nChain systems into dependencies\nA system that determines if one or more scheduled systems …\nConfiguration for a tuple of nested <code>Configs</code> instances.\nConfiguration for a tuple of nested <code>Configs</code> instances.\nConfiguration for a tuple of nested <code>Configs</code> instances.\nTried to order a system (set) relative to a system set it …\nA directed acyclic graph structure.\nThe dependency graph contains a cycle.\nA system (set) has been told to run before itself.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nOccurrences are logged and result in errors.\nSpecifies how a <code>Schedule</code> will be run.\nThe hierarchy of system sets contains a cycle.\nA system set contains itself.\nThe hierarchy of system sets contains redundant edges.\nOccurrences are completely ignored.\nA shorthand for <code>Interned&lt;dyn ScheduleLabel&gt;</code>.\nA shorthand for <code>Interned&lt;dyn SystemSet&gt;</code>.\nTypes that can convert into a <code>SystemConfigs</code>.\nTypes that can be converted into a <code>SystemSet</code>.\nTypes that can convert into a <code>SystemSetConfigs</code>.\nSpecifies how schedule construction should respond to …\nNew-typed <code>ThreadExecutor</code> <code>Resource</code> that is used to run …\nRuns the schedule using a thread pool. Non-conflicting …\nRuns the schedule using a thread pool. Non-conflicting …\nCombines and inverts the outputs of two systems using the …\nNodes are allowed to run in any order.\nStores configuration for a single generic node (a system …\nConfiguration for a single node.\nConfiguration for a single node.\nConfiguration for a single node.\nA collections of generic <code>NodeConfig</code>s.\nUnique identifier for a system or system set stored in a …\nCombines and inverts the outputs of two systems using the …\nInvokes <code>Not</code> with the output of another system.\nCombines the outputs of two systems using the <code>||</code> operator.\nA collection of systems, and the metadata and executor …\nCategory of errors encountered during schedule …\nSpecifies miscellaneous settings for schedule construction.\nMetadata for a <code>Schedule</code>.\nA strongly-typed class of labels used to identify a …\nDerive macro generating an impl of the trait <code>ScheduleLabel</code>.\nError to denote that <code>Schedule::initialize</code> or <code>Schedule::run</code> …\nResource that stores <code>Schedule</code>s mapped to <code>ScheduleLabel</code>s …\nIdentifier for a system set.\nThe type of <code>SystemSet</code> this instance converts into.\nTried to order system sets that share systems.\nLike <code>SingleThreaded</code> but calls <code>apply_deferred</code> immediately …\nA variant of <code>SingleThreadedExecutor</code> that calls …\nRuns the schedule using a single thread.\nRuns the schedule using a single thread.\nResource for controlling system stepping behavior\nIdentifier for a system.\nStores configuration for a single system.\nA collection of <code>SystemConfig</code>.\nHolds systems and conditions of a <code>Schedule</code> sorted in …\nTypes that identify logical groups of systems.\nDerive macro generating an impl of the trait <code>SystemSet</code>.\nA <code>SystemSet</code> with scheduling metadata.\nA collection of <code>SystemSetConfig</code>.\nA <code>SystemSet</code> grouping instances of the same function.\nTried to order a system (set) relative to all instances of …\nTried to run a schedule before all of its systems have …\nOccurrences are logged only.\nCombines and inverts the outputs of two systems using the <code>^</code>…\nCombines the outputs of two systems using the <code>^</code> operator.\nRun nodes in order. If there are deferred parameters in …\nRun nodes in order. This will not add <code>apply_deferred</code> …\nEnable stepping for the provided schedule\nEnsure this system always runs when stepping is enabled\nEnsure this system instance always runs when stepping is …\nDetermines whether the presence of ambiguities (systems …\nInstructs the executor to call <code>System::apply_deferred</code> on …\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nAuto insert <code>apply_deferred</code> systems into the schedule, when …\nSystem to call denoting that a new render frame has begun\nBuild a <code>SystemSchedule</code> optimized for scheduler access from …\nA cached topological ordering of the graph.\nClear a breakpoint for the system\nclear a breakpoint for system instance\nclear a breakpoint for system instance\nClear behavior set for all systems in the provided <code>Schedule</code>\nClear any behavior set for the system\nA collection of run conditions that may be useful in any …\nReturns the list of systems that conflict with each other, …\nconvert conflicts to human readable format\nReturns <code>true</code> if the given system set is part of the graph. …\nRun all remaining systems in the stepping frame during the …\nReturn our current position within the stepping frame\nReturns the <code>Dag</code> of the dependencies in the schedule.\nDisable stepping, resume normal systems execution\nClones this <code>ScheduleLabel</code>.\nClones this <code>SystemSet</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given <code>Hasher</code>.\nFeeds this value into the given <code>Hasher</code>.\nBegin stepping at the start of the next frame\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the set at the given <code>NodeId</code>, if it exists.\nReturns the system at the given <code>NodeId</code>, if it exists.\nThe directed graph of the stored systems, connected by …\nReturns the <code>Dag</code> of the hierarchy.\nDetermines whether the presence of redundant edges in the …\nList of <code>ComponentId</code>s to ignore when reporting system order …\nAdds a new boxed system set to the systems.\nInitializes any newly-added systems and conditions by …\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a <code>SystemConfigs</code>.\nConverts this instance to its associated <code>SystemSet</code> type.\nCheck if stepping is enabled\nReturns <code>true</code> if the identified node is a system set.\nReturns <code>true</code> if the identified node is a system.\nEnsure this system never runs when stepping is enabled\nEnsure this system instance never runs when stepping is …\nCreates a new <code>multi_threaded</code> executor for use with a …\nCreates a new executor that can be used to run systems on …\nCreates a new simple executor for use in a <code>Schedule</code>. This …\nCreates a new single-threaded executor for use in a …\nCreates an empty <code>SystemSchedule</code>.\nCreates an empty <code>ScheduleGraph</code> with default settings.\nDefault build settings. See the field-level documentation …\nCreate a new instance of the <code>Stepping</code> resource.\nDisable stepping for the provided schedule\nIf set to true, report all system sets the conflicting …\nAdds a new boxed run condition to the systems.\nReturn the list of schedules with stepping enabled in the …\nReturns the set at the given <code>NodeId</code>.\nAdd a breakpoint for system\nAdd a breakpoint for system instance\nget the list of systems this schedule should skip for this …\nRun the next system during the next render frame\nReturns the system at the given <code>NodeId</code>.\nReturns an iterator over all system sets in this schedule, …\nReturns an iterator over all systems in this schedule, …\nIf set to true, node names will be shortened instead of …\nSee <code>Chain</code> for usage.\nRun conditions applied to everything in the tuple.\nConfiguration for each element of the tuple.\nSee <code>Chain</code> for usage.\nRun conditions applied to everything in the tuple.\nConfiguration for each element of the tuple.\nSee <code>Chain</code> for usage.\nRun conditions applied to everything in the tuple.\nConfiguration for each element of the tuple.\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nGenerates a <code>Condition</code> that returns true when the passed …\nGenerates a <code>Condition</code> that returns true when the result of …\nGenerates a <code>Condition</code> that inverses the result of passed …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if there …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nGenerates a <code>Condition</code>-satisfying closure that returns <code>true</code> …\nA <code>Condition</code>-satisfying system that returns <code>true</code> if the …\nA <code>Condition</code>-satisfying system that returns <code>true</code> on the …\nA type-erased contiguous container for data of a …\nA sparse data structure of <code>Component</code>s.\nThe type-erased backing storage and metadata for a single …\nThe backing store for all <code>Resource</code>s stored in the <code>World</code>.\nA data structure that blends dense and sparse storage\nRepresents something that can be stored in a <code>SparseSet</code> as …\nA collection of <code>ComponentSparseSet</code> storages, indexed by …\nThe raw data stores of a <code>World</code>\nA column-oriented structure-of-arrays based storage for …\nAn opaque unique ID for a <code>Table</code> within a <code>World</code>.\nA opaque newtype for rows in <code>Table</code>s. Specifies a single …\nA collection of <code>Table</code> storages, indexed by <code>TableId</code>\nVery similar to a normal <code>Column</code>, but with the capacities …\nGets the underlying table index from the ID.\nGets the index of the row as a <code>usize</code>.\nGets the underlying table index from the ID.\nGets the index of the row as a <code>usize</code>.\nGet the capacity of this table, in entities. Note that if …\nReturns the total number of elements the <code>SparseSet</code> can …\nClears all resources.\nClears all of the elements from the sparse set.\nClears the column, removing all values.\nGets the number of components being stored in the table.\nReturns <code>true</code> if the sparse set has a component value for …\nReturns <code>true</code> if the sparse set contains a value for <code>index</code>.\nThe <code>TableId</code> of the <code>Table</code> without any components.\nFetches a read-only slice of the entities stored within …\nGets the maximum number of entities the table can …\nGets the number of entities currently being stored in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>TableId</code>.\nCreates a <code>TableRow</code>.\nCreates a new <code>TableId</code>.\nCreates a <code>TableRow</code> from a <code>usize</code> index.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nFetches a <code>Table</code> by its <code>TableId</code>.\nGets read-only access to a resource, if it exists.\nReturns a reference to the entity’s component value.\nReturns a reference to the value for <code>index</code>.\nGets a reference to the <code>ComponentSparseSet</code> of a <code>ComponentId</code>…\nFetches a reference to the data and change detection ticks …\nGet the specific <code>added tick</code> of the component matching …\nReturns a reference to the “added” tick of the entity…\nFetches the “added” change detection tick for the …\nFetches the “added” change detection tick for the …\nGet a slice to the added <code>ticks</code> in this <code>ThinColumn</code>.\nFetches the slice to the <code>Column</code>’s “added” change …\nGet the added ticks of the column matching <code>component_id</code> as …\nGet the specific <code>change tick</code> of the component matching …\nReturns a reference to the “changed” tick of the entity…\nFetches the “changed” change detection tick for the …\nFetches the “changed” change detection tick for the …\nGet a slice to the changed <code>ticks</code> in this <code>ThinColumn</code>.\nFetches the slice to the <code>Column</code>’s “changed” change …\nGet the changed ticks of the column matching <code>component_id</code> …\nFetches a read-only reference to the <code>ThinColumn</code> for a …\nGet the component at a given <code>row</code>, if the <code>Table</code> stores …\nReturns a reference to the resource, if it exists.\nFetches a read-only reference to the data at <code>row</code>.\nFetches a mutable reference to the data at <code>row</code>.\nFetches the data pointer to the first element of the <code>Column</code>…\nGet a slice to the data stored in this <code>ThinColumn</code>.\nFetches the slice to the <code>Column</code>’s data cast to a given …\nGet the data of the column matching <code>component_id</code> as a …\nFetches a read-only reference to the data at <code>row</code>. Unlike …\nGet the drop function for some component that is stored in …\nReturns a mutable reference to the value for <code>index</code>.\nReturns a reference to the value for <code>index</code>, inserting one …\nCreates a new instance of this type with the specified …\nReturns a reference to the resource’s change ticks, if …\nReturns a reference to the “added” and “changed” …\nFetches the change detection ticks for the value at <code>row</code>.\nGet the <code>ComponentTicks</code> of the component matching …\nFetches the change detection ticks for the value at <code>row</code>. …\nReturns references to the entity’s component value and …\nChecks if the table contains a <code>ThinColumn</code> for a given …\nGets the <code>ArchetypeComponentId</code> for the resource.\nReturns an iterator visiting all keys (indices) in …\nInserts <code>value</code> at <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the <code>Table</code> is empty or not.\nReturns true if this collection contains no <code>Table</code>s\nReturns true if there are no resources stored in the <code>World</code>,\nReturns <code>true</code> if the sparse set contains no component …\nReturns <code>true</code> if the sparse set contains no elements.\nReturns true if this collection contains no …\nChecks if the column is empty. Returns <code>true</code> if there are …\nReturns true if the resource is populated.\nFetches the <code>Layout</code> for the underlying type.\nIterates through all of the tables stored within in <code>TableId</code>…\nIterate over all resources that have been initialized, …\nReturns an iterator visiting all key-value pairs in …\nAn Iterator visiting all (<code>ComponentId</code>, <code>ComponentSparseSet</code>) …\nIterates over the <code>ThinColumn</code>s of the <code>Table</code>.\nReturns an iterator visiting all key-value pairs in …\nReturns the number of <code>Table</code>s this collection contains\nThe total number of resources stored in the <code>World</code>\nReturns the number of component values in the sparse set.\nReturns the number of elements in the sparse set.\nReturns the number of <code>ComponentSparseSet</code>s this collection …\nGets the current number of elements stored in the column.\nCreates a new <code>SparseSet</code>.\nBacking storage for <code>!Send</code> resources.\nRemoves and returns the value for <code>index</code>.\nBacking storage for resources.\nGets the sparse set index corresponding to this instance.\nBacking storage for <code>SparseSet</code> components.\nBacking storage for <code>Table</code> components.\nReturns an iterator visiting all values in arbitrary order.\nReturns an iterator visiting all values mutably in …\nCreate a new <code>ThinColumn</code> with the given <code>capacity</code>.\nCreates a new <code>SparseSet</code> with a specified initial capacity.\nCustomizes the behavior of an <code>AdapterSystem</code>\nA <code>System</code> that takes the output of <code>S</code> and transforms it by …\nA convenience type alias for a boxed <code>System</code> trait object.\nA cached <code>SystemId</code> distinguished by the unique function …\nA <code>System</code> defined by combining two other systems. The …\nCustomizes the behavior of a <code>CombinatorSystem</code>.\nA <code>Command</code> queue to perform structural changes to the <code>World</code>.\nA <code>SystemParam</code> that stores a buffer which gets applied to …\nA <code>SystemParamBuilder</code> for a <code>DynSystemParam</code>. See the …\nA <code>SystemParam</code> with a type that can be configured at …\nThe <code>SystemParam::State</code> for a <code>DynSystemParam</code>.\nA <code>Command</code> which gets executed for a given <code>Entity</code>.\nA list of commands that will be run to modify an entity.\nA wrapper around <code>EntityCommands</code> with convenience methods …\nA function system that runs with exclusive <code>World</code> access.\nA parameter that can be used in an exclusive system (a …\nA trait implemented for all exclusive system functions …\nShorthand way of accessing the associated type …\nA <code>SystemParamBuilder</code> for a <code>FilteredResourcesMut</code>. See the …\nA <code>SystemParamBuilder</code> for a <code>FilteredResources</code>. See the …\nThe <code>System</code> counter part of an ordinary function.\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives an …\nThe input type for an <code>AdapterSystem</code>.\nThe input type for a <code>CombinatorSystem</code>.\nThe input type to this system. See <code>System::In</code>.\nThe input type of this system. See <code>System::In</code>.\nThe system’s input.\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives a …\nA <code>SystemInput</code> type which denotes that a <code>System</code> receives a …\nThe inner input type that is passed to functions that run …\nAn <code>IntoSystem</code> creating an instance of <code>AdapterSystem</code>.\nImplemented for systems that convert into <code>ObserverSystem</code>.\nAn <code>IntoSystem</code> creating an instance of <code>PipeSystem</code>.\nConversion trait to turn something into a <code>System</code>.\nSystem could not be run due to parameters that failed …\nSystem could not be run due to parameters that failed …\nThe item type returned when constructing this system param.\nThe item type returned when constructing this system param.\nA system local <code>SystemParam</code>.\nA <code>SystemParamBuilder</code> for a <code>Local</code>. The provided value will …\nNo warning should ever be emitted.\nShared borrow of a non-<code>Send</code> resource.\nUnique borrow of a non-<code>Send</code> resource.\nImplemented for <code>System</code>s that have a <code>Trigger</code> as the first …\nThe warning will be emitted once and status will update to …\nThe output type for an <code>AdapterSystem</code>.\nThe output type for a <code>CombinatorSystem</code>.\nThe return type of this system. See <code>System::Out</code>.\nThe return type of this system. See <code>System::Out</code>.\nThe system’s output.\nStop app with a panic.\nAn alternative to <code>Commands</code> that can be used in parallel …\nThe wrapper input type that is defined as the first …\nThe <code>ExclusiveSystemParam</code>’s defined by this system’s <code>fn</code> …\nThe <code>SystemParam</code>/s used by this system to access the <code>World</code>.\nA <code>SystemParamBuilder</code> for any <code>SystemParam</code> that uses its …\nA collection of potentially conflicting <code>SystemParam</code>s …\nA <code>SystemParamBuilder</code> for a <code>ParamSet</code>.\nState machine for emitting warnings when system params are …\nA <code>System</code> created by piping the output of the first system …\nSystem parameter that works very much like <code>Query</code> except it …\nSystem parameter that provides selective access to the …\nType returned from <code>Query::transmute_lens</code> containing the …\nA <code>SystemParamBuilder</code> for a <code>Query</code>. This takes a closure …\n<code>System</code> types that do not modify the <code>World</code> when run. This …\nA <code>SystemParam</code> that only reads a given <code>World</code>.\nA system tried to run itself recursively.\nThe <code>Command</code> type for registering one shot systems from …\nAn operation with stored systems failed.\nA system that has been removed from the registry. It …\nShared borrow of a <code>Resource</code>.\nUnique mutable borrow of a <code>Resource</code>.\nA type that can be inserted into a <code>World</code> as a singleton.\nThe <code>Command</code> type for <code>World::run_system</code>.\nThe <code>Command</code> type for running a cached one-shot system from …\nRunning system failed.\nTrait used to run a system immediately on a <code>World</code>.\nThe <code>Command</code> type for <code>World::run_system</code> or …\nA system tried to remove itself.\nSystem parameter that provides access to single entity’s …\nUsed to store data which persists across invocations of a …\nUsed to store data which persists across invocations of a …\nA helper for using <code>SystemInput</code>s in generic contexts.\nA helper for using system parameters in generic contexts\nAn ECS system that can be added to a <code>Schedule</code>\nThe type of <code>System</code> that this instance converts into.\nThe type of <code>System</code> that this instance converts into.\nTypes that can be used with <code>Deferred&lt;T&gt;</code> in systems. This …\nA <code>SystemParam</code> that reads the previous and current change …\nAn identifier for a registered system.\nMarker <code>Component</code> for identifying <code>SystemId</code> <code>Entity</code>s.\nA system was run by id, but no system with that id was …\nShorthand way to get the <code>System::In</code> for a <code>System</code> as a …\nTrait for types that can be used as input to <code>System</code>s.\nThe metadata of a <code>System</code>.\n<code>SystemParam</code> that returns the name of the system which it …\nA cached system was removed by value, but no system with …\nA parameter that can be used in a <code>System</code>.\nImplement <code>SystemParam</code> to use a struct as a parameter in a …\nA builder that can create a <code>SystemParam</code>.\nA trait implemented for all functions that can be used as …\nShorthand way of accessing the associated type …\nHolds on to persistent state required to drive <code>SystemParam</code> …\nThe <code>Command</code> type for unregistering one-shot systems from …\nWhen used in an <code>AdapterSystem</code>, this function customizes …\nModify the component <code>T</code> if it exists, using the function …\nExecutes this command for the given <code>Entity</code>.\nApplies any deferred mutations to the <code>World</code>.\nApplies all state queued up for <code>SystemParam</code> values. For …\nApplies any deferred mutations stored in this <code>SystemParam</code>…\nApplies any <code>Deferred</code> system parameters (or other system …\nReturns the system’s archetype component <code>Access</code>.\nArchetype component access that is used to determine which …\nReturns a mutable reference to the <code>Access</code> for …\nEnsure that a given function is a read-only system.\nEnsure that a given function is a system.\nEnsures that the provided system doesn’t conflict with …\nRegisters any <code>World</code> access used by this <code>SystemParam</code> and …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nCreate a <code>FunctionSystem</code> from a <code>SystemState</code>. This method …\nChecks any <code>Tick</code>s stored on this system and wraps their …\nClone the combined system. The cloned instance must be …\nWhen used in a <code>CombinatorSystem</code>, this function customizes …\nReturns the system’s component <code>Access</code>.\nReturns a reference to the <code>FilteredAccessSet</code> for …\nReturns a mutable reference to the <code>FilteredAccessSet</code> for …\nReturns the inner system param if it is the correct type. …\nReturns the inner system parameter if it is the correct …\nReturns the inner system parameter if it is the correct …\nTransforms a <code>SystemId</code> into the <code>Entity</code> that holds the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>SystemId</code> from an <code>Entity</code>. Useful when you only have …\nCreates <code>Self</code> using <code>default()</code>.\nRetrieve the <code>SystemParam</code> values. This can only be called …\nGets the tick indicating the last time this system ran.\nRetrieve the <code>SystemParam</code> values. This can only be called …\nRetrieve the mutable <code>SystemParam</code> values.  This will not …\nRetrieve the mutable <code>SystemParam</code> values.\nCreates a parameter to be passed into a <code>SystemParamFunction</code>…\nCreates a parameter to be passed into an …\nRetrieve the <code>SystemParam</code> values. This will not update …\nReturns true if system has deferred buffers.\nReturns true if the system has deferred <code>SystemParam</code>’s\nCreates a new instance of this param’s <code>State</code>.\nRegisters any <code>World</code> access used by this <code>SystemParam</code> and …\nInitialize the system.\nIs the system initialized? A system is initialized the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value of the parameter\nTurns this value into its corresponding <code>System</code>.\nTurns this value into its corresponding <code>System</code>.\nReturns <code>true</code> if the inner system param is the same as <code>T</code>.\nReturns true if the system must be run exclusively.\nReturns true if the system is <code>Send</code>.\nReturns true if the system is <code>Send</code>.\nReturns the <code>World</code> change tick seen by the system the …\nContains type aliases for built-in <code>SystemParam</code>s with …\nHelper method for adding a <code>Local</code> as a param, equivalent to …\nReturns <code>true</code> if <code>world_id</code> matches the <code>World</code> that was used …\nGets the metadata for this instance.\nReturns the system’s name.\nReturns the system’s name\nGets the name of the system.\nCreates a <code>SystemParamBuilder</code> for a <code>Query</code> that accepts a …\nCreates a new <code>DynParamBuilder</code> by wrapping a …\nCreates a <code>SystemParamBuilder</code> for a <code>FilteredResources</code> that …\nCreates a <code>SystemParamBuilder</code> for a <code>FilteredResourcesMut</code> …\nCreates a new system that combines two inner systems.\nCreates a new <code>IntoSystem</code> that pipes two inner systems.\nCreates a new system that pipes two inner systems.\nCreates a new <code>SystemState</code> with default state.\nCreates a new <code>Command</code> struct, which can be added to …\nCreates a new <code>Command</code> struct, which can be added to …\nCreates a new <code>Command</code> struct, which can be added to …\nCreates a new <code>IntoSystem</code> that uses <code>func</code> to adapt <code>system</code>, …\nCreates a new <code>System</code> that uses <code>func</code> to adapt <code>system</code>, via …\nCreates a new <code>Command</code> struct, which can be added to …\nFor the specified <code>Archetype</code>, registers the components …\nCreates a <code>SystemParamBuilder</code> for a <code>Query</code> that accepts a …\nCreates a <code>SystemParamBuilder</code> for a <code>FilteredResources</code> that …\nCreates a <code>SystemParamBuilder</code> for a <code>FilteredResourcesMut</code> …\nCreates a new <code>Command</code> struct, which can be added to …\nCreates a <code>SystemParamBuilder</code> for any <code>SystemParam</code> that uses …\nInsert <code>T::default</code> into this entity, if <code>T</code> is not already …\nInsert <code>T::from_world</code> into this entity, if <code>T</code> is not already …\nInsert <code>default</code> into this entity, if <code>T</code> is not already …\nInsert the value returned from <code>default</code> into this entity, …\nInsert <code>default</code> into this entity, if <code>T</code> is not already …\nInsert the value returned from <code>default</code> into this entity, …\nCreate a <code>Query</code> from the underlying <code>QueryState</code>.\nHelper method for adding a <code>Query</code> as a param, equivalent to …\nHelper method for adding a filtered <code>Query</code> as a param, …\nQueues any deferred mutations to be applied at the next …\nQueues any deferred mutations to be applied at the next …\nEnqueues any <code>Deferred</code> system parameters (or other system …\nHelper method for reading a <code>Resource</code> as a param, …\nHelper method for mutably accessing a <code>Resource</code> as a param, …\nExecutes this system once. See <code>System::run</code>.\nExecutes this system once. See <code>System::run</code> or …\nTries to run a system and apply its deferred parameters.\nTries to run a system with given input and apply deferred …\nRuns the system with the given input in the world. Unlike …\nMarks the system as having deferred buffers like <code>Commands</code> …\nOverwrites the tick indicating the last time this system …\nSets the name of this system.\nSets the system to be not <code>Send</code>.\nThe system removed from the storage.\nReturns the current <code>World</code> change tick seen by the system.\nEmits a warning about inaccessible system param if policy …\nUpdate the system’s archetype component <code>Access</code>.\nUpdates the state’s internal view of the <code>World</code>’s …\nUpdates the state’s internal view of the <code>world</code>’s …\nWrapper over <code>SystemParam::validate_param</code>.\nValidates that the param can be acquired by the <code>get_param</code>. …\nValidates that all parameters can be acquired and that …\nReturn this system with a new name.\nReturn this system with a new name.\nConverts a <code>SystemInput::Inner</code> into a <code>SystemInput::Param</code>.\nA shorthand for writing <code>&amp;&#39;static T</code>.\n<code>Commands</code> with <code>&#39;static</code> lifetimes.\nA <code>Query</code> with <code>&#39;static</code> lifetimes.\nA <code>Res</code> with <code>&#39;static</code> lifetimes.\nA <code>ResMut</code> with <code>&#39;static</code> lifetimes.\nA shorthand for writing <code>&amp;&#39;static mut T</code>.\nA component that can point to another entity, and which …\nReturns the next entity to visit.\nThe (arbitrarily chosen) minimum number of world tick …\nA <code>World</code> mutation.\nDensely and efficiently stores a queue of heterogenous …\nThe mutable reference type returned by …\nA <code>World</code> reference that disallows structural ECS changes. …\nTypes that can be used to fetch components from an entity …\nProvides mutable access to a single entity and all of its …\nProvides mutable access to all components of an entity, …\nA read-only reference to a particular <code>Entity</code> and all of …\nProvides read-only access to a single entity and all its …\nA mutable reference to a particular <code>Entity</code>, and the entire …\nA view into a single entity and component in a world, …\nProvides mutable access to a single entity and some of its …\nProvides read-only access to a single entity and some of …\nProvides read-only access to a set of <code>Resource</code>s defined by …\nBuilder struct to define the access for a <code>FilteredResources</code>…\nProvides mutable access to a set of <code>Resource</code>s defined by …\nBuilder struct to define the access for a …\nCreates an instance of the type this trait is implemented …\nError indicating that the filtered entity does not have …\nError indicating that the filtered entity does not have …\nUnique mutable borrow of an entity’s component or of a …\nThe mutable reference type returned by …\nThe mutable reference type returned by …\n<code>ComponentId</code> for <code>OnAdd</code>\n<code>ComponentId</code> for <code>OnInsert</code>\n<code>ComponentId</code> for <code>OnRemove</code>\n<code>ComponentId</code> for <code>OnReplace</code>\nAn occupied entry.\nA view into an occupied entry in a <code>EntityWorldMut</code>. It is …\nTrigger emitted when a component is added to an entity. …\nTrigger emitted when a component is inserted onto an …\nTrigger emitted when a component is removed from an …\nTrigger emitted when a component is replaced on an entity. …\nShared borrow of an entity’s component with access to …\nThe read-only reference type returned by …\nThe read-only reference type returned by …\nAn iterator that spawns a series of entities and returns …\nError type returned by <code>TryFrom</code> conversions from filtered …\nA vacant entry.\nA view into a vacant entry in a <code>EntityWorldMut</code>. It is part …\nStores and exposes operations on entities, components, …\nTypes that can be used to fetch <code>Entity</code> references from a …\nA unique identifier for a <code>World</code>.\nReturns a reference to the underlying <code>Access</code>.\nReturns a reference to the underlying <code>Access</code>.\nReturns a reference to the underlying <code>Access</code>.\nReturns a reference to the underlying <code>Access</code>.\nAdd accesses required to read the resource of the given …\nAdd accesses required to read the resource of the given …\nAdd accesses required to read all resources.\nAdd accesses required to read all resources.\nAdd accesses required to read the resource with the given …\nAdd accesses required to read the resource with the given …\nAdd accesses required to get mutable access to the …\nAdd accesses required to get mutable access to all …\nAdd accesses required to get mutable access to the …\nProvides in-place mutable access to an occupied entry.\nTake all commands from <code>other</code> and append them to <code>self</code>, …\nApplies this command, causing it to mutate the provided …\nExecute the queued <code>Command</code>s in the world after applying …\nReturns the archetype that the current entity belongs to.\nReturns the archetype that the current entity belongs to.\nGets read-only access to all of the entity’s components.\nGets read-only access to all of the entity’s components, …\nCreate an <code>Access</code> that represents the accesses of the …\nCreate an <code>Access</code> that represents the accesses of the …\nCreates a <code>Commands</code> instance that pushes to the world’s …\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>true</code> if the current entity has a component with …\nReturns <code>EntityMut</code>s that expose read and write operations …\nContains error types returned by bevy’s schedule.\nReturns mutable reference(s) to the entities with the …\nReturns mutable reference(s) to the entities with the …\nReturns untyped mutable reference(s) to the component(s) …\nReturns read-only reference(s) to the entities with the …\nReturns untyped read-only reference(s) to the component(s) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using data from the given <code>World</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGets a reference to the component in the entry.\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>C</code> for the current …\nGets access to the component of type <code>C</code> for the current …\nGets the component of the given <code>ComponentId</code> from the …\nGets the component of the given <code>ComponentId</code> from the …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nReturns <code>EntityMut</code>s that expose read and write operations …\nRetrieves a mutable reference to the given <code>entity</code>’s …\nGets a mutable reference to the component in the entry.\nGets mutable access to the component of type <code>T</code> for the …\nGets mutable access to the component of type <code>C</code> for the …\nRetrieves a mutable untyped reference to the given <code>entity</code>…\nGets a <code>MutUntyped</code> of the component of the given <code>ComponentId</code>…\nGets a <code>!Send</code> resource to the resource with the id …\nGets a mutable reference to the non-send resource of the …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>T</code> for the current …\nGets access to the component of type <code>C</code> for the current …\nGets access to the component of type <code>C</code> for the current …\nGets a mutable reference to the resource of the given type …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nReturns the ID of the current entity.\nReturns the ID of the current entity.\nReturns the ID of the current entity.\nReturns the ID of the current entity.\nReplaces the component of the entry.\nInserts the component into the <code>VacantEntry</code> and returns a …\nReplaces the component of the entry, and returns an …\nInserts the component into the <code>VacantEntry</code> and returns an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConsumes self and gets mutable access to the component of …\nReturns false if there are any commands in the queue\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nCreates a new builder with no access.\nCreates a new builder with no access.\nCreate a new, unique <code>WorldId</code>. Returns <code>None</code> if the supply …\nGets a mutable reference to the non-send resource of the …\nEnsures the entry has this component by inserting the …\nEnsures the entry has this component by inserting the …\nEnsures the entry has this component by inserting the …\nPush a <code>Command</code> onto the queue.\nReturns <code>Query</code> for the given <code>QueryState</code>, which is used to …\nReborrow self as a new instance of <code>DeferredWorld</code>\nReturns a new instance with a shorter lifetime. This is …\nReturns a new instance with a shorter lifetime.\nProvides additional functionality for <code>World</code> when the …\nGets a mutable reference to the resource of the given type\nSends an <code>Event</code>. This method returns the ID of the sent …\nSends a batch of <code>Event</code>s from an iterator. This method …\nSends the default value of the <code>Event</code> of type <code>E</code>. This …\nRemoves the component from the entry and returns it.\nSends a “global” <code>Trigger</code> without any targets.\nSends a <code>Trigger</code> with the given <code>targets</code>.\nContains types that allow disjoint mutable access to a …\nThe component with the given <code>ComponentId</code> was requested …\nThe entity with the given ID was requested mutably more …\nAn error that occurs when dynamically retrieving …\nAn error that occurs when fetching entities mutably from a …\nThe component with the given <code>ComponentId</code> does not exist on …\nThe entity with the given ID does not exist.\nThe error type returned by <code>World::try_run_schedule</code> if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe given <code>Entity</code> does not have a <code>Component</code> corresponding …\nThe error type returned by <code>World::get_reflect</code> and …\nThe <code>World</code> was missing the <code>AppTypeRegistry</code> resource.\nThe <code>World</code>’s <code>TypeRegistry</code> did not contain <code>TypeData</code> for …\nThere is no <code>ComponentId</code> corresponding to the given <code>TypeId</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>ComponentId</code> corresponding to the given <code>TypeId</code>.\nThe name corresponding to the <code>Component</code> with the given …\nThe given <code>Entity</code>.\nThe given <code>TypeId</code>.\nA interior-mutable reference to a particular <code>Entity</code> and …\nVariant of the <code>World</code> where resource and component accesses …\nReturns the archetype that the current entity belongs to.\nRetrieves this world’s <code>Archetypes</code> collection.\nRetrieves this world’s <code>Bundles</code> collection.\nGets the current change tick of this world.\nRetrieves this world’s <code>Components</code> collection.\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component with …\nRetrieves this world’s <code>Entities</code> collection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nGets the component of the given <code>ComponentId</code> from the …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves an <code>UnsafeEntityCell</code> that exposes read and write …\nSafety\nRetrieves a mutable untyped reference to the given <code>entity</code>…\nGets a reference to the non-send resource of the given …\nGets a <code>!Send</code> resource to the resource with the id …\nGets a mutable reference to the non-send resource of the …\nGets a <code>!Send</code> resource to the resource with the id …\nSafety\nGets a reference to the resource of the given type if it …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a mutable reference to the resource of the given type …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a reference including change detection to the …\nRetrieves this world’s unique ID.\nReturns the ID of the current entity.\nIncrements the world’s current change tick and returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn self into a <code>DeferredWorld</code>\nReturns the <code>Tick</code> indicating the last time that …\nReturns the id of the last ECS event that was fired. Used …\nGets metadata indicating the location where the current …\nRetrieves this world’s collection of removed components.\nProvides unchecked access to the internal data stores of …\nGets a reference to the <code>&amp;World</code> this <code>UnsafeWorldCell</code> …\nGets the world that the current entity belongs to.\nGets a reference to the <code>World</code> this <code>UnsafeWorldCell</code> belong …\nGets a mutable reference to the <code>World</code> this <code>UnsafeWorldCell</code> …\nPlugin that provides gamepad handling to an <code>App</code>.\nUpdates the running gamepad rumble effects.\nA extension trait adding <code>App::init_gizmo_group</code> and …\nA <code>Plugin</code> that provides an immediate mode drawing api for …\nSystem set label for the systems handling the rendering of …\nA gizmo asset that represents a line.\nAdds gizmos to the <code>Transparent2d</code> render phase\nAdds gizmos to the <code>Transparent3d</code> render phase\nSystem set for updating the rendering meshes for drawing …\nA module adding debug visualization of <code>Aabb</code>s.\nAdditional <code>Gizmos</code> Functions – Arcs\nAdditional <code>Gizmos</code> Functions – Arrows\nAdditional <code>Gizmos</code> Functions – Circles\nClear out the contextual gizmos.\nCollect the requested gizmos into a specific clear context.\nColors of the gizmo’s vertices\nA module for the <code>GizmoConfig&lt;T&gt;</code> <code>Resource</code>.\nThe type of the gizmo’s configuration group\nAdditional <code>Gizmos</code> Functions – Crosses\nAdditional <code>Gizmos</code> Functions – Curves\nEnd this gizmo clearing context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nA module for the <code>Gizmos</code> <code>SystemParam</code>.\nAdditional <code>Gizmos</code> Functions – Grids\nRegisters <code>GizmoConfigGroup</code> in the app enabling the use of …\nInsert a <code>GizmoConfig</code> into a specific <code>GizmoConfigGroup</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this gizmo should draw line joints. This is only …\nA module adding debug visualization of <code>PointLight</code>s, …\nPositions of the gizmo’s vertices\nThe gizmos prelude.\nA module for rendering each of the 2D and 3D …\nPropagate the contextual gizmo into the <code>Update</code> storage for …\nAdditional <code>Gizmos</code> Functions – Rounded cuboids and …\nStart a new gizmo clearing context.\nWhether this gizmo’s topology is a line-strip or …\nThe <code>GizmoConfigGroup</code> used for debug visualizations of <code>Aabb</code> …\nA <code>Plugin</code> that provides visualization of <code>Aabb</code>s for …\nAdd this <code>Component</code> to an entity to draw its <code>Aabb</code> component.\nThe color of the box.\nThe default color for bounding box gizmos.\nDraws all bounding boxes in the scene when set to <code>true</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA builder returned by <code>Gizmos::arc_2d</code>.\nA builder returned by <code>Gizmos::arc_2d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of lines used to approximate the geometry …\nSet the number of lines for this arc.\nA builder returned by <code>Gizmos::arrow</code> and <code>Gizmos::arrow_2d</code>\nDraws the arrow, by drawing lines with the stored <code>Gizmos</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds another tip to the arrow, appended in the start point.\nChange the length of the tips to be <code>length</code>. The default …\nA builder returned by <code>Gizmos::ellipse_2d</code>.\nA builder returned by <code>Gizmos::ellipse</code>.\nA builder returned by <code>Gizmos::sphere</code>.\nSet the number of line-segments for this ellipse.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of lines used to approximate the geometry …\nSet the number of line-segments used to approximate the …\nSet the number of line-segments used to approximate the …\nDraws a bevel, a straight line in this case, to connect …\nThe default gizmo config group.\nA dotted line\nA struct that stores configuration for gizmos.\nA trait used to create gizmo configs groups.\nImplements the <code>GizmoConfigGroup</code> trait for a gizmo config …\nA <code>Resource</code> storing <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> structs\nAn enum configuring how line joints will be drawn.\nAn enum used to configure the style of gizmo lines, …\nExtends both lines at the joining point until they meet in …\nDoes not draw any line joints.\nDraws a round corner with the specified resolution between …\nA solid line without any decorators\nHow closer to the camera than real geometry the line …\nSet to <code>false</code> to stop drawing gizmos.\nDescribe how lines should join\nApply perspective to gizmo lines.\nDetermine the style of gizmo lines.\nLine width specified in pixels.\nDescribes which rendering layers gizmos will be rendered …\nStorage of gizmo primitives.\nA <code>SystemParam</code> for drawing gizmos.\nSwap buffer for a specific clearing context.\nCombine the other gizmo storage with this one.\nClear this gizmo storage of any requested gizmos.\nThe currently used <code>GizmoConfig</code>\nThe currently used <code>GizmoConfigGroup</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA builder returned by <code>Gizmos::grid</code> and <code>Gizmos::grid_2d</code>\nA builder returned by <code>Gizmos::grid_3d</code>\nDraws a grid, by drawing lines with the stored <code>Gizmos</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeclare that all outer edges of the grid should be drawn. …\nDeclare that all outer edges of the grid should be drawn. …\nDeclare that the outer edges of the grid along the x axis …\nDeclare that the outer edges of the grid along the x axis …\nDeclare that the outer edges of the grid along the y axis …\nDeclare that the outer edges of the grid along the y axis …\nDeclare that the outer edges of the grid along the z axis …\nSkews the grid by <code>tan(skew)</code> in the x, y and z directions. …\nSkews the grid by <code>tan(skew)</code> in the x and y directions. <code>skew</code>…\nSkews the grid by <code>tan(skew)</code> in the x direction. <code>skew</code> is in …\nSkews the grid by <code>tan(skew)</code> in the x direction. <code>skew</code> is in …\nSkews the grid by <code>tan(skew)</code> in the y direction. <code>skew</code> is in …\nSkews the grid by <code>tan(skew)</code> in the y direction. <code>skew</code> is in …\nSkews the grid by <code>tan(skew)</code> in the z direction. <code>skew</code> is in …\nTake the color provided by <code>LightGizmoConfigGroup</code> depending …\nConfigures how a color is attributed to a light gizmo.\nThe <code>GizmoConfigGroup</code> used to configure the visualization …\nA <code>Plugin</code> that provides visualization of <code>PointLight</code>s, …\nUser-specified color.\nTake the color of the represented light.\nAdd this <code>Component</code> to an entity to draw any of its lights …\nRandom color derived from the light’s <code>Entity</code>.\nDefault color strategy for all light gizmos.\nDefault color strategy for this light gizmo. if <code>None</code>, use …\n<code>Color</code> to use for drawing a <code>DirectionalLight</code> gizmo when …\nDraw a gizmo for all lights if true.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Color</code> to use for drawing a <code>PointLight</code> gizmo when …\n<code>Color</code> to use for drawing a <code>SpotLight</code> gizmo when …\nThe <code>GizmoConfigGroup</code> used for debug visualizations of <code>Aabb</code> …\nA extension trait adding <code>App::init_gizmo_group</code> and …\nDraws a bevel, a straight line in this case, to connect …\nTake the color provided by <code>LightGizmoConfigGroup</code> depending …\nThe default gizmo config group.\nA dotted line\nA struct that stores configuration for gizmos.\nA trait used to create gizmo configs groups.\nImplements the <code>GizmoConfigGroup</code> trait for a gizmo config …\nA <code>Resource</code> storing <code>GizmoConfig</code> and <code>GizmoConfigGroup</code> structs\nAn enum configuring how line joints will be drawn.\nAn enum used to configure the style of gizmo lines, …\nA trait for rendering 2D geometric primitives (<code>P</code>) with …\nA trait for rendering 3D geometric primitives (<code>P</code>) with …\nA <code>SystemParam</code> for drawing gizmos.\nConfigures how a color is attributed to a light gizmo.\nThe <code>GizmoConfigGroup</code> used to configure the visualization …\nUser-specified color.\nTake the color of the represented light.\nExtends both lines at the joining point until they meet in …\nDoes not draw any line joints.\nThe output of <code>primitive_2d</code>. This is a builder to set …\nThe output of <code>primitive_3d</code>. This is a builder to set …\nDraws a round corner with the specified resolution between …\nAdd this <code>Component</code> to an entity to draw its <code>Aabb</code> component.\nAdd this <code>Component</code> to an entity to draw any of its lights …\nA solid line without any decorators\nRandom color derived from the light’s <code>Entity</code>.\nThe color of the box.\nDefault color strategy for all light gizmos.\nDefault color strategy for this light gizmo. if <code>None</code>, use …\nThe currently used <code>GizmoConfig</code>\nThe currently used <code>GizmoConfigGroup</code>\nThe default color for bounding box gizmos.\nHow closer to the camera than real geometry the line …\n<code>Color</code> to use for drawing a <code>DirectionalLight</code> gizmo when …\nDraws all bounding boxes in the scene when set to <code>true</code>.\nDraw a gizmo for all lights if true.\nSet to <code>false</code> to stop drawing gizmos.\nRegisters <code>GizmoConfigGroup</code> in the app enabling the use of …\nInsert a <code>GizmoConfig</code> into a specific <code>GizmoConfigGroup</code>.\nDescribe how lines should join\nApply perspective to gizmo lines.\nDetermine the style of gizmo lines.\nLine width specified in pixels.\n<code>Color</code> to use for drawing a <code>PointLight</code> gizmo when …\nRenders a 2D primitive with its associated details.\nRenders a 3D primitive with its associated details.\nDescribes which rendering layers gizmos will be rendered …\n<code>Color</code> to use for drawing a <code>SpotLight</code> gizmo when …\nA module for rendering each of the 2D <code>bevy_math::primitives</code>…\nA module for rendering each of the 3D <code>bevy_math::primitives</code>…\nBuilder for configuring the drawing options of <code>Annulus</code>.\nA trait for rendering 2D geometric primitives (<code>P</code>) with …\nBuilder for configuring the drawing options of <code>Line2d</code>.\nThe output of <code>primitive_2d</code>. This is a builder to set …\nBuilder for configuring the drawing options of <code>Segment2d</code>.\nSet the drawing mode of the line (arrow vs. plain line)\nSet the drawing mode of the line (arrow vs. plain line)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the number of line-segments for the inner circle of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of line-segments for the outer circle of …\nRenders a 2D primitive with its associated details.\nSet the number of line-segments for each circle of the …\nBuilder for configuring the drawing options of <code>Capsule3d</code>.\nBuilder for configuring the drawing options of <code>Cone</code>.\nBuilder for configuring the drawing options of …\nBuilder for configuring the drawing options of <code>Cylinder</code>.\nA trait for rendering 3D geometric primitives (<code>P</code>) with …\nThe output of <code>primitive_3d</code>. This is a builder to set …\nBuilder for configuring the drawing options of <code>Plane3d</code>.\nBuilder for configuring the drawing options of <code>Torus</code>.\nSet the number of lines used to approximate the height of …\nSet the number of cells in the x and y axes direction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the number of lines used to approximate the height of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the number of lines in the major (ring) direction.\nSet the number of lines in the minor (tube) direction.\nRenders a 3D primitive with its associated details.\nSet the number of lines used to approximate the top an …\nSet the number of lines used to approximate the capsule …\nSet the number of lines used to approximate the cone …\nSet the number of lines used to approximate the curved …\nSet the distance between cells along the x and y axes.\nA builder returned by <code>Gizmos::rounded_cuboid</code>\nA builder returned by <code>Gizmos::rounded_rect</code> and …\nChange the resolution of the arcs at the corners of the …\nChange the resolution of the arcs at the edges of the …\nChange the radius of the corners to be <code>corner_radius</code>. The …\nChange the radius of the edges to be <code>edge_radius</code>. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Animation{}</code>: glTF Animation as Bevy <code>AnimationClip</code>\nFailed to load asset from an asset path.\nDecoding the base64 mesh data failed.\nUnsupported buffer format.\nCircular children in Nodes\n<code>DefaultMaterial</code>: as above, if the glTF file contains a …\nFailed to generate tangents.\nRepresentation of a loaded glTF file.\nInvalid glTF file.\nLabels that can be used to load part of a glTF\nAn error that occurs when loading a glTF file.\nAdditional untyped data that can be present on most glTF …\nLoads glTF files with all of their data as their …\nSpecifies optional settings for processing gltfs at load …\nAdditional untyped data that can be present on most glTF …\nThe material name of a glTF primitive.\nA glTF mesh, which may consist of multiple <code>GltfPrimitives</code> …\nAdditional untyped data that can be present on most glTF …\nA glTF node with all of its child nodes, its <code>GltfMesh</code>, …\nAdds support for glTF file loading to the app.\nPart of a <code>GltfMesh</code> that consists of a <code>Mesh</code>, an optional …\nAdditional untyped data that can be present on most glTF …\nA glTF skin with all of its joint nodes, …\nError when loading a texture. Might be due to a disabled …\nInvalid image mime type.\n<code>Skin{}/InverseBindMatrices</code>: glTF mesh skin matrices as …\nFailed to load a file.\n<code>Material{}</code>: glTF Material as a Bevy <code>StandardMaterial</code>\n<code>Mesh{}</code>: glTF Mesh as a <code>GltfMesh</code>\nMissing sampler for an animation.\nBinary blob is missing.\nFailed to generate morph targets.\n<code>Mesh{}/Primitive{}/MorphTargets</code>: Morph target animation …\n<code>Node{}</code>: glTF Node as a <code>GltfNode</code>\n<code>Mesh{}/Primitive{}</code>: glTF Primitive as a Bevy <code>Mesh</code>\nFailed to read bytes from an asset path.\n<code>Scene{}</code>: glTF Scene as a Bevy <code>Scene</code>\n<code>Skin{}</code>: glTF mesh skin as <code>GltfSkin</code>\n<code>Texture{}</code>: glTF Texture as a Bevy <code>Image</code>\nUnsupported primitive mode.\nRegister a custom vertex attribute so that it is …\nAll animations loaded from the glTF file.\nSubasset label for this node within the gLTF parent asset.\nSubasset label for this skin within the gLTF parent asset.\nSubasset label for this mesh within the gLTF parent asset.\nSubasset label for this primitive within its parent …\nDirect children of the node.\nCustom vertex attributes that will be recognized when …\nDefault scene to be displayed.\nAdditional data.\nAdditional data.\nAdditional data.\nAdditional data.\nReturns the argument unchanged.")
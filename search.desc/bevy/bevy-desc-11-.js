searchState.loadedDescShard("bevy", 11, "Insert a value the set without checking if the value …\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates an iterator over the entries of a <code>HashMap</code> in …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order, with …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the number of elements in the table.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nCreates an empty <code>HashTable</code>.\nCreates an empty <code>HashMap</code> using the given allocator.\nCreates an empty <code>HashSet</code>.\nCreates an empty <code>HashTable</code> using the given allocator.\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate. …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the table with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nShrinks the capacity of the table as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashTable</code> with the specified capacity.\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashSet</code> with the specified capacity, using\nCreates an empty <code>HashMap</code> with the specified capacity using …\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty <code>HashTable</code> with the specified capacity …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nThe layout of the allocation request that failed.\nDefault hasher for <code>HashMap</code>.\nA draining iterator over the entries of a <code>HashMap</code> in …\nA view into a single entry in a map, which may either be …\nA view into a single entry in a map, which may either be …\nA draining iterator over entries of a <code>HashMap</code> which don’…\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code> in …\nAn owning iterator over the keys of a <code>HashMap</code> in arbitrary …\nAn owning iterator over the values of a <code>HashMap</code> in …\nAn iterator over the entries of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashMap</code> in …\nAn iterator over the keys of a <code>HashMap</code> in arbitrary order. …\nAn occupied entry.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA builder for computing where in a <code>HashMap</code> a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code> in arbitrary …\nA mutable iterator over the values of a <code>HashMap</code> in …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash and matching …\nAccess an immutable entry by hash and matching function.\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an immutable entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an immutable entry by a key and its hash.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, and returns a …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns an …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the VacantEntryRef’s …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns the entry’s old …\nSet the value of an entry with a custom hasher function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nTake ownership of the key.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntryRef into a mutable reference to …\nGets a reference to the key in the entry.\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it. Keeps …\nTakes the value out of the entry, and returns it. Keeps …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map. …\nTake the ownership of the key and value from the map. …\nReplaces the entry, returning the old key and value. The …\nReplaces the entry, returning the old key and value. The …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nProvides shared access to the key and owned access to the …\nReplaces the key in the hash map with the key used to …\nReplaces the key in the hash map with the key used to …\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining iterator over entries of a <code>HashSet</code> which don’…\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the value.\nEnsures a value is in the entry by inserting if it was …\nTakes the value out of the entry, and returns it. Keeps …\nReplaces the entry, returning the old value. The new value …\nType representing the absence of an entry, as returned by …\nA draining iterator over the items of a <code>HashTable</code>.\nA view into a single entry in a table, which may either be …\nA draining iterator over entries of a <code>HashTable</code> which don…\nLow-level hash table with explicit hashing.\nAn owning iterator over the entries of a <code>HashTable</code> in …\nAn iterator over the entries of a <code>HashTable</code> in arbitrary …\nA mutable iterator over the entries of a <code>HashTable</code> in …\nAn occupied entry.\nA view into an occupied entry in a <code>HashTable</code>. It is part …\nA vacant entry.\nA view into a vacant entry in a <code>HashTable</code>. It is part of …\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry, replacing any existing value …\nInserts a new element into the table with the hash that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the OccupiedEntry into a mutable reference to the …\nConverts the VacantEntry into a mutable reference to the …\nConverts the AbsentEntry into a mutable reference to the …\nEnsures a value is in the entry by inserting if it was …\nEnsures a value is in the entry by inserting the result of …\nTakes the value out of the entry, and returns it along …\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nSee <code>Exclusive</code> for stdlib’s upcoming implementation, …\nReturns the argument unchanged.\nBuild a mutable reference to a <code>SyncCell</code> from a mutable …\nGet a reference to this <code>SyncCell</code>’s inner value.\nCalls <code>U::from(self)</code>.\nConstruct a new instance of a <code>SyncCell</code> from the given …\nFor types that implement <code>Sync</code>, get shared access to this …\nDeconstruct this <code>SyncCell</code> into its inner value.\n<code>UnsafeCell</code>, but <code>Sync</code>.\nThe core primitive for interior mutability in Rust.\nReturns a <code>&amp;[SyncUnsafeCell&lt;T&gt;]</code> from a <code>&amp;SyncUnsafeCell&lt;[T]&gt;</code>.\nCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.\nCreates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.\nCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.\nReturns a <code>&amp;mut SyncUnsafeCell&lt;T&gt;</code> from a <code>&amp;mut T</code>.\nConverts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGets a mutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the value.\nUnwraps the value, consuming the cell.\nConstructs a new instance of <code>SyncUnsafeCell</code> which will …\nConstructs a new instance of <code>UnsafeCell</code> which will wrap …\nGets a mutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value. The …\nTrait implemented by callsites.\n<code>Dispatch</code> trace data to a <code>Subscriber</code>.\n<code>Event</code>s represent single points in time where something …\nIdentifies a span within the context of a subscriber.\nAttaches spans to a <code>std::future::Future</code>.\nDescribes the level of verbosity of a span or event.\nMetadata describing a span or event.\nA handle representing a span, with the capability to enter …\nTrait representing the functions required to collect trace …\nA field value of an erased type.\nCallsites represent the source locations from which spans …\nReturns an opaque <code>Identifier</code> that uniquely identifies the …\nConstructs a new <code>Span</code> as child of the given parent span, …\nConstructs a new <code>Event</code> with the specified metadata and set …\nNotifies the subscriber that a span ID has been cloned.\nNotifies the subscriber that a span ID has been cloned.\nReturns a handle to the span considered by the <code>Subscriber</code> …\nReturns a type representing this subscriber’s view of …\nReturns a type representing this subscriber’s view of …\nConstructs an event at the debug level.\nConstructs a span at the debug level.\nReturns the current default dispatcher\nConstructs a new <code>Event</code> with the specified metadata and set …\nDispatches trace events to <code>Subscriber</code>s.\nIf <code>self</code> is the same type as the provided <code>TypeId</code>, returns …\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to this <code>[</code>Subscriber…\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to the <code>Subscriber</code> this <code>Dispatch</code> …\nCreates a <code>WeakDispatch</code> from this <code>Dispatch</code>.\n<strong>This method is deprecated.</strong>\nNotifies the subscriber that a span ID has been dropped.\nReturns true if a span or event with the specified metadata…\nReturns true if a span with the specified metadata would be\nChecks whether a span or event is enabled based on the …\nRecords that a span has been entered.\nEnters this span, returning a guard that will exit the …\nRecords that a span has been can_enter.\nEnters this span, consuming it and returning a guard that …\nConstructs an event at the error level.\nConstructs a span at the error level.\nEvents represent single points in time during the …\nRecords that an <code>Event</code> has occurred.\nRecords that an <code>Event</code> has occurred.\nConstructs a new <code>Event</code>.\nDetermine if an <code>Event</code> should be recorded.\nTests whether an event with the specified level and target …\nRecords that a span has been exited.\nRecords that a span has been exited.\n<code>Span</code> and <code>Event</code> key-value data.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nReturns the names of the fields on the described span or …\nReturns an iterator over the set of values on this <code>Event</code>.\nReturns the name of the source code file where the span …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nConstructs a new span ID from the given <code>u64</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nInstruments this type with the current <code>Span</code>, returning an …\nExecutes the given function in the context of this span.\nConstructs an event at the info level.\nConstructs a span at the info level.\nAttach a span to a <code>std::future::Future</code>.\nInstruments this type with the provided <code>Span</code>, returning an …\nInstruments a function to create and enter a <code>tracing</code> span …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Dispatch</code> forwards to a <code>Subscriber</code> of …\nReturns true if the new event’s parent should be …\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns true if the callsite kind is <code>Event</code>.\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nReturns true if the new event should be a root.\nReturn true if the callsite kind is <code>Span</code>.\nReturns the level of verbosity of the described span or …\nTrace verbosity level filtering.\nReturns the line number in the source code file where the …\nReturns the highest verbosity level that this <code>Subscriber</code> …\nMetadata describing trace data.\nReturns the metadata associated with the callsite.\nReturns this span’s <code>Metadata</code>, if it is enabled.\nReturns metadata describing this <code>Event</code>.\nStatically constructs new span metadata.\nReturns the path to the Rust module where the span …\nReturns the name of the span.\nConstructs a new <code>Span</code> with the given metadata and set of …\nConstruct new metadata for a span or event, with a name, …\nReturns a <code>Dispatch</code> that forwards to the given <code>Subscriber</code>.\nReturns a new <code>Event</code> in the current span, with the …\nReturns a new <code>Event</code> as a child of the specified span, with …\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nVisit the construction of a new span, returning a new span …\nRecord the construction of a new span, returning a new ID …\nConstructs a new span that is <em>completely disabled</em>.\nReturns a new <code>Dispatch</code> that discards events and spans.\nInvoked when this subscriber becomes a <code>Dispatch</code>.\nReturns this span, if it was enabled by the current …\nReturns the new event’s explicitly-specified parent, if …\nVisits this value with the given <code>Visitor</code>.\nRecord a set of values on a span.\nRecords that the field described by <code>field</code> has the value …\nRecord a set of values on a span.\nVisits all the fields on this <code>Event</code> with the specified …\nRecords all the fields in the provided <code>ValueSet</code>.\nAdds an indication that <code>span</code> follows from the span with …\nAdds an indication that <code>span</code> follows from the span with …\nRegisters a new callsite with this subscriber, returning …\nRegisters a new callsite with this subscriber, returning …\nSets the <code>Interest</code> for this callsite.\nSpans represent periods of time in which a program was …\nConstructs a new span.\nTests whether a span with the specified level and target …\nCollects and records trace data.\nReturns a string describing the part of the system where …\nConstructs an event at the trace level.\nConstructs a span at the trace level.\nNotifies the subscriber that a span ID has been dropped, …\nNotifies the subscriber that a span ID has been dropped, …\nConstructs an event at the warn level.\nConstructs a span at the warn level.\nInvokes a function with a reference to this span’s ID …\nTrait implemented by callsites.\nA default <code>Callsite</code> implementation.\nUniquely identifies a <code>Callsite</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the callsite’s cached <code>Interest</code>, or registers it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata associated with the callsite.\nReturns a new <code>DefaultCallsite</code> with the specified <code>Metadata</code>.\nClear and reregister interest on every <code>Callsite</code>\nRegister a new <code>Callsite</code> with the global registry.\nRegisters this callsite with the global callsite registry.\nSets the <code>Interest</code> for this callsite.\nA guard that resets the current default dispatcher to the …\n<code>Dispatch</code> trace data to a <code>Subscriber</code>.\nReturned if setting the global dispatcher fails.\n<code>WeakDispatch</code> is a version of <code>Dispatch</code> that holds a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecutes a closure with a reference to this thread’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the dispatch as the default dispatch for the duration …\nSets this dispatch as the global default for the duration …\nAttempts to upgrade this <code>WeakDispatch</code> to a <code>Dispatch</code>.\nSets this dispatch as the default for the duration of a …\n<code>Event</code>s represent single points in time where something …\nTrait implemented to allow a type to be used as a field …\nA <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.\nA <code>Value</code> which serializes using <code>fmt::Display</code>.\nAn empty field.\nAn opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…\nDescribes the fields present on a span.\nAn iterator over a set of fields.\nA field value of an erased type.\nA set of fields and values for a span.\nVisits typed values.\nAttempts to convert <code>&amp;self</code> into a <code>Field</code> with the specified …\nReturns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>\nReturns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>\nReturns <code>true</code> if <code>self</code> contains the given <code>field</code>.\nWraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can be\nWraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that can …\nReturns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of this field in its <code>FieldSet</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not this <code>FieldSet</code> has fields.\nReturns true if this <code>ValueSet</code> contains <em>no</em> values.\nReturns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.\nReturns the number of fields in this <code>FieldSet</code>.\nReturns the number of fields in this <code>ValueSet</code> that would …\nReturns a string representing the name of the field.\nConstructs a new <code>FieldSet</code> with the given array of field …\nVisits this value with the given <code>Visitor</code>.\nVisits all the fields in this <code>ValueSet</code> with the provided …\nVisit a value implementing <code>fmt::Debug</code>.\nAttaches spans to a <code>std::future::Future</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> <code>Span</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> …\nExtension trait allowing futures to be instrumented with a …\nBorrows the <code>Dispatch</code> that is entered when this type is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruments this type with the current <code>Span</code>, returning an …\nBorrows the wrapped type.\nBorrows the wrapped type.\nMutably borrows the wrapped type.\nMutably borrows the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nInstruments this type with the provided <code>Span</code>, returning an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nBorrows the <code>Span</code> that this type is instrumented by.\nMutably borrows the <code>Span</code> that this type is instrumented by.\nAttaches the current default <code>Subscriber</code> to this type, …\nAttaches the provided <code>Subscriber</code> to this type, returning a …\nA filter comparable to a verbosity <code>Level</code>.\nIndicates that a string could not be parsed to a valid …\nThe statically configured maximum trace level.\n<code>Event</code> callsite\n<code>enabled!</code> callsite. <code>Subscriber</code>s can assume this <code>Kind</code> means …\nIndicates whether the callsite is a span or event.\nDescribes the level of verbosity of a span or event.\nA filter comparable to a verbosity <code>Level</code>.\nMetadata describing a span or event.\nReturned if parsing a <code>Level</code> fails.\nIndicates that a string could not be parsed to a valid …\n<code>Span</code> callsite\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets that this <code>Kind</code> is a hint.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the callsite kind is <code>Event</code>\nReturn true if the callsite kind is <code>Hint</code>\nReturn true if the callsite kind is <code>Span</code>\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nExits this span, returning the underlying <code>Span</code>.\nReturns the set of all fields defined by this span’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns this span’s <code>Id</code>, if it is enabled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the new span’s parent should be …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns a reference to the new span’s metadata.\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nReturns <code>Attributes</code> describing a new span at the root of …\nReturns the new span’s explicitly-specified parent, if …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nReturns a reference to a <code>ValueSet</code> containing any values …\nA guard that resets the current default dispatcher to the …\nIndicates a <code>Subscriber</code>’s interest in a particular …\nA no-op <code>Subscriber</code>.\nReturned if setting the global dispatcher fails.\nTrait representing the functions required to collect trace …\nReturns an <code>Interest</code> indicating the subscriber is always …\nNotifies the subscriber that a span ID has been cloned.\nReturns a type representing this subscriber’s view of …\nIf <code>self</code> is the same type as the provided <code>TypeId</code>, returns …\n<strong>This method is deprecated.</strong>\nReturns true if a span or event with the specified metadata…\nRecords that a span has been entered.\nRecords that an <code>Event</code> has occurred.\nDetermine if an <code>Event</code> should be recorded.\nRecords that a span has been exited.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the subscriber is always interested in …\nReturns <code>true</code> if the subscriber is never interested in …\nReturns <code>true</code> if the subscriber is sometimes interested in …\nReturns the highest verbosity level that this <code>Subscriber</code> …\nReturns an <code>Interest</code> indicating that the subscriber is …\nReturns a new <code>NoSubscriber</code>.\nVisit the construction of a new span, returning a new span …\nInvoked when this subscriber becomes a <code>Dispatch</code>.\nRecord a set of values on a span.\nAdds an indication that <code>span</code> follows from the span with …\nRegisters a new callsite with this subscriber, returning …\nSets the <code>Subscriber</code> as the default for the current thread …\nSets this subscriber as the global default for the …\nReturns an <code>Interest</code> indicating the subscriber is sometimes …\nNotifies the subscriber that a span ID has been dropped, …\nSets this <code>Subscriber</code> as the default for the current thread …\nIndicates an alias of/shortcut to something is to be …\nIndicates that the something can be scrolled in any …\nThe window will always be below <code>WindowLevel::Normal</code> and …\nThe window will always be on top of <code>WindowLevel::Normal</code> …\nApplication lifetime events\nThe window’s top-left corner should be placed at the …\nChooses either <code>Opaque</code> or <code>Inherit</code> automatically, depending …\nChooses <code>Immediate</code> -&gt; <code>Mailbox</code> -&gt; <code>Fifo</code> (on web) based on …\nChooses <code>FifoRelaxed</code> -&gt; <code>Fifo</code> based on availability.\nPosition will be set by the window manager. Bevy will …\nThe window should appear fullscreen by being borderless …\nIndicates that a cell or set of cells may be selected. …\nWindow will be centered on the selected monitor.\nMarker component for a <code>Window</code> that has been requested to …\nIndicates that the item/column can be resized …\nNotifies when text should be inserted into the editor …\nSpecifies how the alpha channel of the textures should be …\nThe cursor is confined to the window area.\nA context menu is available for the object under the …\nIndicates something is to be copied. Often rendered as an …\nA simple crosshair (e.g., short line segments resembling a …\nUses the current monitor of the window.\nAn event that is sent whenever the user’s cursor enters …\nDefines if and how the cursor is grabbed by a <code>Window</code>.\nAn event that is sent whenever the user’s cursor leaves …\nAn event reporting that the mouse cursor has moved inside …\nCursor data for a <code>Window</code>.\nUse the dark variant.\nThe platform-dependent default cursor. Often rendered as …\nNotifies when the IME was disabled.\nKeep application running headless even after closing all …\nFile is being dropped into a window.\nThe east border to be moved.\nNotifies when the IME was enabled.\nSpecifies which <code>Window</code> control buttons should be enabled.\nA more direct link to a window entity.\nUses a given <code>crate::monitor::Monitor</code> entity.\nThe east and west borders to be moved.\nDefines the specific conditions the application should …\nPresentation frames are kept in a First-In-First-Out queue …\nPresentation frames are kept in a First-In-First-Out queue …\nEvents related to files being dragged and dropped on a …\nThe window should be in “true”/“legacy” Fullscreen …\nIndicates that something can be grabbed (dragged to be …\nIndicates that something is being grabbed (dragged to be …\nHelp is available for the object under the cursor. Often …\nFile is currently being hovered over a window.\nFile hovering was canceled.\nThe application is not started yet.\nA Input Method Editor event.\nPresentation frames are not queued at all. The moment a …\nUses the monitor with the specified index.\nThe alpha channel, if it exists, of the textures is …\nStores internal <code>Window</code> state that isn’t directly …\nUse the light variant.\nThe cursor is locked inside the window area to a certain …\nPresentation frames are kept in a single-frame queue. …\nRepresents an available monitor as reported by the user’…\nReferences a screen monitor.\nIndicates something is to be moved.\nThe north border to be moved.\nThe north-east corner to be moved.\nThe north-east and south-west corners to be moved.\nIndicates that the dragged item cannot be dropped at the …\nThe cursor can freely leave the window.\nThe default group.\nA flattened representation of a window reference for …\nIndicates that the requested action will not be carried …\nThe south and north borders to be moved.\nThe north-west corner to be moved.\nThe north-west and south-east corners to be moved.\nClose application when all windows are closed\nClose application when the primary window is closed\nThe alpha channel, if it exists, of the textures is …\nThe cursor is a pointer that indicates a link. Often …\nThe alpha channel, if it exists, of the textures is …\nThe alpha channel, if it exists, of the textures is …\nNotifies when a new composing text should be set at the …\nPresentation mode for a <code>Window</code>.\nThis will be linked to the primary window that is created …\nUses the primary monitor of the system.\nA marker component for the primary monitor\nMarker <code>Component</code> for the window considered the primary …\nA progress indicator. The program is performing some …\nA wrapper over <code>RawWindowHandle</code> and <code>RawDisplayHandle</code> that …\nHolder of the <code>RawHandleWrapper</code> with wrappers, to allow use …\nAn event that indicates all of the application’s windows …\nIndicates that the item/row can be resized vertically. …\nThe application is running.\nThe south border to be moved.\nThe south-east corner to be moved.\nThe window should be in “true”/“legacy” Fullscreen …\nThe application was suspended.\nThe south-west corner to be moved.\nThe icon to display for a window.\nIndicates text that may be selected. Often rendered as an …\nA <code>RawHandleWrapper</code> that cannot be sent across threads.\nIndicates vertical-text that may be selected. Often …\nRepresents a video mode that a monitor supports\nThe west border to be moved.\nIndicates that the program is busy and the user should …\nThe application is going to be resumed. Applications have …\nThe application is going to be suspended. Applications …\nThe defining <code>Component</code> for window entities, storing …\nAn event that indicates a window’s OS-reported scale …\nAn event that is sent whenever the operating systems …\nAn event that is sent whenever a window is closed. This …\nAn event that is sent whenever a window is closing. This …\nAn event that is sent whenever a new window is created.\nAn event that is sent whenever a window is destroyed by …\nWraps all <code>bevy_window</code> and <code>bevy_input</code> events in a common …\nAn event that indicates a window has received or lost …\nSpecifies where a <code>Window</code> should appear relative to other …\nDefines the way a <code>Window</code> is displayed.\nAn event that is sent when a window is repositioned in …\nThe window has been occluded (completely hidden from view).\nA <code>Plugin</code> that defines an interface for windowing support …\nDefines where a <code>Window</code> should be placed on the screen.\nReference to a <code>Window</code>, whether it be a direct link to a …\nThe size limits on a <code>Window</code>.\nA window event that is sent whenever a window’s logical …\nControls the size of a <code>Window</code>\nAn event that indicates a window’s scale factor has …\nThe <code>Window</code> theme variant to use.\nAn event sent when the system theme changes for a window.\nA wrapper over a window.\nThe window should take a portion of the screen, using the …\nIndicates that something can be zoomed in. Often rendered …\nIndicates that something can be zoomed in. Often rendered …\nThe window scale factor as reported by the window backend.\nThe bit depth of the video mode\nThe “html canvas” element selector.\nEnables the functionality of the close button.\nClose windows in response to <code>WindowCloseRequested</code> (e.g.  …\nWhether to close windows when they are requested to be …\nHow the alpha channel of textures should be handled while …\nThe cursor options of this window. Cursor icons are set …\nShould the window have decorations enabled?\nThe change in the position of the cursor since the last …\nOptional hint given to the rendering API regarding the …\nRaw handle to the display server.\nSpecifies which window control buttons should be enabled.\nFetch the entity of this window reference\nWhether to exit the app when there are no open windows.\nExit the application when there are no open windows.\nExit the application when the primary window has been …\nWhether or not to fit the canvas element’s size to its …\nWhether it was focused (true) or lost focused (false).\nGet/set whether the window is focused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nMakes the window content appear behind the titlebar.\nReturns a <code>HasWindowHandle</code> + <code>HasDisplayHandle</code> impl, which …\nWhether or not the cursor is locked by or confined within …\nToggles drawing the drop shadow behind the window.\nThe window’s client area height in logical pixels.\nThe new logical height of the window.\nSet whether or not mouse events within <em>this</em> window are …\nShould the window use Input Method Editor?\nSets location of IME candidate box in client area …\nStores internal state that isn’t directly accessible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the app can be updated.\nThe maximum height the window can have.\nThe maximum width the window can have.\nEnables the functionality of the maximize button.\nThe minimum height the window can have.\nThe minimum width the window can have.\nEnables the functionality of the minimize button.\nWhich fullscreen or windowing mode should be used.\nEnables click-and-drag behavior for the entire window, not …\nThe name of the monitor\nStores the application ID (on <strong><code>Wayland</code></strong>), <code>WM_CLASS</code> (on <strong><code>X11</code></strong>) …\nCreates a <code>WindowWrapper</code> from a window.\nCreates a <code>RawHandleWrapper</code> from a <code>WindowWrapper</code>.\nCreates a new <code>WindowResolution</code>.\nNormalize the window reference so that it can be compared …\nWhether it was occluded (true) or not occluded (false).\nThe window’s client area height in physical pixels.\nThe height of the monitor in physical pixels\nThe position of the monitor in physical pixels\nReturns the physical size of the monitor in pixels\nThe window’s client size in physical pixels\nThe resolution of the video mode\nThe window’s client area width in physical pixels.\nThe width of the monitor in physical pixels\nThe cursor position in logical pixels.\nWhere the window moved to in physical pixels.\nWhere the window should be placed.\nThe windowing prelude.\nWhat presentation mode to give the window.\nWhether or not to stop events from propagating out of the …\nSettings for the primary window.\nSets whether this window recognizes <code>DoubleTapGesture</code>\nSets whether this window recognizes <code>PanGesture</code>, with a …\nSets whether this window recognizes <code>PinchGesture</code>\nSets whether this window recognizes <code>RotationGesture</code>\nThe refresh rate of the monitor in millihertz\nThe refresh rate in millihertz\nShould the window be resizable?\nThe limits of the window’s logical size (found in its …\nWhat resolution the window should have.\nThe ratio of physical pixels to logical pixels.\nThe new scale factor.\nThe new scale factor.\nThe scale factor of the monitor\nThe scale factor set with …\nSet the window’s logical resolution.\nSet the window’s physical resolution.\nSet the window’s scale factor, this may get overridden …\nSet the window’s scale factor, this will be used over …\nThe window’s client size in logical pixels\nSets whether the window should be shown in the taskbar.\nConsumes the current maximize request, if it exists. This …\nConsumes the current minimize request, if it exists. This …\nConsumes the current move request, if it exists. This …\nConsumes the current resize request, if it exists. This …\nThe new system theme.\nStores the title of the window.\nToggles showing the traffic light window buttons.\nToggles showing the window title.\nToggles drawing the titlebar.\nMakes the titlebar transparent, allowing the app content …\nShould the window be transparent?\nThe video modes that the monitor supports\nSets the window’s visibility.\nWhether the cursor is visible or not.\nThe window’s client area width in logical pixels.\nThe new logical width of the window.\nWindow that has changed.\nWindow that has been created.\nWindow to close.\nWindow that has been closed.\nWindow that has been requested to close and is the process …\nWindow that has been destroyed.\nWindow that the cursor moved inside.\nWindow that the cursor entered.\nWindow that the cursor left.\nWindow that changed focus.\nWindow that changed occluded state.\nWindow that had its scale factor changed.\nWindow that had its scale factor changed by the backend.\nWindow that moved.\nWindow for which the system theme has changed.\nRaw handle to a window.\nWhere should the window appear relative to other …\nSets a specific theme for the window.\nBuilder method for adding a scale factor override to the …\nPath to the file that was dropped in.\nPath to the file that might be dropped in.\nWindow the file was dropped into.\nWindow a file is possibly going to be dropped into.\nWindow that had a canceled file drop.\nCursor begin and end position.\nCurrent value.\nInput string\nWindow that received the event.\nWindow that received the event.\nWindow that received the event.\nWindow that received the event.\nThe window’s top-left corner should be placed at the …\nPosition will be set by the window manager. Bevy will …\nWindow will be centered on the selected monitor.\nNotifies when text should be inserted into the editor …\nUses the current monitor of the window.\nAn event that is sent whenever the user’s cursor enters …\nAn event that is sent whenever the user’s cursor leaves …\nAn event reporting that the mouse cursor has moved inside …\nNotifies when the IME was disabled.\nFile is being dropped into a window.\nNotifies when the IME was enabled.\nUses a given <code>crate::monitor::Monitor</code> entity.\nEvents related to files being dragged and dropped on a …\nFile is currently being hovered over a window.\nFile hovering was canceled.\nA Input Method Editor event.\nUses the monitor with the specified index.\nReferences a screen monitor.\nNotifies when a new composing text should be set at the …\nUses the primary monitor of the system.\nThe defining <code>Component</code> for window entities, storing …\nAn event that is sent when a window is repositioned in …\nA <code>Plugin</code> that defines an interface for windowing support …\nDefines where a <code>Window</code> should be placed on the screen.\nThe size limits on a <code>Window</code>.\nThe “html canvas” element selector.\nWhether to close windows when they are requested to be …\nHow the alpha channel of textures should be handled while …\nThe cursor options of this window. Cursor icons are set …\nShould the window have decorations enabled?\nThe change in the position of the cursor since the last …\nOptional hint given to the rendering API regarding the …\nSpecifies which window control buttons should be enabled.\nWhether to exit the app when there are no open windows.\nWhether or not to fit the canvas element’s size to its …\nGet/set whether the window is focused.\nMakes the window content appear behind the titlebar.\nToggles drawing the drop shadow behind the window.\nShould the window use Input Method Editor?\nSets location of IME candidate box in client area …\nStores internal state that isn’t directly accessible.\nThe maximum height the window can have.\nThe maximum width the window can have.\nThe minimum height the window can have.\nThe minimum width the window can have.\nWhich fullscreen or windowing mode should be used.\nEnables click-and-drag behavior for the entire window, not …\nStores the application ID (on <strong><code>Wayland</code></strong>), <code>WM_CLASS</code> (on <strong><code>X11</code></strong>) …\nThe cursor position in logical pixels.\nWhere the window moved to in physical pixels.\nWhere the window should be placed.\nWhat presentation mode to give the window.\nWhether or not to stop events from propagating out of the …\nSettings for the primary window.\nSets whether this window recognizes <code>DoubleTapGesture</code>\nSets whether this window recognizes <code>PanGesture</code>, with a …\nSets whether this window recognizes <code>PinchGesture</code>\nSets whether this window recognizes <code>RotationGesture</code>\nShould the window be resizable?\nThe limits of the window’s logical size (found in its …\nWhat resolution the window should have.\nSets whether the window should be shown in the taskbar.\nStores the title of the window.\nToggles showing the traffic light window buttons.\nToggles showing the window title.\nToggles drawing the titlebar.\nMakes the titlebar transparent, allowing the app content …\nShould the window be transparent?\nSets the window’s visibility.\nWindow that the cursor moved inside.\nWindow that the cursor entered.\nWindow that the cursor left.\nWindow that moved.\nWhere should the window appear relative to other …\nSets a specific theme for the window.\nPath to the file that was dropped in.\nPath to the file that might be dropped in.\nWindow the file was dropped into.\nWindow a file is possibly going to be dropped into.\nWindow that had a canceled file drop.\nCursor begin and end position.\nCurrent value.\nInput string\nWindow that received the event.\nWindow that received the event.\nWindow that received the event.\nWindow that received the event.\nThe <code>App</code> will update over and over, as fast as it possibly …\nThe parameters of the <code>create_monitors</code> system.\nThe parameters of the <code>create_windows</code> system.\nSource for <code>CustomCursor</code>.\nUsed to send custom events to <code>EventLoop</code>.\nA wrapper type around <code>winit::event_loop::EventLoopProxy</code> …\nThe <code>App</code> will update in response to the following, until an …\nDetermines how frequently an <code>App</code> should update.\nThe default event that can be used to wake the window loop …\nUse a custom image as a cursor (mouse pointer).\nA <code>Plugin</code> that uses <code>winit</code> to create and manage windows, and …\nSettings for the <code>WinitPlugin</code>.\nA resource mapping window entities to their <code>winit</code>-backend …\nHelpers for mapping window entities to accessibility types\nSynchronize available monitors as reported by <code>winit</code> with …\nCreates a <code>winit</code> window and associates it with our entity.\nCreates new windows on the <code>winit</code> backend for each entity …\nComponents to customize winit cursor\nDefault settings for desktop applications.\nMaps entities to <code>winit</code> window identifiers.\nDetermines how frequently the application can update when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new cursor from an rgba buffer.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nDefault settings for games.\nGets the “best” video-mode handle from a monitor.\nGets the “best” video mode which fits the given …\nGet the winit window that is associated with our entity.\nGet the entity associated with the winit window id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault settings for mobile.\nReactive mode, will update the app for any kind of event\nLow power mode\nRemove a window from winit.\nAllows the window (and the event loop) to be created on …\nSelects a monitor based on the given <code>MonitorSelection</code>.\nSend an event to the <code>EventLoop</code> from which this proxy was …\nDetermines how frequently the application can update when …\nReturns the current <code>UpdateMode</code>.\nStores <code>winit</code> windows by window identifier.\nMaps <code>winit</code> window identifiers to entities.\nCompute the physical window position for a given …\nReacts to device events, that will wake up the loop if it…\nReacts to user events, that will wake up the loop if it’…\nReacts to window events, that will wake up the loop if it…\nThe approximate time from the start of one update to the …\nMaps window entities to their <code>AccessKit</code> <code>Adapter</code>s.\nImplements winit-specific <code>AccessKit</code> functionality.\nForwards <code>AccessKit</code> <code>ActionRequest</code>s from winit to an event …\nMaps window entities to their respective <code>ActionRequest</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInsert into a window entity to set the cursor for that …\nCustom cursor image.\nCustom cursor image data.\nImage to use as a cursor.\nSystem provided cursor icon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe image must be in 8 bit int or 32 bit float rgba. PNG …\nX and Y coordinates of the hotspot in pixels. The hotspot …")
searchState.loadedDescShard("bevy", 10, "Shape lines until cursor, also scrolling to include cursor …\nShape lines until scroll\nShape lines until scroll\nGet the current buffer dimensions (width, height)\nCreates a skew transform.\nSource of the image.\nGet the current attribute spans\nSplit attributes list at an offset\nSplit off new line at index\nCursor indicating start of change\nStart index of cluster in original line\nStart collecting change\nSet Stretch\nSet Style\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the current tab width\nGet the current <code>tab_width</code>\nGet current text\nThe original text line\nText to be inserted or deleted\nReturns a new transform that represents the application of …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns the angle in degrees.\nReturns the angle in radians.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nVertical offset with respect to the origin specified when …\nReturns the result of a transformation matrix applied to …\nReturns the result of applying this transform to a point.\nReturns the result of applying this transform to a vector.\nCreates a translation transform.\nRemove anything in the cache with an age older than …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the associated verb for the command.\nPixel offset from the start of the [<code>BufferLine</code>]. This will …\nWidth of hitbox\nWidth of the line\nSet Weight\nGet the width of the <code>ShapeGlyph</code> in pixels, either using …\nGet the width of the <code>ShapeWord</code> in pixels, using the …\nWidth in pixels.\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>, mutably\nGet the internal <code>Buffer</code>, mutably\nEnumerate pixels in an Image, use <code>with_image</code> for better …\nGet the current <code>Wrap</code>\nX offset of hitbox\nInteger component of X offset in line\nBinning of fractional X offset\nX offset in line\nY offset of hitbox\nInteger component of Y offset in line\nBinning of fractional Y offset\nY offset in line\nA font’s raw data, typically backed by a Vec.\nGlyphs in cursive fonts generally use a more informal …\nA font database.\nA single font face info.\nA font family.\nFantasy fonts are primarily decorative or expressive fonts …\nA font’s path.\nA unique per database face ID.\nA form that is generally cursive in nature.\nA <code>Name</code> language.\nThe sole criterion of a monospace font is that all glyphs …\nThe name of a font family of choice.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA database query.\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nSerif fonts represent the formal text style for a script.\nA font’s raw data originating from a shared file mapping.\nA font source.\nA face width.\nAllows italic or oblique faces to be selected.\nSpecifies the weight of glyphs in the font, their degree …\nCreates a dummy ID.\nSelects a <code>FaceInfo</code> by <code>id</code>.\nReturns font face storage and the face index by <code>ID</code>.\nReturns an iterator over the internal storage.\nA list of family names.\nA prioritized list of font family names or generic family …\nReturns the generic family name or the <code>Family::Name</code> itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nAn unique ID.\nA face index in the <code>source</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Database</code> contains no font faces.\nReturns the number of font faces in the <code>Database</code>.\nLoads a font data into the <code>Database</code>.\nLoads a font file into the <code>Database</code>.\nLoads a font from the given source into the <code>Database</code> and …\nLoads font files from the selected directory into the …\nAttempts to load system fonts.\nTransfers ownership of shared font data back to the font …\nMakes the font data that backs the specified face id …\nIndicates that the font face is monospaced.\nCreate a new, empty <code>Database</code>.\nA PostScript name.\nReturns the primary language.\nPushes a user-provided <code>FaceInfo</code> to the database.\nPerforms a CSS-like query and returns the best matched …\nReturns a language region.\nRemoves a font face by <code>id</code> from the database.\nSets the family that will be used by <code>Family::Cursive</code>.\nSets the family that will be used by <code>Family::Fantasy</code>.\nSets the family that will be used by <code>Family::Monospace</code>.\nSets the family that will be used by <code>Family::SansSerif</code>.\nSets the family that will be used by <code>Family::Serif</code>.\nA font source.\nA font face stretch.\nSelects a normal, condensed, or expanded face from a font …\nA font face style.\nAllows italic or oblique faces to be selected.\nA font face weight.\nSpecifies the weight of glyphs in the font, their degree …\nExecutes a closure with a font’s data.\nIndicates that special handling of the beginning of text …\nText is set vertically from bottom to top.\nA cluster level.\nFlags for buffers.\nIndicates that a dotted circle should not be inserted in …\nDefines the direction in which text is to be read.\nIndicates that special handling of the end of text …\nA font face handle.\nA feature tag with an accompanying range specifying on …\nSerialize glyph extents.\nSerialize glyph flags.\nA buffer that contains the results of the shaping process.\nA glyph info.\nHolds the positions of the glyph in both horizontal and …\nInitial, unset direction.\nA script language.\nText is set horizontally from left to right.\nDo not serialize glyph advances, glyph offsets will …\nDo not serialize glyph cluster.\nDo no serialize glyph name.\nDo not serialize glyph position information.\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nIndicates that the <code>UNSAFE_TO_CONCAT</code> glyph-flag should be …\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nText is set horizontally from right to left.\nA text script.\nFlags used for serialization with a <code>BufferSerializer</code>.\nA reusable plan for shaping a text buffer.\nText is set vertically from top to bottom.\nA buffer that contains an input string ready for shaping.\nIndicates that the shape() call and its variants should …\nA font variation.\nAppends a character to a buffer with the given cluster …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the language as a string.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClear the contents of the buffer.\nClears the content of the glyph buffer and returns an empty\nAn index to the start of the grapheme cluster in the …\nRetrieve the cluster level of the buffer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the <code>Buffer</code>’s text direction.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the flags for this buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new [<code>Face</code>] from <code>ttf_parser::Face</code>.\nConverts an ISO 15924 script tag to a corresponding <code>Script</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a new <code>Face</code> from data.\nParses a <code>Feature</code> form a string.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nA selected glyph.\nGet the glyph infos.\nGet the glyph positions.\nGuess the segment properties (direction, language, script) …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the buffer contains no elements.\nReturns <code>true</code> if the buffer contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the buffer language.\nReturns the length of the data of the buffer.\nReturns the length of the data of the buffer.\nCreate a new <code>UnicodeBuffer</code>.\nReturns a plan that can be used for shaping any buffer …\nCreate a new <code>Feature</code> struct.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPushes a string to a buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nResets clusters.\nPredefined scripts.\nGet the ISO15924 script tag.\nConverts the glyph buffer content into a string.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the cluster level of the buffer.\nSet the text direction of the <code>Buffer</code>’s contents.\nSet the flags for this buffer.\nSet the buffer language.\nSets pixels per EM.\nSets point size per EM.\nSets the post-context for this buffer.\nSets the pre-context for this buffer.\nSet the script from an ISO15924 tag.\nSets font variations.\nShapes the buffer content using provided font and features.\nShapes the buffer content using the provided font and plan.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns script’s tag.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns face’s units per EM.\nIndicates that if input text is broken at the beginning of …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the X-axis before drawing it, …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the Y-axis before drawing it, …\nA grayscale bitmap with 2 bits per pixel.\nA packed grayscale bitmap with 2 bits per pixel.\nA grayscale bitmap with 4 bits per pixel.\nA packed grayscale bitmap with 4 bits per pixel.\nA grayscale bitmap with 8 bits per pixel.\nA monochrome bitmap.\nA packed monochrome bitmap.\nA color bitmap with 32 bits per pixel.\nA list of errors that can occur during a CFF glyph …\nA font face.\nThe face index is larger than the number of faces in the …\nA list of font face parsing errors.\nParsed face tables.\nA 32-bit signed fixed-point number (16.16).\nA trait for parsing raw binary data of fixed size.\nA type-safe wrapper for glyph ID.\nA form that is generally cursive in nature.\nA <code>Name</code> language.\nA slice-like container that converts internal binary data …\nA slice-like container that converts internal binary data …\nAn iterator over <code>LazyArray16</code>.\nAn iterator over <code>LazyArray32</code>.\nA line metrics.\nAn attempt to read out of bounds detected.\nThe <code>head</code> table is missing or malformed.\nThe <code>hhea</code> table is missing or malformed.\nThe <code>maxp</code> table is missing or malformed.\nA face that is neither italic not obliqued.\nA variation coordinate in a normalized coordinate system.\nA typically-sloped version of the regular face.\nA trait for glyph outline construction.\nFace permissions.\nA platform ID.\nA glyph’s raster image.\nA glyph raster image format.\nA raw font face.\nA list of all supported tables as raw data.\nA rectangle.\nA rectangle described by the left-lower and upper-right …\nA RGBA color in the sRGB color space.\nObject’s raw data size.\nA script metrics used by subscript and superscript.\nA face style.\nA raw table record.\nA 4-byte tag.\nAn affine transform.\nUnicode Ranges.\nFace data must start with <code>0x00010000</code>, <code>0x74727565</code>, …\nA font variation value.\nA variation axis.\nA face weight.\nA face width.\nThe ‘a’ component of the transform.\nAn Anchor Point Table implementation.\nThis module contains Apple Advanced Typography Layout …\nReturns tag value as <code>u32</code> number.\nReturns a horizontal face ascender.\nAn Axis Variations Table implementation.\nAn axis tag name.\nThe ‘b’ component of the transform.\nPerforms a binary search by specified <code>key</code>.\nPerforms a binary search by specified <code>key</code>.\nPerforms a binary search using specified closure.\nPerforms a binary search using specified closure.\nThe ‘c’ component of the transform.\nReturns face’s capital height.\nA Color Bitmap Data Table implementation.\nA Color Bitmap Location Table implementation.\nA Compact Font Format Table implementation.\nA Compact Font Format 2 Table implementation.\nAppends a ClosePath segment.\nA Character to Glyph Index Mapping Table implementation.\nReturns the number of palettes stored in the <code>COLR</code>+<code>CPAL</code> …\nA Color Table implementation.\nCombines two transforms with each other.\nChecks if ranges contain the specified character.\nA Color Palette Table implementation.\nAppends a CurveTo segment.\nThe ‘d’ component of the transform.\nA raw image data. It’s up to the caller to decode it.\nThe input font file data.\nReturns a horizontal face descender.\nThe ‘e’ component of the transform.\nThe ‘f’ component of the transform.\nA Feature Name Table implementation.\nReturns the number of fonts stored in a TrueType font …\nAn image format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new coordinate.\nCreates a new coordinate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Tag</code> from bytes.\nCreates a <code>Tag</code> from bytes.\nCreates a new <code>Face</code> from provided <code>RawFaceTables</code>.\nCreates a new <code>RawFace</code> from a raw data.\nCreates a new <code>Face</code> from a raw data.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nA Font Variations Table implementation.\nA Glyph Definition Table implementation.\nReturns a value at <code>index</code>.\nReturns a value at <code>index</code>.\nReturns the coordinate value as f2.14.\nReturns a bounding box that large enough to enclose any …\nA Glyph Data Table implementation.\nReturns a tight glyph bounding box.\nReturns glyph’s horizontal advance.\nReturns glyph’s horizontal side bearing.\nResolves a Glyph ID for a code point.\nResolves a Glyph ID for a glyph name.\nReturns glyph’s name.\nReturns a reference to a glyph’s raster image.\nReturns a reference to a glyph’s SVG image.\nResolves a variation of a Glyph ID from two code points.\nReturns glyph’s vertical advance.\nReturns glyph’s vertical side bearing.\nReturns glyph’s vertical origin according to Vertical …\nA Glyph Positioning Table implementation.\nA Glyph Substitution Table implementation.\nA Glyph Variations Table implementation.\nChecks that face has non-default variation coordinates.\nA Font Header Table implementation.\nReturns rect’s height.\nReturns face’s height.\nImage height.\nA Horizontal Header Table implementation.\nA Horizontal/Vertical Metrics Table implementation.\nA Horizontal/Vertical Metrics Variations Table …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that face is marked as <em>Bold</em>.\nReturns <code>true</code> if the glyph can be colored/painted using the …\nChecks whether a transform is the identity transform.\nChecks if array is empty.\nChecks if the array is empty.\nChecks that face is marked as <em>Italic</em>.\nChecks that face is marked as <em>Monospaced</em>.\nChecks if tag is null / <code>[0, 0, 0, 0]</code>.\nChecks that face is marked as <em>Oblique</em>.\nChecks if the face allows outline data to be embedded.\nChecks that face is marked as <em>Regular</em>.\nChecks if the face allows embedding a subset, further …\nChecks that face is variable.\nReturns face’s italic angle.\nA Kerning Table implementation.\nAn Extended Kerning Table implementation.\nReturns the last value.\nReturns array’s length.\nReturns array’s length.\nReturns a horizontal face line gap.\nAppends a LineTo segment.\nAn Index to Location Table implementation.\nA Math Table implementation.\nA Maximum Profile Table implementation.\nAn Extended Glyph Metamorphosis Table implementation.\nAppends a MoveTo segment.\nA Metrics Variations Table implementation.\nA Naming Table implementation.\nA list of name ID’s.\nAn axis name in the <code>name</code> table.\nReturns a list of names.\nCreates a new <code>LazyArray</code>.\nCreates a new <code>LazyArray</code>.\nCreates a new transform with the specified components.\nCreates a new <code>RgbaColor</code>.\nCreates a new translation transform.\nReturns a total number of glyphs in the face.\nThis module contains OpenType Layout supplementary tables …\nA OS/2 and Windows Metrics Table implementation.\nOutlines a glyph and returns its tight bounding box.\nPaints a color glyph from the <code>COLR</code> table.\nParses an object from a raw data.\nCreates a new <code>RawFace</code> from a raw data.\nCreates a new <code>Face</code> from a raw data.\nReturns face permissions.\nA pixels per em of the selected strike.\nLine position.\nA PostScript Table implementation.\nReturns the primary language.\nAppends a QuadTo segment.\nReturns a <code>RangeRecord</code> for a glyph.\nReturns the <code>RawFace</code> used to create this <code>Face</code>.\nReturns a language region.\nA Standard Bitmap Graphics Table implementation.\nSets a variation axis coordinate.\nReturns sub-array.\nReturns face’s strikeout metrics.\nReturns face style.\nReturns face’s subscript metrics.\nReturns face’s superscript metrics.\nAn SVG Table implementation.\nReturns the raw data of a selected table.\nReturns the raw data of a selected table.\nAn array of table records.\nReturns low-level face tables.\nLine thickness.\nReturns tag as 4-element byte array.\nReturns tag as 4-element byte array.\nReturns a numeric representation of a weight.\nReturns a numeric representation of a width.\nA Tracking Table implementation.\nReturns a horizontal typographic face ascender.\nReturns a horizontal typographic face descender.\nReturns a horizontal typographic face line gap.\nReturns face’s underline metrics.\nReturns Unicode Ranges.\nReturns face’s units per EM.\nAn axis value.\nReturns an iterator over variation axes.\nReturns the current normalized variation coordinates.\nReturns a vertical face ascender.\nReturns a vertical face descender.\nReturns a vertical face height.\nReturns a vertical face line gap.\nA Vertical Header Table implementation.\nA Vertical Origin Table implementation.\nReturns face’s weight.\nReturns rect’s width.\nReturns face’s width.\nImage width.\nHorizontal offset.\nReturns face’s x height.\nThe horizontal maximum of the rect.\nThe horizontal minimum of the rect.\nX offset.\nHorizontal face size.\nVertical offset.\nThe vertical maximum of the rect.\nThe vertical minimum of the rect.\nY offset.\nVertical face size.\nAn anchor point.\nAn Anchor Point Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nReturns a list of anchor points for the specified glyph.\nAn Extended State Table.\nA State Table entry.\nA lookup table.\nA legacy state entry used by StateTable.\nA State Table.\nA type-safe wrapper for a kerning value offset.\nPredefined classes.\nReturns a glyph class.\nReturns a glyph class.\nReturns a class entry.\nReturns a class entry.\nAdditional data.\nAdditional data.\nEntry flags.\nEntry flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf set, advance to the next glyph before going to the new …\nIf set, remember this glyph as the marked glyph.\nChecks that entry has an offset.\nIf set, push this glyph on the kerning stack.\nIf set, reset the kerning data (clear the stack).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns kerning at offset.\nProduces a new state.\nA new state.\nA new state.\nReturns the next offset.\nParses an Extended State Table from a stream.\nParses a lookup table from raw data.\nPredefined states.\nReturns a value associated with the specified glyph.\nReturns a value offset.\nAn axis value map.\nA list of segment maps.\nAn iterator over maps.\nAn Axis Variations Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA normalized coordinate value obtained using default …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any segments.\nReturns the number of segments.\nMaps coordinates.\nParses a table from raw data.\nThe segment maps array — one segment map for each axis …\nThe modified, normalized coordinate value.\nA Color Bitmap Data Table.\nReturns the argument unchanged.\nReturns a raster image for the glyph.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nA Color Bitmap Location Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nAn affine transformation matrix.\nA Compact Font Format Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the CID corresponding to a glyph ID.\nResolves a Glyph ID for a code point.\nReturns a glyph ID by a name.\nReturns a glyph name.\nReturns a glyph width.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a font transformation matrix.\nReturns a total number of glyphs in the font.\nOutlines a glyph.\nParses a table from raw data.\nA Compact Font Format 2 Table.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nA character encoding subtable variant.\nGlyph was found in the variation encoding table.\nA result of a variation glyph mapping.\nA character encoding subtable.\nA format 0 subtable.\nA format 10 subtable.\nA format 12 subtable.\nA format 13 subtable.\nA format 14 subtable.\nA format 2 subtable.\nA format 4 subtable.\nA format 6 subtable.\nA list of subtables.\nAn iterator over <code>Subtables</code>.\nA Character to Glyph Index Mapping Table.\nGlyph should be looked in other, non-variation tables.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for all codepoints contained in this subtable.\nSubtable encoding.\nFirst character code covered.\nFirst character code of subrange.\nA subtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a subtable at an index.\nJust a list of 256 8bit glyph IDs.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nMaps a character to a glyph ID.\nResolves a variation of a glyph ID from two code points.\nArray of glyph indices for the character codes covered.\nArray of glyph indexes for character codes in the range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any subtables.\nChecks that the current encoding is Unicode compatible.\nReturns the number of subtables.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a table from raw data.\nSubtable platform.\nA list of subtables.\nThe composite mode ‘Clear’.\nA ClipBox.\nThe composite mode ‘Color’.\nThe composite mode ‘ColorBurn’.\nThe composite mode ‘ColorDodge’.\nA gradient extend.\nA composite mode\nThe composite mode ‘Darken’.\nThe composite mode ‘Destination’.\nThe composite mode ‘DestinationAtop’.\nThe composite mode ‘DestinationIn’.\nThe composite mode ‘DestinationOut’.\nThe composite mode ‘DestinationOver’.\nThe composite mode ‘Difference’.\nThe composite mode ‘Exclusion’.\nA gradient extend.\nAn iterator over stops of a gradient.\nThe composite mode ‘HardLight’.\nThe composite mode ‘Hue’.\nThe composite mode ‘Lighten’.\nA linear gradient\nA paint with a linear gradient.\nThe composite mode ‘Luminosity’.\nThe composite mode ‘Multiply’.\nThe composite mode ‘Overlay’.\nThe <code>Pad</code> gradient extend mode.\nA paint.\nA trait for color glyph painting.\nThe composite mode ‘Plus’.\nA radial gradient\nA paint with a radial gradient.\nThe <code>Reflect</code> gradient extend mode.\nThe <code>Repeat</code> gradient extend mode.\nThe composite mode ‘Saturation’.\nThe composite mode ‘Screen’.\nThe composite mode ‘SoftLight’.\nA paint with a solid color.\nThe composite mode ‘Source’.\nThe composite mode ‘SourceAtop’.\nThe composite mode ‘SourceIn’.\nThe composite mode ‘SourceOut’.\nThe composite mode ‘SourceOver’.\nA sweep gradient\nA paint with a sweep gradient.\nA Color Table.\nThe composite mode ‘Xor’.\nThe x of the center.\nThe y of the center.\nThe color of the color stop.\nWhether the table contains a definition for the given …\nThe end angle.\nThe extend.\nThe extend.\nThe extend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the current table has version 0.\nOutline a glyph and store it.\nPaint the stored outline using the provided color.\nPaints the color glyph.\nParses a table from raw data.\nPop the last clip path.\nPop the last layer.\nPop the last transform.\nPush a new clip path using the currently stored outline.\nPush a new clip path using the clip box.\nPush a new layer with the given composite mode.\nPush a rotation transform.\nPush a scaling transform.\nPush a skewing transform.\nPush a transform.\nPush a translation transform.\nThe <code>r0</code> value.\nThe <code>r1</code> value.\nThe start angle.\nThe offset of the color stop.\nReturns an iterator over the stops of the linear gradient. …\nReturns an iterator over the stops of the radial gradient. …\nReturns an iterator over the stops of the sweep gradient. …\nThe <code>x0</code> value.\nThe <code>x0</code> value.\nThe <code>x1</code> value.\nThe <code>x1</code> value.\nThe <code>x2</code> value.\nThe horizontal maximum of the rect.\nThe horizontal minimum of the rect.\nThe <code>y0</code> value.\nThe <code>y0</code> value.\nThe <code>y1</code> value.\nThe <code>y1</code> value.\nThe <code>y2</code> value.\nThe vertical maximum of the rect.\nThe vertical minimum of the rect.\nA Color Palette Table.\nReturns the argument unchanged.\nReturns the color at the given index into the given …\nCalls <code>U::from(self)</code>.\nReturns the number of palettes.\nParses a table from raw data.\nA feature names.\nA list fo feature names.\nAn iterator over <code>FeatureNames</code>.\nA setting name.\nA Feature Name Table.\nThe index of the default setting in the <code>setting_names</code>.\nThe feature’s exclusive settings. If set, the feature …\nThe feature’s ID.\nFinds a feature name by ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a feature name at an index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any feature names.\nReturns the number of feature names.\nThe <code>name</code> table index for the feature’s name in a …\nThe <code>name</code> table index for the feature’s name in a …\nA list of feature names. Sorted by <code>FeatureName.feature</code>.\nParses a table from raw data.\nThe setting.\nThe feature’s setting names.\nA Font Variations Table.\nA variation axis.\nA list of variation axes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn axis name in the <code>name</code> table.\nParses a table from raw data.\nA glyph class.\nA Glyph Definition Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturns glyph’s class according to Glyph Class …\nReturns glyph’s mark attachment class according to Mark …\nReturns glyph’s variation delta at a specified index …\nChecks that face has Glyph Class Definition Table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that glyph is a mark according to Mark Glyph Sets …\nParses a table from raw data.\nA Glyph Data Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nAn Anchor Table.\nAn <code>Anchor</code> parsing helper.\nA <code>ValueRecord</code> pairs matrix used by <code>PairAdjustment</code>.\nA Cursive Attachment Positioning Subtable.\nA list of entry and exit <code>Anchor</code> pairs.\nA Device Table.\nA Device Table hinting values.\nAn array or ligature anchor matrices.\nA Mark Array.\nA Mark-to-Base Attachment Positioning Subtable.\nA Mark-to-Ligature Attachment Positioning Subtable.\nA Mark-to-Mark Attachment Positioning Subtable.\nA Pair Adjustment Positioning Subtable.\nA <code>ValueRecord</code> pairs set used by <code>PairAdjustment</code>.\nA list of <code>PairSet</code>s.\nA glyph positioning lookup subtable enumeration.\nA Single Adjustment Positioning Subtable.\nA Value Record.\nAn array of Value Records.\nA Device Table indexes into Item Variation Store.\nAn anchors matrix.\nA base coverage.\nNumber of columns in the matrix.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns an entry <code>Anchor</code> at index.\nReturns an exit <code>Anchor</code> at index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a <code>ValueRecord</code> at index.\nReturns a <code>ValueRecord</code> pair using the second glyph.\nReturns a value at <code>index</code>.\nReturns a <code>ValueRecord</code> pair using specified classes.\nReturns an <code>AnchorMatrix</code> at index.\nReturns contained data at index.\nReturns an <code>Anchor</code> at position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the array is empty.\nChecks if the array is empty.\nChecks if the set is empty.\nChecks if the array is empty.\nChecks if the array is empty.\nReturns array’s length.\nReturns array’s length.\nReturns the number of items.\nReturns the array length.\nReturns the array length.\nA mark coverage.\nA list of mark anchors.\nNumber of rows in the matrix.\nHorizontal value, in design units.\nHorizontal adjustment for advance, in design units — …\nA <code>Device</code> table with horizontal adjustment for advance.\nReturns X-axis delta.\nA <code>Device</code> table with horizontal value.\nHorizontal adjustment for placement, in design units.\nA <code>Device</code> table with horizontal adjustment for placement.\nVertical value, in design units.\nVertical adjustment for advance, in design units — only …\nA <code>Device</code> table with vertical adjustment for advance.\nReturns Y-axis delta.\nA <code>Device</code> table with vertical value.\nVertical adjustment for placement, in design units.\nA <code>Device</code> table with vertical adjustment for placement.\nA list of glyphs for Alternate Substitution Subtable.\nA set of <code>AlternateSet</code>.\nA Alternate Substitution Subtable.\nGlyph components for one ligature.\nA <code>Ligature</code> set.\nA list of <code>Ligature</code> sets.\nA Ligature Substitution Subtable.\nA Multiple Substitution Subtable.\nA Reverse Chaining Contextual Single Substitution Subtable.\nA sequence of glyphs for Multiple Substitution Subtable.\nA list of <code>Sequence</code> tables.\nA Single Substitution Subtable.\nA glyph substitution lookup subtable enumeration.\nArray of alternate glyph IDs, in arbitrary order.\nGlyph components for one ligature.\nReturns the subtable coverage.\nReturns the subtable coverage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLigature to substitute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the current subtable is <em>Reverse Chaining </em>…\nA list of substitute glyphs.\nA Glyph Variations Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nAn index format used by the Index to Location Table.\nA Font Header Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA bounding box that large enough to enclose any glyph from …\nAn index format used by the Index to Location Table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nUnits per EM.\nA Horizontal Header Table.\nFace ascender.\nFace descender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFace line gap.\nNumber of metrics in the <code>hmtx</code> table.\nParses a table from raw data.\nHorizontal/Vertical Metrics.\nA Horizontal/Vertical Metrics Table.\nReturns advance for a glyph.\nWidth/Height advance for <code>hmtx</code>/<code>vmtx</code>.\nSide bearings for glyph IDs greater than or equal to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of metrics indexed by glyph ID.\nSum of long metrics + bearings.\nParses a table from raw data.\nReturns side bearing for a glyph.\nLeft/Top side bearing for <code>hmtx</code>/<code>vmtx</code>.\nA Horizontal/Vertical Metrics Variations Table.\nReturns advance offset for a glyph.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nReturns side bearing offset for a glyph.\nA kerning subtable format.\nA kerning pair.\nA kerning subtable.\nA format 0 subtable.\nA format 2 subtable.\nA format 3 subtable.\nA list of subtables.\nAn iterator over kerning subtables.\nA Kerning Table.\nSubtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nIndicates that subtable has a cross-stream values.\nIndicates that subtable uses a state machine.\nIndicates that subtable is for horizontal text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any subtables.\nReturns left glyph ID.\nReturns the number of subtables.\nGlyphs pair.\nA list of kerning pairs.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a table from raw data.\nReturns right glyph ID.\nA list of subtables.\nKerning value.\nIndicates that subtable is variable.\nA container of Anchor Points used by <code>Subtable4</code>.\nA state machine entry.\nAn extended kerning subtable format.\nA kerning subtable.\nA format 0 subtable.\nA format 1 subtable.\nA format 2 subtable.\nA format 4 subtable.\nA format 6 subtable.\nA list of extended kerning subtables.\nAn iterator over extended kerning subtables.\nAn Extended Kerning Table.\nAn action index.\nAnchor points.\nSubtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mark and current anchor points at action index.\nReturns kerning for a pair of glyphs.\nReturns kerning at action index.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nReturns kerning for a pair of glyphs.\nIndicates that subtable has a cross-stream values.\nIndicates that subtable uses a state machine.\nIndicates that subtable is for horizontal text.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of kerning pairs.\nParses a table from raw data.\nA state table.\nA state table.\nA list of subtables.\nThe tuple count.\nIndicates that subtable is variable.\nLong offsets.\nShort offsets.\nAn Index to Location Table.\nReturns the argument unchanged.\nReturns glyph’s range in the <code>glyf</code> table.\nCalls <code>U::from(self)</code>.\nChecks if there are any offsets.\nReturns the number of offsets.\nParses a table from raw data.\nA Math Constants Table.\nA Glyph Assembly Table.\nA Math Glyph Construction Table.\nA mapping from glyphs to Math Glyph Construction Tables.\nA Math Glyph Info Table.\nDetails for a glyph part in an assembly.\nDescription of math glyph variants.\nA Math Kern Table.\nAn entry in a Math Kern Info Table.\nA Math Kern Info Table.\nA Math Value with optional device corrections.\nA mapping from glyphs to Math Values.\nGlyph part flags.\nA Math Table.\nA Math Variants Table.\nMaximum (ink) height of accent base that does not require …\nAdvance width/height, in design units, of the variant …\nA general recipe on how to construct a variant with large …\nAxis height of the font.\nThe kerning data for the bottom-left corner.\nThe kerning data for the bottom-right corner.\nMath positioning constants.\nNumber of heights at which the kern value changes.\nMinimum height required for a delimited expression …\nDevice corrections for this value.\nMinimum height of n-ary operators (such as integral and …\nLengths of the connectors on the end of the glyph, in font …\nGlyphs which are <em>extended shapes</em>.\nMaximum (ink) height of accent base that does not require …\nMinimum tolerated gap between the (ink) top of the …\nStandard shift down applied to the denominator in display …\nMinimum tolerated gap between the (ink) top of the …\nStandard shift down applied to the denominator.\nMinimum tolerated gap between the (ink) bottom of the …\nStandard shift up applied to the numerator in display …\nMinimum tolerated gap between the (ink) bottom of the …\nStandard shift up applied to the numerator.\nThickness of the fraction bar.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe full advance of the part, in font design units.\nReturns the value for the glyph or <code>None</code> if it is not …\nReturns the kerning info for the glyph or <code>None</code> if it is …\nReturns the construction for the glyph or <code>None</code> if it is …\nGlyph ID for the part.\nPer-glyph positioning information.\nThe correction height at the given index.\nConstructions for shapes growing in the horizontal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer-glyph italics correction values.\nThe italics correction of the assembled glyph.\nThe kern value at the given index.\nPer-glyph information for mathematical kerning.\nMinimum distance between baseline of the lower limit and …\nMinimum gap between (ink) top of the lower limit, and …\nWhite space to be left between math formulas to ensure …\nMinimum overlap of connecting glyphs during glyph …\nExtra white space reserved above the overbar.\nThickness of overbar.\nDistance between the overbar and the (ink) top of he base.\nParses a table from raw data.\nPart flags.\nParts the assembly is composed of.\nHeight of the bottom of the radical degree, if such is …\nSpace between the (ink) top of the expression and the bar …\nExtra white space reserved above the radical.\nNegative kern after the degree of a radical, if such is …\nExtra horizontal kern before the degree of a radical, if …\nThickness of the radical rule.\nSpace between the (ink) top of the expression and the bar …\nPercentage of scaling down for level 1 superscripts and …\nPercentage of scaling down for level 2 (scriptScript) …\nHorizontal distance between the top and bottom elements of …\nVertical distance between the ink of the top and bottom …\nExtra white space to be added after each subscript and …\nStandard shift down applied to the bottom element of a …\nStandard shift down applied to the bottom element of a …\nMinimum gap between (ink) bottom of the top element of a …\nMinimum gap between (ink) bottom of the top element of a …\nStandard shift up applied to the top element of a stack in …\nStandard shift up applied to the top element of a stack.\nLengths of the connectors on the start of the glyph, in …\nStandard shift down applied to the bottom element of the …\nMinimum gap between the ink of the stretched element, and …\nMinimum gap between the ink of the stretched element, and …\nStandard shift up applied to the top element of the …\nMinimum gap between the superscript and subscript ink.\nMinimum allowed drop of the baseline of subscripts …\nThe standard shift down applied to subscript elements.\nMaximum allowed height of the (ink) top of subscripts that …\nMaximum allowed drop of the baseline of superscripts …\nThe maximum level to which the (ink) bottom of superscript …\nMinimum allowed height of the (ink) bottom of superscripts …\nStandard shift up applied to superscript elements.\nStandard shift of superscripts relative to the base, in …\nPer-glyph horizontal positions for attaching mathematical …\nThe kerning data for the top-left corner.\nThe kerning data for the top-right corner.\nExtra white space reserved below the underbar.\nThickness of underbar.\nDistance between underbar and (ink) bottom of the base.\nMinimum distance between baseline of upper limit and (ink) …\nMinimum gap between the (ink) bottom of the upper limit, …\nThe X or Y value in font design units.\nThe ID of the variant glyph.\nPrepared variants of the glyph with varying advances.\nVariants and assembly recipes for growable glyphs.\nConstructions for shapes growing in the vertical direction.\nA Maximum Profile Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe total number of glyphs in the face.\nParses a table from raw data.\nA metamorphosis chain.\nA list of metamorphosis chains.\nAn iterator over metamorphosis chains.\nA contextual subtable state table trailing data.\nA contextual subtable.\nA subtable coverage.\nThe feature table is used to compute the sub-feature flags …\nA contextual subtable state table trailing data.\nAn insertion subtable.\nA ligature subtable.\nA subtable in a metamorphosis chain.\nA subtable kind.\nA list of subtables in a metamorphosis chain.\nAn iterator over a metamorphosis chain subtables.\nAn Extended Glyph Metamorphosis Table.\nA list of metamorphosis chains.\nLigature components.\nA subtable coverage.\nA current index.\nA current insert index.\nDefault chain features.\nComplement of flags for the settings that this feature and …\nFlags for the settings that this feature and setting …\nSubtable feature flags.\nA list of chain features.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsertion glyphs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this subtable will be applied to both horizontal …\nIf true, this subtable will process glyphs in descending …\nIf true, this subtable will process glyphs in logical order\nIf true, this subtable will only be applied to vertical …\nThe type of feature.\nA subtable kind.\nLigature actions.\nLigatures.\nReturns a Lookup at index.\nA mark index.\nA marked insert index.\nParses a table from raw data.\nThe feature’s setting (aka selector).\nThe contextual glyph substitution state table.\nA state table.\nA state table.\nA list of chain subtables.\nA Metrics Variations Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a metric offset by tag.\nParses a table from raw data.\nA Name Record.\nA list of face names.\nAn iterator over face names.\nA platform ID.\nA Naming Table.\nA platform-specific encoding ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a name at index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any name records.\nChecks that the current Name data has a Unicode encoding.\nReturns a Name language.\nA language ID.\nReturns a number of name records.\nA raw name data.\nA Name ID.\nA list of names.\nParses a table from raw data.\nA platform ID.\nReturns the Name’s data as a UTF-8 string.\nA Chained Contextual Lookup Subtable.\nA Chained Sequence Rule.\nA set of <code>ChainedSequenceRule</code>.\nA list of <code>ChainedSequenceRule</code> sets.\nA value of Class Definition Table.\nA Class Definition Table.\nA Contextual Lookup Subtable.\nA Coverage Table.\nA Feature.\nAn index in <code>FeatureList</code>.\nA list of <code>Feature</code> records.\nA Feature Variations Table.\nSimple glyph contexts.\nSimple glyph contexts.\nClass-based glyph contexts.\nClass-based glyph contexts.\nCoverage-based glyph contexts.\nCoverage-based glyph contexts.\nAn index in <code>LanguageSystemList</code>.\nA Language System Table.\nA list of <code>LanguageSystem</code> records.\nA Layout Table.\nA Lookup Table.\nLookup table flags.\nAn index in <code>LookupList</code>.\nA list of <code>Lookup</code> values.\nA trait for parsing Lookup subtables.\nA list of lookup subtables.\nAn iterator over lookup subtables.\nA record that describes a range of glyph IDs.\nA data storage used by <code>ScriptList</code>, <code>LanguageSystemList</code> and …\nA trait to parse item in <code>RecordList</code>.\nAn iterator over <code>RecordList</code> values.\nA Script Table.\nAn index in <code>ScriptList</code>.\nA list of <code>Script</code> records.\nA sequence rule record.\nA sequence rule.\nA set of <code>SequenceRule</code>s.\nA list of <code>SequenceRuleSet</code>s.\nAn index in <code>FeatureVariations</code>.\nContains either glyph IDs or glyph Classes.\nChecks that glyph is present.\nReturns the subtable coverage.\nReturns the subtable coverage.\nDefault language.\nLast glyph ID in the range\nArray of indices into the FeatureList, in arbitrary order.\nA list of all supported features.\nReturns RecordList value by <code>Tag</code>.\nReturns a <code>VariationIndex</code> for variation coordinates.\nReturns a <code>Feature</code> at specified indices.\nLookup qualifiers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns RecordList value by index.\nParses a subtable at index.\nReturns the coverage index of the glyph or <code>None</code> if it is …\nReturns the glyph class of the glyph (zero if it is not …\nReturns RecordList value index by <code>Tag</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator over subtables.\nChecks that RecordList is empty.\nChecks if there are any items.\nList of supported languages, excluding the default one. …\nReturns a number of items in the RecordList.\nReturns a number of items in the LookupSubtables.\nContains either glyph IDs or glyph Classes.\nA list of all lookups.\nIndex into GDEF mark glyph sets structure.\nParses raw data.\nParses raw data.\nIndex of a feature required for this language system.\nA list of all supported scripts.\nFirst glyph ID in the range\nAvailable subtables.\nScript tag.\nLanguage tag.\nCoverage Index of first glyph ID in range.\nUsed to substitute an alternate set of lookup tables to …\nArray of glyph IDs. Sorted.\nArray of glyph ranges. Ordered by <code>RangeRecord.start</code>.\nA form that is generally cursive in nature.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nFace permissions.\nA script metrics used by subscript and superscript.\nA face style.\nA OS/2 and Windows Metrics Table.\nUnicode Ranges.\nA face weight.\nA face width.\nReturns capital height.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if face is bold.\nChecks if the face allows outline data to be embedded.\nChecks if the face allows embedding a subset, further …\nParses a table from raw data.\nReturns face permissions.\nReturns strikeout metrics.\nReturns style.\nReturns subscript metrics.\nReturns superscript metrics.\nReturns typographic ascender.\nReturns typographic descender.\nReturns typographic line gap.\nReturns Unicode ranges.\nChecks if typographic metrics should be used.\nTable version.\nReturns weight class.\nReturns face width.\nReturns Windows ascender.\nReturns Windows descender.\nReturns x height.\nX offset.\nHorizontal face size.\nY offset.\nVertical face size.\nAn iterator over glyph names.\nA PostScript Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a glyph ID by a name.\nReturns a glyph name by ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlag that indicates that the font is monospaced.\nItalic angle in counter-clockwise degrees from the …\nReturns an iterator over glyph names.\nParses a table from raw data.\nUnderline metrics.\nA strike of glyphs.\nA list of <code>Strike</code>s.\nAn iterator over <code>Strikes</code>.\nA Standard Bitmap Graphics Table.\nSelects the best matching <code>Strike</code> based on <code>pixels_per_em</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a glyph data.\nReturns a strike at the index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any glyphs.\nChecks if there are any strikes.\nReturns the number of glyphs in this strike.\nReturns the number of strikes.\nParses a table from raw data.\nThe pixels per EM size for which this strike was designed.\nThe device pixel density (in PPI) for which this strike …\nA list of <code>Strike</code>s.\nAn SVG documents.\nA list of SVG documents.\nAn iterator over <code>SvgDocumentsList</code> values.\nAn SVG Table.\nThe SVG document data.\nA list of SVG documents.\nThe last glyph ID, <em>inclusive</em>, for the range covered by …\nReturns a SVG document data by glyph ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns SVG document data at index.\nReturns the glyphs range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the list is empty.\nReturns the number of SVG documents in the list.\nParses a table from raw data.\nThe first glyph ID for the range covered by this record.\nA Tracking Table.\nA single track.\nA track data.\nA list of tracks.\nAn iterator over <code>Tracks</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a track at index.\nHorizontal track data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any tracks.\nReturns the number of tracks.\nThe <code>name</code> table index for the track’s name.\nParses a table from raw data.\nA list of sizes.\nA list of tracks.\nA track value.\nA list of tracking values for each size.\nVertical track data.\nA Vertical Header Table.\nFace ascender.\nFace descender.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nFace line gap.\nNumber of metrics in the <code>vmtx</code> table.\nParses a table from raw data.\nA Vertical Origin Table.\nVertical origin metrics for the Vertical Origin Table.\nDefault origin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlyph ID.\nReturns glyph’s Y origin.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of metrics for each glyph.\nParses a table from raw data.\nY coordinate, in the font’s design coordinate system, of …\nLines will be broken without discrimination on any …\nLeftmost &amp; rightmost characters are equidistant to the …\nFailed to add glyph to a newly created atlas for some …\nFailed to get scaled glyph image for cache key\nAn <code>Asset</code> that contains the data for a loaded font, if …\nWords are spaced so that leftmost &amp; rightmost characters …\nDescribes the horizontal alignment of multiple lines of …\nLeftmost character is immediately to the right of the …\nDetermines how lines will be broken when preventing text …\nFont was not found, this could be that the font has not …\nNo soft wrapping, where text is automatically broken up …\nRightmost character is immediately to the left of the …\nThe top-level 2D text component.\n<code>Text2dBundle</code> was removed in favor of required components. …\n2d alias for <code>TextReader</code>.\n2d alias for <code>TextWriter</code>.\nThe color of the text for this section.\nErrors related to the textsystem\n<code>TextFont</code> determines the style of a text span within a …\nComponent with text format settings for a block of text.\nA span of UI text in a tree of spans under an entity with …\nUses the Unicode Line Breaking Algorithm. Lines will be …\nWraps at the word level, or fallback to character level if …\nContent of a font file as bytes\nThe specific font face to use, as a <code>Handle</code> to a <code>Font</code> asset.\nThe vertical height of rasterized glyphs in the font atlas …\nThe antialiasing method to use when rendering text.\nThe text’s internal alignment. Should not affect its …\nHow the text should linebreak when running out of the …\n<code>Time</code> will be automatically updated each frame using an …\nThe message could not be sent because the channel is …\nThe fixed timestep game clock following virtual time.\nThe message could not be sent because the channel is full.\n<code>Time</code> will be incremented by the specified <code>Duration</code> each …\n<code>Time</code> will be updated to the specified <code>Instant</code> value each …\nRun once and stop.\nReal time clock representing elapsed wall clock time.\nReset when finished.\nA Stopwatch is a struct that tracks elapsed time when …\nA generic clock resource that tracks how much it has …\nAdds time functionality to Apps.\nChannel resource used to receive time from the render …\nChannel resource used to send time from the render world.\nUpdates the elapsed time. Any system that interacts with …\nConfiguration resource used to determine how the time …\nTracks elapsed time. Enters the finished state once …\nSpecifies <code>Timer</code> behavior.\nAn error returned from the <code>try_send</code> method.\nThe virtual game clock representing game time.\nCommon run conditions\nCreates channels used for sending time between the render …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the elapsed time since the last <code>reset</code> of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the stopwatch is paused.\nCreate a new unpaused <code>Stopwatch</code> with no elapsed time.\nPauses the stopwatch. Any call to <code>tick</code> while paused will …\nThe time prelude.\nResets the stopwatch. The reset doesn’t affect the …\nSets the elapsed time of the stopwatch.\nAdvance the stopwatch by <code>delta</code> seconds. If the stopwatch …\nThe system used to update the <code>Time</code> used by app logic. If …\nUnpauses the stopwatch. Resume the effect of ticking on …\nAdvances <code>Time&lt;Virtual&gt;</code> and <code>Time</code> based on the elapsed …\nRun condition that is active on a regular time interval, …\nRun condition that is active on a regular time interval, …\nRun condition that is active <em>once</em> after the specified …\nRun condition that is active <em>once</em> after the specified …\nRun condition that is active when the <code>Time&lt;Virtual&gt;</code> clock …\nRun condition that is active <em>indefinitely</em> after the …\nRun condition that is active <em>indefinitely</em> after the …\nThe fixed timestep game clock following virtual time.\nRun once and stop.\nReal time clock representing elapsed wall clock time.\nReset when finished.\nA generic clock resource that tracks how much it has …\nTracks elapsed time. Enters the finished state once …\nSpecifies <code>Timer</code> behavior.\nThe virtual game clock representing game time.\nThe base plugin for handling <code>Transform</code> components\nA trait for point transformation methods.\nPropagates changes in transform to children’s …\nSet enum for the systems relating to transform propagation\nTransform related bundles\nExtension to <code>EntityCommands</code> to modify <code>bevy_hierarchy</code> …\nThe basic components of the transform crate\nHelpers related to computing global transforms System …\nTransform related plugins\nSystems responsible for transform propagation\nTransform related traits\nTransform a point.\nA <code>Bundle</code> of the <code>Transform</code> and <code>GlobalTransform</code> <code>Component</code>s, …\nThe global transform of the entity.\nThe transform of the entity.\nCommand similar to <code>AddChild</code>, but updating the child …\nCollection of methods similar to <code>BuildChildren</code>, but …\nCommand similar to <code>RemoveParent</code>, but updating the child …\nChild entity to add.\n<code>Entity</code> whose parent must be removed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParent entity to add the child to.\nMake this entity parentless while preserving this entity’…\nChange this entity’s parent while preserving this entity…\n<code>GlobalTransform</code> is an affine transformation from …\nDescribe the position of an entity. If the entity has a …\nRotation of the entity.\nScale of the entity.\nPosition of the entity. In 2d, the last value of the <code>Vec3</code> …\nError returned by <code>TransformHelper::compute_global_transform</code>…\nAn ancestor is missing. This probably means that your …\nThe entity or one of its ancestors is missing the <code>Transform</code>…\nThe entity does not exist.\nSystem parameter for computing up-to-date <code>GlobalTransform</code>s.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base plugin for handling <code>Transform</code> components\nPropagates changes in transform to children’s …\nSet enum for the systems relating to transform propagation\nUpdate <code>GlobalTransform</code> component of entities based on …\nUpdate <code>GlobalTransform</code> component of entities that aren’t …\nA trait for point transformation methods.\nTransform a point.\nIndependent of all other nodes, but relative to its parent …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nAutomatically determine the value based on the context and …\nUse the parent node’s <code>AlignItems</code> value to determine how …\nUse the parent node’s <code>JustifyItems</code> value to determine …\nTrack minimum size should be automatically sized\nTrack maximum size should be automatically sized\nRepeat the track to fill available space\nRepeat the track to fill available space but collapse any …\nThe amount of space available to a node in a given axis …\nThe background color of the node\nThe items are packed such that their baselines align.\nThe items are packed such that their baselines align.\nThis item will be aligned at the baseline.\nThis item will be aligned at the baseline.\nBlocks interaction\nUse CSS Block layout model to determine the position of …\nClip any content that overflows outside the border box\nThe border color of the UI node.\nUsed to add rounded corners to a UI node. You can set a UI …\nThe calculated clip of the node\nThe items are packed along the center of the axis.\nThe items are packed along the center of the axis\nThis item will be aligned along the center of the axis.\nThis item will be aligned along the center of the axis.\nThe items are packed along the center of the axis.\nThe items are packed along the center of the axis.\nHide overflowing items by clipping.\nFlex from top to bottom.\nItems are placed by filling each column in turn, adding …\nCombines <code>Column</code> with the dense packing algorithm.\nFlex from bottom to top.\nProvides the computed size and layout properties of the …\nClip any content that overflows outside the content box\nA node with a <code>ContentSize</code> component is a node where its …\nRepeat the track fixed number of times\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe amount of space available is the specified number of …\nDefines the layout model used by this node.\nThe items are packed towards the end of the axis.\nThe items are packed towards the end of the axis.\nThis item will be aligned with the end of the axis.\nThis item will be aligned with the end of the axis.\nThe items are packed towards the end of the axis.\nThe items are packed towards the end of the axis.\nTrack maximum size should be sized according to the …\nTrack maximum size should be sized according to the …\nA <code>FixedMeasure</code> is a <code>Measure</code> that ignores all constraints …\nUse Flexbox layout model to determine the position of this …\nDefines how flexbox items are ordered within a flexbox\nThe items are packed towards the end of the axis, unless …\nThis item will be aligned with the end of the axis, unless …\nThe items are packed towards the end of the axis, unless …\nThe items are packed towards the end of the axis, unless …\nThe items are packed towards the start of the axis, unless …\nThis item will be aligned with the start of the axis, …\nThe items are packed towards the start of the axis, unless …\nThe items are packed towards the start of the axis, unless …\nDefines if flexbox items appear on a single line or on …\nAfter this label, input interactions with UI entities have …\nDescribes whether the node should block interactions with …\nThe dimension as a fraction of the total available grid …\n<code>GlobalZIndex</code> allows a <code>Node</code> entity anywhere in the UI …\nA contiguous sequence of text glyphs from the same section\nUse CSS Grid layout model to determine the position of …\nControls whether grid items are placed row-wise or …\nRepresents the position of a grid item in a single axis.\nErrors that occur when setting constraints for a …\nA <code>GridTrack</code> is a Row or Column of a CSS Grid. This struct …\nHow many times to repeat a repeated grid track\nHide overflowing items by influencing layout and then …\nThe node has been hovered over\nDescribes what type of input interaction has occurred for …\nMarker used to identify default cameras, they will have …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nAfter this label, the ui layout state has been updated.\nThe amount of space available is indefinite and the node …\nTrack minimum size should be content sized under a …\nTrack maximum size should be content sized under a …\nA <code>Measure</code> is used to compute the size of a ui node when …\nThe amount of space available is indefinite and the node …\nTrack minimum size should be content sized under a …\nTrack maximum size should be content sized under a …\nSingle line, will overflow if needed.\nThe base component for UI entities. It describes UI layout …\nA type to serve as Taffy’s node context (which allows …\nMain query for <code>ui_focus_system</code>\nAutomatically generated <code>WorldQuery</code> item type for <code>NodeQuery</code>…\nAutomatically generated <code>WorldQuery</code> type for a read-only …\nAutomatically generated <code>WorldQuery</code> item type for …\nThe type of UI node. This is used to determine how to …\nNothing has happened\nUse no layout, don’t render this node and its children.\nUI will render without anti-aliasing\nUI will render with anti-aliasing\nThe <code>Outline</code> component adds an outline outside the edge of …\nWhether to show or hide overflowing items\nWhether to show or hide overflowing items\nUsed to determine the bounds of the visible area when a UI …\nThe bounds of the visible area when a UI node is clipped.\nClip any content that overflows outside the padding box\nLets interaction pass through\nSet the value as a percentage of its parent node’s …\nTrack minimum size should be a percentage value\nTrack maximum size should be a percentage value\nThe strategy used to position this node\nUI systems ordered after <code>UiSystem::Layout</code>.\nAll UI systems in <code>PostUpdate</code> will run in or after this …\nThe node has been pressed.\nSet this value in logical pixels.\nTrack minimum size should be a fixed pixel value\nTrack maximum size should be a fixed pixel value\nRelative to all other nodes with the <code>PositionType::Relative</code>…\nA component storing the position of the mouse relative to …\nRepresents a <em>possibly</em> repeated <code>GridTrack</code>.\nRepresents the resolved border radius values for a UI node.\nSame way as text direction along the main axis.\nItems are placed by filling each row in turn, adding new …\nCombines <code>Row</code> with the dense packing algorithm.\nOpposite way as text direction along the main axis.\nScroll overflowing items.\nThe scroll position of the node.\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between any …\nThe items are distributed such that the gap between any …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between and …\nAfter this label, the <code>UiStack</code> resource has been updated.\nThe items are packed towards the start of the axis.\nThe items are packed towards the start of the axis.\nThis item will be aligned with the start of the axis.\nThis item will be aligned with the start of the axis.\nThe items are packed towards the start of the axis.\nThe items are packed towards the start of the axis.\nContains entities whose Interaction should be set to None\nThe items are stretched to fill the space they’re given.\nThe items are stretched to fill the space they’re given.\nThis item will be stretched to fill the container.\nThis item will be stretched to fill the space it’s given.\nThe items are stretched to fill the container along the …\nThe items are stretched to fill the container along the …\nIndicates that this root <code>Node</code> entity should be rendered to …\nMarker for controlling whether Ui is rendered with or …\nNumber of shadow samples. A larger value will result in …\nMaterials are used alongside <code>UiMaterialPlugin</code> and …\nRender pipeline data for a given <code>UiMaterial</code>\nAdds the necessary ECS resources and render logic to …\nThe basic plugin for Bevy UI\nA type which is commonly used to define margins, paddings …\nThe current scale of the UI.\nThe current UI stack, which contains all UI nodes ordered …\nThe label enum labeling the types of systems in the Bevy UI\nSet this value in percent of the viewport’s larger …\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nSet this value in percent of the viewport’s smaller …\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nRepresents the possible value types for layout properties.\nSet this value in percent of the viewport height\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nShow overflowing items.\nSet this value in percent of the viewport width\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nMultiple lines, if needed.\nSame as <code>FlexWrap::Wrap</code> but new lines will appear before …\nIndicates that this <code>Node</code> entity’s front-to-back ordering …\nWhether to add the UI picking backend to the app.\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nThe aspect ratio of the node (defined as <code>width / height</code>)\nBlurriness of the shadow\nThe amount of space between the margins of a node and its …\nThe value corresponding to the bottom side of the UI rect.\nThe vertical position of the bottom edge of the node.\nBox shadows rendering\nThe rect of the clip\nThe color of the outline.\nThe shadow’s color\nThe size of the gutters between items in a horizontal …\nCompute free_space given the passed used_space\nWhich layout algorithm to use when laying out this node’…\nIf set to false, the UI’s rendering systems won’t be …\nExperimental features are not yet stable and may change or …\nExtracts all UI elements associated with a camera into the …\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nCreates a <code>ContentSize</code> with a <code>Measure</code> that always returns …\nThe initial length of a flexbox in the main axis, before …\nWhether a Flexbox container should be a row or a column. …\nDefines how much a flexbox item should grow if there’s …\nDefines how much a flexbox item should shrink if there’s …\nWhether a Flexbox container should wrap its contents onto …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nDefines the size of implicitly created columns. Columns …\nControls whether automatically placed grid items are …\nDefines the size of implicitly created rows. Rows are …\nThe column in which a grid item starts and how many …\nThe row in which a grid item starts and how many rows it …\nDefines the number of columns a grid has and the sizes of …\nDefines the number of rows a grid has and the sizes of …\nThe ideal height of the node. <code>height</code> is used when it is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to Option Definite values become Some(value). …\nReturns true for definite values, else false\nCompare equality with another AvailableSpace, treating …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nThe value corresponding to the left side of the UI rect.\nThe horizontal position of the left edge of the node.\nIf passed value is Some then return …\nThe amount of space around a node outside its border.\nWidth of the margin on each edge of the visual box in …\nThe maximum height of the node. <code>max_height</code> is used if it …\nThe maximum width of the node. <code>max_width</code> is used if it is …\nIf passed value is Some then return …\nCalculate the size of the node given the constraints.\nThe minimum height of the node. <code>min_height</code> is used if it …\nThe minimum width of the node. <code>min_width</code> is used if it is …\nA helper function to check if the mouse is over the node\nThis module contains basic node bundles used to build UIs\nCursor position relative to the size and position of the …\nVisible area of the Node relative to the size of the …\nThe amount of space between a node’s outline the edge of …\nHow far across the node is scrolled, in logical pixels. (0 …\nHow far down the node is scrolled, in logical pixels. (0 = …\nReturn self if definite or a default value\nReturn self if definite or a the result of the default …\nWhether overflowing content should be displayed or clipped.\nHow the bounds of clipped content should be determined\nThe amount of space between the edges of a node and its …\nA picking backend for UI nodes.\nWhether a node should be laid out in-flow with, or …\nThe UI prelude.\nThe range of vertices inside the <code>UiMaterialMeta</code>\nThe value corresponding to the right side of the UI rect.\nThe horizontal position of the right edge of the node.\nThe size of the gutters between items in a vertical …\nSet a <code>Measure</code> for the UI node entity with this component\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_table</code> for each member that implements …\nSAFETY: we call <code>set_table</code> for each member that implements …\nThe values here should match the values for the constants …\nHow much the shadow should spread outward.\nZ offsets of “extracted nodes” for a given entity. …\nThe value corresponding to the top side of the UI rect.\nThe vertical position of the top edge of the node.\nThe system that sets Interaction for all UI elements based …\nUpdates the UI’s layout tree, computes the new layout …\nList of UI nodes ordered from back-to-front\nReturn the definite value. Panic is the value is not …\nReturn the definite value or a default value\nReturn the definite value or the result of the default …\nThis module contains systems that update the UI when …\nVisible unclipped area\nThis module contains the basic building blocks of Bevy’s …\nThe ideal width of the node. <code>width</code> is used when it is …\nThe width of the outline.\nWhether to show or clip overflowing items on the x axis\nHorizontal offset\nWhether to show or clip overflowing items on the y axis\nVertical offset\nBorder thickness of the UI node. Ordering: left, top, …\nBorder radius of the UI node. Ordering: top left, top …\nIndices into <code>ExtractedUiNodes::glyphs</code>\nContains the vertices and bind groups to be sent to the GPU\nA plugin that enables the rendering of box shadows.\nDescription of a shadow to be sorted and queued for …\nList of extracted shadows to be sorted and queued for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of samples, a higher value results in better …\nPrints a debug representation of the computed layout of …\nMarker component for entities that should be ignored …\nSystem param that gives access to UI children utilities, …\nSystem param that allows iteration of all UI root nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the UI parent of the provided entity, skipping …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven an entity in the UI hierarchy, check if its set of …\nReturns <code>true</code> if the given entity is either a <code>Node</code> or a …\nIterates the <code>GhostNode</code>s between this entity and its UI …\nIterates the children of <code>entity</code>, skipping over <code>GhostNode</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of space available to a node in a given axis …\nA node with a <code>ContentSize</code> component is a node where its …\nThe amount of space available is the specified number of …\nA <code>FixedMeasure</code> is a <code>Measure</code> that ignores all constraints …\nThe amount of space available is indefinite and the node …\nA <code>Measure</code> is used to compute the size of a ui node when …\nThe amount of space available is indefinite and the node …\nA type to serve as Taffy’s node context (which allows …\nCalculate the size of the node given the constraints.\nA UI node that is a button\nA UI node that is an image\nA UI node that is rendered using a <code>UiMaterial</code>\nThe basic UI node.\nThe background color, which serves as a “fill” for …\nThe color of the background that will fill the containing …\nThe background color that will fill the containing node\nThe color of the Node’s border\nThe color of the Node’s border\nThe border radius of the node\nThe border radius of the node\nThe border radius of the node\nMarker component that signals this node is a button\nThe calculated size based on the given image\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe image of the node.\nThe image of the node\nThe size of the image in pixels\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nDescribes whether and how the button has been interacted …\nThe <code>UiMaterial</code> used to render the node.\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nThe scroll position of the node,\nThe transform of the node\nThe transform of the node\nThe transform of the node\nThe transform of the node\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nMain query from bevy’s <code>ui_focus_system</code>\nAutomatically generated <code>WorldQuery</code> item type for <code>NodeQuery</code>…\nAutomatically generated <code>WorldQuery</code> type for a read-only …\nAutomatically generated <code>WorldQuery</code> item type for …\nA plugin that adds picking support for UI nodes.\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_table</code> for each member that implements …\nSAFETY: we call <code>set_table</code> for each member that implements …\nComputes the UI node entities under each pointer.\nIndependent of all other nodes, but relative to its parent …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nThe sprite will take on the size of the image by default, …\nAutomatically determine the value based on the context and …\nUse the parent node’s <code>AlignItems</code> value to determine how …\nUse the parent node’s <code>JustifyItems</code> value to determine …\nTrack minimum size should be automatically sized\nTrack maximum size should be automatically sized\nRepeat the track to fill available space\nRepeat the track to fill available space but collapse any …\nThe background color of the node\nThe items are packed such that their baselines align.\nThe items are packed such that their baselines align.\nThis item will be aligned at the baseline.\nThis item will be aligned at the baseline.\nUse CSS Block layout model to determine the position of …\nClip any content that overflows outside the border box\nThe border color of the UI node.\nUsed to add rounded corners to a UI node. You can set a UI …\nStruct defining a <code>Sprite</code> border with padding values\nMarker struct for buttons\nA UI node that is a button\nThe calculated clip of the node\nThe items are packed along the center of the axis.\nThe items are packed along the center of the axis\nThis item will be aligned along the center of the axis.\nThis item will be aligned along the center of the axis.\nThe items are packed along the center of the axis.\nThe items are packed along the center of the axis.\nHide overflowing items by clipping.\nFlex from top to bottom.\nItems are placed by filling each column in turn, adding …\nCombines <code>Column</code> with the dense packing algorithm.\nFlex from bottom to top.\nProvides the computed size and layout properties of the …\nClip any content that overflows outside the content box\nRepeat the track fixed number of times\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nDefines the layout model used by this node.\nThe items are packed towards the end of the axis.\nThe items are packed towards the end of the axis.\nThis item will be aligned with the end of the axis.\nThis item will be aligned with the end of the axis.\nThe items are packed towards the end of the axis.\nThe items are packed towards the end of the axis.\nTrack maximum size should be sized according to the …\nTrack maximum size should be sized according to the …\nUse Flexbox layout model to determine the position of this …\nDefines how flexbox items are ordered within a flexbox\nThe items are packed towards the end of the axis, unless …\nThis item will be aligned with the end of the axis, unless …\nThe items are packed towards the end of the axis, unless …\nThe items are packed towards the end of the axis, unless …\nThe items are packed towards the start of the axis, unless …\nThis item will be aligned with the start of the axis, …\nThe items are packed towards the start of the axis, unless …\nThe items are packed towards the start of the axis, unless …\nDefines if flexbox items appear on a single line or on …\nThe dimension as a fraction of the total available grid …\n<code>GlobalZIndex</code> allows a <code>Node</code> entity anywhere in the UI …\nUse CSS Grid layout model to determine the position of …\nControls whether grid items are placed row-wise or …\nRepresents the position of a grid item in a single axis.\nErrors that occur when setting constraints for a …\nA <code>GridTrack</code> is a Row or Column of a CSS Grid. This struct …\nHow many times to repeat a repeated grid track\nHide overflowing items by influencing layout and then …\nThe node has been hovered over\nA UI node that is an image\nA UI Node that renders an image.\nDescribes what type of input interaction has occurred for …\nMarker used to identify default cameras, they will have …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nMarker struct for labels\nA UI node that is rendered using a <code>UiMaterial</code>\nTrack minimum size should be content sized under a …\nTrack maximum size should be content sized under a …\nTrack minimum size should be content sized under a …\nTrack maximum size should be content sized under a …\nSingle line, will overflow if needed.\nThe base component for UI entities. It describes UI layout …\nThe basic UI node.\nNothing has happened\nUse no layout, don’t render this node and its children.\nUI will render without anti-aliasing\nUI will render with anti-aliasing\nThe <code>Outline</code> component adds an outline outside the edge of …\nWhether to show or hide overflowing items\nWhether to show or hide overflowing items\nUsed to determine the bounds of the visible area when a UI …\nThe bounds of the visible area when a UI node is clipped.\nClip any content that overflows outside the padding box\nSet the value as a percentage of its parent node’s …\nTrack minimum size should be a percentage value\nTrack maximum size should be a percentage value\nThe strategy used to position this node\nThe node has been pressed.\nSet this value in logical pixels.\nTrack minimum size should be a fixed pixel value\nTrack maximum size should be a fixed pixel value\nRelative to all other nodes with the <code>PositionType::Relative</code>…\nRepresents a <em>possibly</em> repeated <code>GridTrack</code>.\nRepresents the resolved border radius values for a UI node.\nSame way as text direction along the main axis.\nItems are placed by filling each row in turn, adding new …\nCombines <code>Row</code> with the dense packing algorithm.\nOpposite way as text direction along the main axis.\nScroll overflowing items.\nThe scroll position of the node.\nDefines how a texture slice scales when resized\nThe texture will be cut in 9 slices, keeping the texture …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between any …\nThe items are distributed such that the gap between any …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between and …\nControls how the image is altered when scaled.\nThe items are packed towards the start of the axis.\nThe items are packed towards the start of the axis.\nThis item will be aligned with the start of the axis.\nThis item will be aligned with the start of the axis.\nThe items are packed towards the start of the axis.\nThe items are packed towards the start of the axis.\nThe slice will be stretched to fit the area\nThe items are stretched to fill the space they’re given.\nThe items are stretched to fill the space they’re given.\nThis item will be stretched to fill the container.\nThis item will be stretched to fill the space it’s given.\nThe items are stretched to fill the container along the …\nThe items are stretched to fill the container along the …\nIndicates that this root <code>Node</code> entity should be rendered to …\nThe top-level UI text component.\n<code>TextBundle</code> was removed in favor of required components. …\nUI alias for <code>TextReader</code>.\nUI alias for <code>TextWriter</code>.\nSlices a texture using the <strong>9-slicing</strong> technique. This …\nThe slice will be tiled to fit the area\nThe texture will be repeated if stretched beyond …\nMarker for controlling whether Ui is rendered with or …\nNumber of shadow samples. A larger value will result in …\nMaterials are used alongside <code>UiMaterialPlugin</code> and …\nAdds the necessary ECS resources and render logic to …\nA type which is commonly used to define margins, paddings …\nThe current scale of the UI.\nSet this value in percent of the viewport’s larger …\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nSet this value in percent of the viewport’s smaller …\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nRepresents the possible value types for layout properties.\nSet this value in percent of the viewport height\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nShow overflowing items.\nSet this value in percent of the viewport width\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nMultiple lines, if needed.\nSame as <code>FlexWrap::Wrap</code> but new lines will appear before …\nIndicates that this <code>Node</code> entity’s front-to-back ordering …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nThe aspect ratio of the node (defined as <code>width / height</code>)\nThe background color, which serves as a “fill” for …\nThe color of the background that will fill the containing …\nThe background color that will fill the containing node\nBlurriness of the shadow\nThe sprite borders, defining the 9 sections of the image\nThe amount of space between the margins of a node and its …\nThe color of the Node’s border\nThe color of the Node’s border\nThe border radius of the node\nThe border radius of the node\nThe border radius of the node\nPixel padding to the bottom\nThe value corresponding to the bottom side of the UI rect.\nThe vertical position of the bottom edge of the node.\nMarker component that signals this node is a button\nThe calculated size based on the given image\nDefines how the center part of the 9 slices will scale\nThe rect of the clip\nThe tint color used to draw the image.\nThe color of the outline.\nThe shadow’s color\nThe size of the gutters between items in a horizontal …\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nWhich layout algorithm to use when laying out this node’…\nThe initial length of a flexbox in the main axis, before …\nWhether a Flexbox container should be a row or a column. …\nDefines how much a flexbox item should grow if there’s …\nDefines how much a flexbox item should shrink if there’s …\nWhether a Flexbox container should wrap its contents onto …\nWhether the image should be flipped along its x-axis.\nWhether the image should be flipped along its y-axis.\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nDefines the size of implicitly created columns. Columns …\nControls whether automatically placed grid items are …\nDefines the size of implicitly created rows. Rows are …\nThe column in which a grid item starts and how many …\nThe row in which a grid item starts and how many rows it …\nDefines the number of columns a grid has and the sizes of …\nDefines the number of rows a grid has and the sizes of …\nThe ideal height of the node. <code>height</code> is used when it is …\nThe image of the node.\nThe image of the node\nHandle to the texture.\nControls how the image is altered to fit within the layout …\nThe size of the image in pixels\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nDescribes whether and how the button has been interacted …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nPixel padding to the left\nThe value corresponding to the left side of the UI rect.\nThe horizontal position of the left edge of the node.\nThe amount of space around a node outside its border.\nWidth of the margin on each edge of the visual box in …\nThe <code>UiMaterial</code> used to render the node.\nDefines the maximum scale of the 4 corner slices (default …\nThe maximum height of the node. <code>max_height</code> is used if it …\nThe maximum width of the node. <code>max_width</code> is used if it is …\nThe minimum height of the node. <code>min_height</code> is used if it …\nThe minimum width of the node. <code>min_width</code> is used if it is …\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nThe amount of space between a node’s outline the edge of …\nHow far across the node is scrolled, in logical pixels. (0 …\nHow far down the node is scrolled, in logical pixels. (0 = …\nWhether overflowing content should be displayed or clipped.\nHow the bounds of clipped content should be determined\nThe amount of space between the edges of a node and its …\nWhether a node should be laid out in-flow with, or …\nAn optional rectangle representing the region of the image …\nPixel padding to the right\nThe value corresponding to the right side of the UI rect.\nThe horizontal position of the right edge of the node.\nThe size of the gutters between items in a vertical …\nThe scroll position of the node,\nDefines how the 4 side parts of the 9 slices will scale\nHow much the shadow should spread outward.\nThe (optional) texture atlas used to render the image.\nPixel padding to the top\nThe value corresponding to the top side of the UI rect.\nThe vertical position of the top edge of the node.\nThe transform of the node\nThe transform of the node\nThe transform of the node\nThe transform of the node\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nVisible unclipped area\nThe ideal width of the node. <code>width</code> is used when it is …\nThe width of the outline.\nWhether to show or clip overflowing items on the x axis\nHorizontal offset\nWhether to show or clip overflowing items on the y axis\nVertical offset\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nThe slice will repeat when the ratio between the <em>drawing </em>…\nThe texture will repeat when the ratio between the <em>drawing </em>…\nShould the image repeat horizontally\nShould the image repeat vertically\nOrdering: top left, top right, bottom right, bottom left.\nMaterials are used alongside <code>UiMaterialPlugin</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates clipping for all nodes\nThe image will be sized automatically by taking the size …\nMarker struct for buttons\nUsed to calculate the size of UI image nodes\nA UI Node that renders an image.\nThe size of the image’s texture\nMarker struct for labels\nControls how the image is altered to fit within the layout …\nThe texture will be cut in 9 slices, keeping the texture …\nThe image will be resized to match the size of the node. …\nThe top-level UI text component.\n<code>TextBundle</code> was removed in favor of required components. …\nText measurement for UI layout. See <code>NodeMeasure</code>.\nUI text system flags.\nUI alias for <code>TextReader</code>.\nUI alias for <code>TextWriter</code>.\nThe texture will be repeated if stretched beyond …\nThe tint color used to draw the image.\nWhether the image should be flipped along its x-axis.\nWhether the image should be flipped along its y-axis.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nHandle to the texture.\nControls how the image is altered to fit within the layout …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a new <code>Measure</code> for a text node on changes to its …\nChecks if the cosmic text buffer is needed for measuring …\nAn optional rectangle representing the region of the image …\nThe size of the image’s texture\nThe size of the image’s texture\nUpdates the layout and size information for a UI text node …\nThe (optional) texture atlas used to render the image.\nUpdates content size of the node based on the image …\nReturns true if this mode uses slices internally (…\nThe texture will repeat when the ratio between the <em>drawing </em>…\nShould the image repeat horizontally\nShould the image repeat vertically\nA <code>Hasher</code> for hashing an arbitrary stream of bytes.\nAn owned and dynamically typed Future used when you can’…\nUse <code>ConditionalSend</code> to mark an optional Send trait bound. …\nUse <code>ConditionalSendFuture</code> for a future with an optional …\nA <code>Duration</code> type to represent a span of time, typically …\nA shortcut alias for <code>hashbrown::hash_map::Entry</code>.\nA hasher builder that will create a fixed hasher.\nA <code>HashMap</code> implementing aHash, a high speed keyed hashing …\nA <code>HashSet</code> implementing aHash, a high speed keyed hashing …\nA pre-hashed value of a specific type. Pre-hashing enables …\nA measurement of a monotonically nondecreasing clock. …\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nThe duration of one nanosecond.\n<code>BuildHasher</code> for types that already contain a high-quality …\nAn occupied entry.\nA type which calls a function when dropped. This can be …\nA cohesive set of thread-local values of a given type.\nA <code>BuildHasher</code> that results in a <code>PassHasher</code>.\nA no-op hash that only works on <code>u64</code>s. Will panic if …\nA <code>HashMap</code> pre-configured to use <code>Hashed</code> keys and <code>PassHash</code> …\nExtension methods intended to add functionality to …\nProvides a Hasher factory. This is typically used (e.g. by …\nThe duration of one second.\nA stable hash map implementing aHash, a high speed keyed …\nA stable hash set implementing aHash, a high speed keyed …\nA measurement of the system clock, useful for talking to …\nAn error returned from the <code>duration_since</code> and <code>elapsed</code> …\nAn error which can be returned when converting a …\nA specialized hashmap type with Key of <code>TypeId</code> Iteration …\nAn anchor in time which can be used to create new …\nA vacant entry.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nPanics\nHelper macro to generate tuple pyramids. Useful to …\nHelper macro to generate tuple pyramids with their length. …\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nAssert that a given <code>T</code> is object safe. Will fail to compile …\nMutably borrows the thread-local value.\nConstructs a new AHasher with keys based on this …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nReturns the amount of time elapsed from another instant to …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nClears all of the stored thread local values.\nCalls the <code>tracing::debug!</code> macro on a value.\nCall <code>debug!</code> once per call site.\nAn ergonomic abbreviation for <code>Default::default()</code> to make …\nConstructs a new AHasher with fixed keys. If <code>std</code> is …\nLike <code>tracing::trace</code>, but conditional on cargo feature …\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nDrains all enqueued items from all threads and returns an …\nCollect all enqueued items from all threads and appends …\nReturns the positive duration which represents how far …\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed from an earlier point …\nReturns the amount of time elapsed since this instant.\nReturns the difference from this system time to the …\nA fast impl of <code>PartialEq</code> that first checks that <code>other</code>’s …\nProcesses a <code>Result</code> by calling the <code>tracing::error!</code> macro in …\nCall <code>error!</code> once per call site.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nUtilities for working with <code>Future</code>s.\nCreate a new <code>RandomState</code> <code>BuildHasher</code> based on the provided …\nTries to get or insert the value for the given <code>key</code> using …\nThe pre-computed hash.\nCalculates the hash of a single value. This provides a …\nCalls the <code>tracing::info!</code> macro on a value.\nCall <code>info!</code> once per call site.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Duration</code> spans no time.\nGets a mutable iterator over all of the per-thread queues.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nPre-hashes the given value using the <code>BuildHasher</code> …\nReturns an object that will invoke the specified callback …\nCreate a new <code>RandomState</code> <code>BuildHasher</code> using random keys.\nCreates a new <code>Duration</code> from the specified number of whole …\nReturns an instant corresponding to “now”.\nReturns the system time corresponding to “now”.\nCall some expression only once per call site.\nThe utilities prelude.\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nReturns the amount of time elapsed from another instant to …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nRetrieves the thread-local value for the current thread …\nReturns the amount of time elapsed from another instant to …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nA reimplementation of the currently unstable …\nA reimplementation of the currently unstable …\nCall <code>trace!</code> once per call site.\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nProcesses a <code>Result</code> by calling the <code>tracing::warn!</code> macro in …\nCall <code>warn!</code> once per call site.\nBuild a <code>RandomState</code> from a single key. The provided key …\nAllows for explicitly setting the seeds to used. All …\nPolls a future once, and returns the output if ready or …\nConsumes a future, polls it once, and immediately returns …\nThe memory allocator returned an error\nError due to the computed capacity exceeding the collection…\nKey equivalence trait.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nLow-level hash table with explicit hashing.\nThe error type for <code>try_reserve</code> methods.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nReturns the number of elements the table can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nClears the table, removing all values.\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nVisits the values representing the difference, i.e., the …\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements in an iterator.\nClears the set, returning all elements in an iterator.\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nReturns an <code>Entry</code> for an entry in the table with the given …\nGets the given key’s corresponding entry by reference in …\nChecks if this value is equivalent to the given key.\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nInserts all new key-values from the iterator to existing …\nDrains elements which are true under the given predicate, …\nDrains elements which are true under the given predicate, …\nDrains elements which are true under the given predicate, …\nReturns a reference to an entry in the table with the …\nReturns an <code>OccupiedEntry</code> for an entry in the table with …\nReturns a mutable reference to an entry in the table with …\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts an owned copy of the given <code>value</code> into the set if …\nInserts a value computed from <code>f</code> into the set if the given …\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA hash table implemented with quadratic probing and SIMD …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts an element into the <code>HashTable</code> with the given hash …\nInsert a key-value pair into the map without checking if …")
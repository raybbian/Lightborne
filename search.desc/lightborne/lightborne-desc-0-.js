searchState.loadedDescShard("lightborne", 0, "Marker <code>Component</code> used to query for the background camera. …\nThe <code>Plugin</code> responsible for handling anything Camera …\nMarker <code>Component</code> used to query for the main camera in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that moves camera to player’s position and …\n<code>Startup</code> <code>System</code> that spawns the <code>Camera2d</code> in the world.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\n<code>Component</code> that holds the position of the cursor, in world …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\n<code>Update</code> <code>System</code> that updates the world position of the …\n<code>Resource</code> that holds the <code>level_iid</code> of the current level.\n<code>Plugin</code> that handles everything related to the level.\n<code>SystemSet</code> used to distinguish different types of systems\nSystems used to process Ldtk Entities after they spawn in …\nSystems used to simulate game logic in <code>Update</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that will run on <code>Update</code> to check if the Player has …\nThe horizontal offset between active crystals and inactive …\nMarker <code>Component</code> used to query for crystals, currently …\n<code>Bundle</code> registered with …\nEnum that represents the crystals that a [<code>LightSensor</code>] …\nIdentifier <code>Component</code> used to label the ID of white crystals\nBundle registered with LDTK to spawn in white crystal …\n<code>Plugin</code> for managing all things related to <code>Crystal</code>s. This …\nEvent that will toggle all crystals of a certain color.\nSwitches a crystal from inactive to active. Calling this …\nFunction to determine the base color of the crystal.\nSwitches a crystal from active to inactive. Calling this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nSystem that will initialize all the crystals, storing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction to determine whether or not a cell value …\n<code>System</code> that listens to when <code>Crystal</code>s are activated or …\n<code>System</code> that listens to [<code>LevelSwitchEvent</code>]s to ensure that …\n<code>Bundle</code> used to group together components commonly used …\nComponent for things that hurt\nBundle for Semi-Solid Platforms\nComponent for spikes\nBundle for spikes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the state of SemiSolids based on Player’s y coord\n<code>Bundle</code> registered with Ldtk to spawn buttons.\n<code>Component</code> to mark buttons in the level.\n<code>Component</code> to hold information about start flags in the …\n<code>Bundle</code> spawned in by Ldtk corresponding to start flags.\n<code>Component</code> to mark start flags in the level. Used to query …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nInitializes the start maker with the <code>level_iid</code>, which must …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>level_iid</code> of the <code>StartFlag</code>’s level.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMarker <code>Component</code> representing a wall.\nWall <code>Bundle</code> spawned int by Ldtk.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNOTE: copied from the <code>bevy_ecs_ldtk</code> examples\nThe width of the rectangle used to represent <code>LightSegment</code>s.\nThe speed of the light beam in units per <code>FixedUpdate</code>.\n<code>Enum</code> for each of the light colors.\n<code>Plugin</code> that manages everything light related.\nA <code>Component</code> marking the start of a light ray. These are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of bounces off of terrain each <code>LightColor</code> can …\nThe path to the shader used by the <code>LightMaterial</code>\nCustom <code>Material2d</code> that will use our custom WGSL shader to …\nA resource that stored handles to the <code>Mesh2d</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>LightRenderData</code> <code>Resource</code> from the <code>World</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocal variable for <code>simulate_light_sources</code> used to store …\n<code>Bundle</code> used in the initialization of the <code>LightSegmentCache</code> …\n<code>Resource</code> used to store <code>Entity</code> handles to the light …\nMarker <code>Component</code> used to query for light segments.\n<code>System</code> that is responsible for hiding all of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that runs on <code>Update</code>, calculating the <code>Transform</code> of …\n<code>System</code> that runs on <code>FixedUpdate</code>, advancing the distance …\n<code>Event</code> used to notify other entities to trigger based on …\n<code>Component</code> added to entities receptive to light. The …\n<code>Bundle</code> that includes all the <code>Component</code>s needed for a …\nThe amount of time the light beam needs to be hitting the …\nStores the cumulative time light has been hitting the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that resets the <code>LightSensor</code>s when a […\nThe color of the crystals to toggle\n<code>System</code> that runs on <code>Update</code>, querying each <code>LightSensor</code> and …\nWhether or not the sensor was hit the previous frame\nStruct used to represent both LineLighting and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Component</code> that represents a light spread evenly around a …\n<code>Component</code> that represents a light spread evenly around a …\nRGB representation of the color, the higher each number …\nRGB representation of the color, the higher each number …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Component</code> that automatically attaches <code>Occluder</code> components …\n<code>Component</code> that represents a line that prevents light from …\n<code>Component</code> used to internally to render each occluder. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nHow many pixels to reduce the size of the collider by. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Bundle</code> registered with Ldtk that will be spawned in with …\n<code>Bundle</code> that will be initialized with <code>init_player_bundle</code> …\n<code>Plugin</code> for anything player based.\n<code>Component</code> to signal our own code to finish the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that will cause a state switch to […\nKills player upon touching a HURT_BOX\nResets the player inventory and movement information on a […\n<code>System</code> that runs on [<code>GameState::Respawning</code>]. Will turn the …\nA <code>Component</code> used to track Lyra’s current shooting color …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\n<code>System</code> to handle the keyboard presses corresponding to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that uses <code>Gizmos</code> to preview the light path while …\n<code>System</code> that spawns a <code>LightRaySource</code> when the player …\n<code>Component</code> that offsets positions to make them match the …\n<code>Component</code> that sets Entity’s <code>z</code> to the player’s <code>z</code> plus …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that offsets entities’ positions to match the …\n<code>System</code> that resets entities’ transforms from the …\nThe number of <code>FixedUpdate</code> steps the player can jump for …\nThe number of <code>FixedUpdate</code> steps the player should receive …\nThe y velocity subtracted from the player due to gravity.\nThe positive y velocity added to the player every jump …\nMax player horizontal velocity.\nMax player vertical velocity.\nThe x velocity added to the player when A/D is held.\n<code>Component</code> that stores information about the player’s …\nThe number of <code>FixedUpdate</code> steps the player can jump for …\n<code>System</code> that is run on <code>Update</code> to crouch player\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>System</code> that is run on <code>Update</code> to move the player around.\n<code>System</code> that is run the frame the space bar is pressed. …\nHolds information that is passed into the rapier character …\nAttached to player hitbox\n<code>System</code> that spawns the player’s hurtbox <code>Collider</code> as a …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nUsed by Ldtk to spawn the player correctly with all of the …\nCalls <code>U::from(self)</code>.\n<code>Component</code> attached to the “root” strand (the strand …\n<code>Component</code> representing one node in a chain of strands, …\nCreates a chain of strands to the player.\n<code>Entity</code> the strand is connected to, that entity should have …\nMaximum distance between this strand and <code>connect</code>\nThe strand’s velocity is multiplied by <code>friction</code> before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcceleration due to gravity, applied every <code>FixedUpdate</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOffsets the point the strand connects to\nSpecifies whether the strand collides with the ground\nSpecifies update order, with lower numbers updated first. …\n<code>System</code> that updates <code>Strand</code> offsets based on …\nLabels used for rapier_2d <code>CollisionGroups</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")
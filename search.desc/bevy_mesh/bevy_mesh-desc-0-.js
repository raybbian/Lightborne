searchState.loadedDescShard("bevy_mesh", 0, "Per vertex coloring. Use in conjunction with …\nPer vertex joint transform matrix index. Use in …\nPer vertex joint transform matrix weight. Use in …\nThe direction the vertex normal is facing in. Use in …\nWhere the vertex is located in space. Use in conjunction …\nThe direction of the vertex tangent. Used for normal …\nTexture coordinates for the vertex. Use in conjunction …\nAlternate texture coordinates for the vertex. Use in …\nThis error occurs when you try to invert the winding for a …\nOur base mesh pipeline key bits start from the highest bit …\nFailed to generate tangents for the mesh.\nAn array of indices into the <code>VertexAttributeValues</code> for a …\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nA 3D object made out of vertices representing triangles, …\nAn error that occurred while trying to extract a …\nDescribes the layout of the mesh vertices in GPU memory.\nStores the single copy of each mesh vertex buffer layout.\nAn error that occurred while trying to invert the winding …\nVertex data is a list of points. Each vertex is a new …\nPrimitive type the input mesh is composed of.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nContains an array where each entry describes a property of …\nDescribes how the vertex buffer is interpreted.\nThis error occurs when you try to invert the winding for a …\nGet a flags value with all known bits set.\nThe stride, in bytes, between elements of this buffer.\nReturns the values as float triples if possible.\nRetrieves the data currently set to the vertex attribute …\nRetrieves the data currently set to the vertex attribute …\nReturns an iterator that yields references to the data of …\nThe list of attributes which comprise a single vertex.\nReturns an iterator that yields mutable references to the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh.\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh. If the …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of an indexed mesh, …\nWhether all set bits in a source flags value are also set …\nCounts all vertices of the mesh.\nComputes and returns the vertex data of the mesh as bytes. …\nThe intersection of a source flags value with the …\nDuplicates the vertex attributes so that no vertices are …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe format of the vertex attribute.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts this sector into a <code>Mesh</code> using a default …\nConverts this sector into a <code>Mesh</code> using a default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a new densely packed <code>VertexBufferLayout</code> from an …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGenerate tangents for the mesh using the <code>mikktspace</code> …\nFlattens the <code>VertexAttributeValues</code> into a sequence of …\nComputes and returns the index data of the mesh as bytes. …\nGet this <code>Mesh</code>’s <code>MeshVertexBufferLayout</code>, used in …\nReturns the size required for the vertex buffer in bytes.\nReturns the size of a vertex in bytes.\nWhether this mesh has morph targets.\nThe <em>unique</em> id of the vertex attribute. This will also …\nRetrieves the vertex <code>indices</code> of the mesh.\nRetrieves the vertex <code>indices</code> of the mesh mutably.\nInserts a new mesh vertex buffer layout in the store and …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSets the data for a vertex attribute (position, normal, …\nSets the vertex indices of the mesh. They describe how …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the winding of the indices such that all …\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if there are no indices.\nReturns <code>true</code> if there are no vertices in this …\nWhether all bits in this flags value are unset.\nReturns true for strip topologies.\nReturns an iterator over the indices.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the number of indices.\nReturns the number of vertices in this …\nMerges the <code>Mesh</code> data of <code>other</code> with <code>self</code>. The attributes …\nGets a list of all morph target names, if they exist.\nThe friendly name of the vertex attribute\nConstruct a new mesh. You need to provide a …\nNormalize joint weights so they sum to 1.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns a <code>VertexBufferLayout</code> with the shader location of …\nReturns the topology of the mesh.\nMesh generation for primitive shapes.\nAdd an index. If the index is greater than <code>u16::MAX</code>, the …\nThe intersection of a source flags value with the …\nRemoves the data for a vertex attribute\nRemoves the vertex <code>indices</code> from the mesh and returns them.\nRotates the vertex positions, normals, and tangents of the …\nRotates the vertex positions, normals, and tangents of the …\nScales the vertex positions, normals, and tangents of the …\nScales the vertex positions, normals, and tangents of the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the names of each morph target. This should …\nSet morph targets image for this mesh. This requires a “…\nHow often this vertex buffer is “stepped” forward.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTransforms the vertex positions, normals, and tangents of …\nTransforms the vertex positions, normals, and tangents of …\nTranslates the vertex positions of the mesh in place by …\nTranslates the vertex positions of the mesh by the given …\nGet a list of this Mesh’s triangles as an iterator if …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with no shared …\nConsumes the mesh and returns a mesh with tangents …\nConsumes the mesh and returns a mesh with data set for a …\nConsumes the mesh and returns a mesh with the given vertex …\nConsumes the mesh and returns a mesh with inverted winding …\nConsumes the mesh and returns a mesh with morph target …\nConsumes the mesh and returns a mesh with the given morph …\nConsumes the mesh and returns a mesh without the data for …\nConsumes the mesh and returns a mesh without the vertex …\nComputes and write the vertex data of the mesh into a …\nHow many components <code>MorphAttributes</code> has.\nMax target count available for morph targets.\nControl a specific <code>Mesh</code> instance’s morph targets. These …\nAttributes <strong>differences</strong> used for morph targets.\nAn image formatted for use with <code>MorphWeights</code> for rendering …\nControls the morph targets for all child <code>Mesh3d</code> entities. …\nThe first child <code>Mesh3d</code> primitive controlled by these …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate textures for each morph target.\nThe vertex normal difference between base mesh and this …\nThe vertex position difference between base mesh and this …\nThe vertex tangent difference between base mesh and this …\nA builder for creating a <code>Mesh</code> with an <code>Annulus</code> shape.\nUV space is distributed by how much of the capsule …\nThe center of the base circle\nThe center of the bottom circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Capsule2d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Capsule3d</code> shape.\nManner in which UV coordinates are distributed vertically.\nA builder used for creating a <code>Mesh</code> with a <code>Circle</code> shape.\nSpecifies how to generate UV-mappings for the …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSector</code> …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSegment</code> …\nAnchoring options for <code>ConeMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cone</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>ConicalFrustum</code> …\nA builder used for creating a <code>Mesh</code> with a <code>ConvexPolygon</code> …\nAnchoring options for <code>CylinderMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cylinder</code> shape.\nA builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nA trait required for implementing <code>Meshable</code> for <code>Extrusion&lt;T&gt;</code>…\nA builder used for creating a <code>Mesh</code> with an <code>Extrusion</code> shape.\nUpper third of the texture goes to the northern …\nThis segment of the perimeter will be shaded flat.\nAn icosphere, a spherical mesh that consists of similar …\nAn error when creating an icosphere <code>Mesh</code> from a …\nTreats the shape as a mask over a circle of equal size and …\nA trait used to build <code>Mesh</code>es from a configuration\nA trait for shapes that can be turned into a <code>Mesh</code>.\nMidpoint between the tip of the cone and the center of its …\nMidpoint between the top and bottom caps of the cylinder\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA type representing a segment of the perimeter of an …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Rectangle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>RegularPolygon</code> …\nThis segment of the perimeter will be shaded smooth.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe Tip of the triangle\nThe icosphere has too many vertices.\nThe center of the top circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Triangle2d</code> shape.\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nSets a custom anchor point for the mesh\nSets a custom anchor point for the mesh\nThe anchor point for the cone mesh, defaults to the …\nThe anchor point for the cylinder mesh, defaults to the …\nSets a custom angle range in radians instead of a full …\nOptional angle range in radians, defaults to a full circle …\nThe <code>Annulus</code> shape.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> according to the configuration in <code>self</code>.\nIf set to <code>true</code>, the cylinder caps (flat circle faces) are …\nThe <code>Capsule2d</code> shape.\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe <code>Cone</code> shape.\nThe <code>Cylinder</code> shape.\nThe <code>Ellipse</code> shape.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>PlaneMeshBuilder</code> from the given length, with …\nCreates a new <code>PlaneMeshBuilder</code> from the given size, with …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe <code>ConicalFrustum</code> shape.\nCreates an icosphere mesh with the given number of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the <code>SphereKind</code> that will be used for building the …\nThe type of sphere mesh that will be built.\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the hemispheres …\nSets the number of vertical lines subdividing the …\nThe number of vertical lines subdividing the hemispheres …\nSets the number of segments used for the main ring of the …\nThe number of segments used for the main ring of the torus.\nCreates a <code>Mesh</code> for a shape.\nSets the number of vertices used for each circular segment …\nThe number of vertices used for each circular segment in …\nCreate an <code>AnnulusMeshBuilder</code> with the given inner radius, …\nCreate a new <code>ExtrusionBuilder&lt;P&gt;</code> from a given <code>base_shape</code> …\nCreates a new <code>CircleMeshBuilder</code> from a given radius and …\nCreates a new <code>CircularSectorMeshBuilder</code> from a given sector\nCreates a new <code>CircularSegmentMeshBuilder</code> from a given …\nCreates a new <code>EllipseMeshBuilder</code> from a given half width …\nCreates a new <code>Capsule2dMeshBuilder</code> from a given radius, …\nCreates a new <code>Capsule3dMeshBuilder</code> from a given radius, …\nCreates a new <code>ConeMeshBuilder</code> from a given radius, height, …\nCreates a new <code>ConicalFrustumMeshBuilder</code> from the given top …\nCreates a new <code>CylinderMeshBuilder</code> from the given radius, a …\nCreates a new <code>PlaneMeshBuilder</code> from a given normal and …\nCreates a new <code>SphereMeshBuilder</code> from a radius and …\nCreates a new <code>TorusMeshBuilder</code> from an inner and outer …\nSets the normal of the plane, aka the direction the plane …\nA list of the indices each representing a part of the …\nThe <code>Plane3d</code> shape.\nSets the number of vertices used in constructing the …\nSets the number of vertices used for each hemicircle at …\nSets the number of vertices used for the circle mesh at …\nSets the number of vertices used for the ellipse mesh at …\nSets the number of vertices used in constructing the …\nSets the number of vertices used for the circle mesh.\nSets the number of vertices used for the sector mesh.\nSets the number of vertices used for the segment mesh.\nSets the number of vertices used for the ellipse mesh.\nSets the number of vertices used for one hemicircle. The …\nSets the number of vertices used for the base of the cone.\nSets the number of vertices used for the top and bottom of …\nSets the number of vertices used for the top and bottom of …\nThe number of vertices used in constructing each …\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for one hemicircle. The total …\nThe number of vertices used for the base of the cone.\nThe number of vertices used for the top and bottom of the …\nThe number of vertices used for the top and bottom of the …\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the cylindrical …\nThe sector shape.\nThe segment shape.\nSets the number of segments along the depth of the …\nSets the number of horizontal lines subdividing the …\nSets the number of segments along the height of the …\nThe number of horizontal lines subdividing the lateral …\nThe number of segments along the height of the cylinder. …\nSets the size of the plane mesh.\nThe <code>Sphere</code> shape.\nSets the subdivisions of the plane mesh.\nThe number of subdivisions in the mesh.\nThe <code>Torus</code> shape.\nCreates a UV sphere <code>Mesh</code> with the given number of …\nSets the uv mode used for the sector mesh\nSets the uv mode used for the segment mesh\nThe UV mapping mode\nThe UV mapping mode\nSets the manner in which UV coordinates are distributed …\nThe manner in which UV coordinates are distributed …\nIgnore the cylinder caps, making the mesh a shallow tube …\nAngle by which to rotate the shape when generating the UV …\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe normal of the first vertex.\nA list of indices representing this segment of the …\nA list of indices representing this segment of the …\nThe normal of the last vertex.\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")
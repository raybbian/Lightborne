searchState.loadedDescShard("bevy_reflect", 0, "Reflection in Rust.\nA singular element access within a path. Multiple accesses …\nAn error originating from an <code>Access</code> of an element within a …\nThe kind of <code>AccessError</code>, along with some kind-specific …\nA enumeration of all error outcomes that might happen when …\nA trait used to power array-like operations via reflection.\nAn array-like type.\nA container for compile-time array info.\nAn iterator over an <code>Array</code>.\nA const parameter.\nType information for a const generic parameter.\nAttempted to apply to types with mismatched sizez, e.g. a […\nA fixed-size list of reflected values.\nA dynamic representation of an enum.\nA list of reflected values.\nAn ordered mapping between reflected values.\nAn ordered set of reflected values.\nA struct type which allows fields to be added at runtime.\nA tuple which allows fields to be added at runtime.\nA tuple struct which allows fields to be added at runtime.\nDynamic dispatch for <code>TypePath</code>.\nDynamic dispatch for <code>Typed</code>.\nA dynamic representation of an enum variant.\nA trait used to power enum-like operations via reflection.\nAn enum-like type.\nA container for compile-time enum info, used by <code>TypeInfo</code>.\nA name-based field access on a struct.\nA index-based field access on a struct.\nAn iterator over the field values of a struct.\nA trait that enables types to be dynamically constructed …\nDerives the <code>FromReflect</code> trait.\nTrait used to generate <code>TypeData</code> for trait reflection.\nAn enum representing a generic parameter.\nThe generic parameters of a type.\nA convenience trait which combines fetching and …\nA trait which allows nested <code>Reflect</code> values to be retrieved …\nA convenience trait which combines fetching and …\nA convenience trait which combines fetching and …\nA trait which allows a type to generate its …\nAn error that occurs when using an <code>Access</code> on the wrong …\nAn error that occurs when using an <code>Access</code> on the wrong …\nAn error caused by trying to access a path that’s not …\nAn error that occurs when a type cannot downcast to a …\nCaused when a type was expected to be of a certain kind, …\nA trait used to power list-like operations via reflection.\nA list-like type.\nAn index-based access on a list.\nA container for compile-time list info.\nAn iterator over an <code>List</code>.\nA trait used to power map-like operations via reflection.\nA map-like type.\nA container for compile-time map info.\nAn iterator over the key-value pairs of a <code>Map</code>.\nAttempted to apply the wrong kind to a type, e.g. a struct …\nTried to apply incompatible types.\nEnum variant that we tried to apply to was missing a field.\nAn error that occurs when a certain type doesn’t contain …\nThe named field of a reflected struct.\nAn <code>Access</code> combined with an <code>offset</code> for more helpful error …\nAn opaque type.\nA container for compile-time info related to …\nAn error that occurs when parsing reflect path strings.\nAn error caused by an invalid path string that couldn’t …\nA pre-parsed path to an element within a type.\nThe foundational trait of <code>bevy_reflect</code>, used for accessing …\nA core trait of <code>bevy_reflect</code>, used for downcasting to …\nThe main derive macro used by <code>bevy_reflect</code> for deriving …\nA struct used to deserialize reflected instances of a type.\n<code>Reflect</code> values are commonly used in situations where the …\nType data that represents the <code>FromReflect</code> trait and allows …\nAn enumeration of the “kinds” of a reflected type.\nCaused when a type was expected to be of a certain kind, …\nA mutable enumeration of “kinds” of a reflected type.\nAn owned enumeration of “kinds” of a reflected type.\nSomething that can be interpreted as a reflection path in …\nAn error returned from a failed path string query.\nAn immutable enumeration of “kinds” of a reflected …\nMarks a type as a reflectable wrapper for a remote type.\nA struct used to serialize reflected instances of a type.\nA catch-all trait that is bound by the core reflection …\nThe remote type this type represents via reflection.\nA trait used to power set-like operations via reflection.\nA set-like type.\nA container for compile-time set info.\nA trait used to power struct-like operations via reflection…\nA struct-like type.\nStruct enums take the form:\nStruct enums take the form:\nA container for compile-time named struct info.\nType info for struct variants.\nA trait used to power tuple-like operations via reflection.\nA tuple-like type.\nTuple enums take the form:\nTuple enums take the form:\nAn iterator over the field values of a tuple.\nAn index-based access on a tuple.\nA container for compile-time tuple info.\nA trait used to power tuple struct-like operations via …\nA tuple-struct-like type.\nAn iterator over the field values of a tuple struct.\nA container for compile-time tuple struct info.\nType info for tuple variants.\nThe base representation of a Rust type.\nA type parameter.\nA trait used to type-erase type metadata.\nCompile-time type information for various reflected types.\nA <code>TypeInfo</code>-specific error.\nCaused when a variant was expected to be of a certain type…\nType information for a generic type parameter.\nA static accessor to type paths and names.\nDerives the <code>TypePath</code> trait, providing a stable alternative …\nProvides dynamic access to all methods on <code>TypePath</code>.\nRuntime storage for type metadata, registered into the …\nA registry of reflected types.\nA synchronized wrapper around a <code>TypeRegistry</code>.\nA static accessor to compile-time type information.\nUnit enums take the form:\nUnit enums take the form:\nType info for unit variants.\nThe enum we tried to apply to didn’t contain a variant …\nThe unnamed field of a reflected tuple or tuple struct.\nAn iterator over the fields in the current enum variant.\nA container for compile-time enum variant info.\nA <code>VariantInfo</code>-specific error.\nDescribes the form of an enum variant.\nRepresentation for individual element accesses within a …\nThe returns the <code>Access</code> that this <code>AccessError</code> occurred in.\nThe <code>Access</code> itself.\nAttempts to register the type described by <code>registration</code>.\nApplies a reflected value to this value.\nApplies a reflected value to this value.\nApplies the reflected array data to the given array.\nThe default debug formatter for <code>Array</code> types.\nReturns the <code>u64</code> hash of the given array.\nCompares two arrays (one concrete and one reflected) to …\nTries to apply the reflected array data to the given array …\nReturns the value as a <code>&amp;dyn Any</code>.\nReturns the value as a <code>&amp;mut dyn Any</code>.\nAttempts a cast to a <code>Array</code> trait object.\nAttempts a cast to a <code>Array</code> trait object.\nAttempts a cast to <code>ArrayInfo</code>.\nAttempts a cast to a <code>Enum</code> trait object.\nAttempts a cast to a <code>Enum</code> trait object.\nAttempts a cast to <code>EnumInfo</code>.\nAttempts a cast to a <code>List</code> trait object.\nAttempts a cast to a <code>List</code> trait object.\nAttempts a cast to <code>ListInfo</code>.\nAttempts a cast to a <code>Map</code> trait object.\nAttempts a cast to a <code>Map</code> trait object.\nAttempts a cast to <code>MapInfo</code>.\nAttempts a cast to a <code>PartialReflect</code> trait object.\nAttempts a cast to a <code>PartialReflect</code> trait object.\nAttempts a cast to <code>OpaqueInfo</code>.\nCasts this type to a reflected value.\nCasts this type to a mutable, reflected value.\nCasts this type to a fully-reflected value.\nConvert <code>Ptr</code> into <code>&amp;dyn Reflect</code>.\nCasts this type to a mutable, fully-reflected value.\nConvert <code>PtrMut</code> into <code>&amp;mut dyn Reflect</code>.\nConverts a reference of this wrapper to a reference of its …\nConverts a mutable reference of this wrapper to a mutable …\nAttempts a cast to a <code>Set</code> trait object.\nAttempts a cast to a <code>Set</code> trait object.\nAttempts a cast to a <code>Struct</code> trait object.\nAttempts a cast to a <code>Struct</code> trait object.\nAttempts a cast to <code>StructInfo</code>.\nAttempts a cast to <code>StructVariantInfo</code>.\nAttempts a cast to a <code>Tuple</code> trait object.\nAttempts a cast to a <code>Tuple</code> trait object.\nAttempts a cast to <code>TupleInfo</code>.\nAttempts a cast to a <code>TupleStruct</code> trait object.\nAttempts a cast to a <code>TupleStruct</code> trait object.\nAttempts a cast to <code>TupleStructInfo</code>.\nAttempts a cast to <code>TupleVariantInfo</code>.\nAttempts a cast to <code>UnitVariantInfo</code>.\nConverts a reference of the remote type to a reference of …\nConverts a mutable reference of the remote type to a …\nThe compile-time capacity of the array.\nClones the map, producing a <code>DynamicMap</code>.\nClones the set, producing a <code>DynamicSet</code>.\nClones the struct into a <code>DynamicStruct</code>.\nClones the struct into a <code>DynamicTuple</code>.\nClones the struct into a <code>DynamicTupleStruct</code>.\nClones the list, producing a <code>DynamicArray</code>.\nClones the list, producing a <code>DynamicArray</code>.\nClones the list, producing a <code>DynamicList</code>.\nClones the list, producing a <code>DynamicList</code>.\nClones the value as a <code>Reflect</code> trait object.\nChecks if the given value is contained in the set\nReturns true if this registration contains the given type …\nReturns true if this registration contains the given type …\nChecks if a variant with the given name exists within this …\nSee <code>TypePath::crate_name</code>.\nReturns the name of the crate the type is in, or <code>None</code> if …\nReturns the name of the crate the type is in, or <code>None</code> if …\nSee <code>TypePath::crate_name</code>.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this variant.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns the custom attributes for this item.\nReturns a reference to the value of type <code>T</code> in this …\nReturns a reference to the value with the given <code>TypeId</code> in …\nReturns a mutable reference to the value of type <code>T</code> in this …\nReturns a mutable reference to the value with the given …\nDebug formatter for the value.\nDebug formatter for the value.\nThe default type for the parameter, if any.\nThe default value for the parameter, if any.\nDeserializes a reflected value.\nReturns a reference to this <code>Access</code>’s inner value as a …\nThe docstring of this array, if any.\nThe docstring of this field, if any.\nThe docstring of this field, if any.\nThe docstring of this list, if any.\nThe docstring of this map, if any.\nThe docstring of this set, if any.\nThe docstring of this struct, if any.\nThe docstring of this tuple, if any.\nThe docstring of this struct, if any.\nThe docstring of the underlying type, if any.\nThe docstring of this dynamic type, if any.\nThe docstring of this enum, if any.\nThe docstring of the underlying variant, if any.\nThe docstring of this variant, if any.\nThe docstring of this variant, if any.\nThe docstring of this variant, if any.\nReturns a boxed object from a boxed trait object if the …\nDowncasts the value to type <code>T</code>, consuming the trait object.\nReturns a mutable reference to the object within the trait …\nDowncasts the value to type <code>T</code> by mutable reference.\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nDowncasts the value to type <code>T</code> by reference.\nDrain the elements of this array to get a vector of owned …\nDrain the elements of this list to get a vector of owned …\nDrain the key-value pairs of this map to get a vector of …\nDrain the values of this set to get a vector of owned …\nDrain the fields of this tuple to get a vector of owned …\nGets a <code>&amp;T</code> to the specified element on the given <code>Reflect</code> …\nGets a <code>&amp;T</code> to the specified element on the given <code>Reflect</code> …\nGets a <code>&amp;mut T</code> to the specified element on the given <code>Reflect</code>…\nGets a <code>&amp;mut T</code> to the specified element on the given <code>Reflect</code>…\nCreate a type registry with <em>no</em> registered types.\nThe default debug formatter for <code>Enum</code> types.\nReturns the <code>u64</code> hash of the given enum.\nCompares an <code>Enum</code> with a <code>PartialReflect</code> value.\nReturns a reference to the value of the field named <code>name</code> …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field (in the …\nGet the field with the given name.\nGet the field with the given name.\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field (in the …\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nGet the field at the given index.\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field (in …\nReturns the number of fields in the struct.\nReturns the number of fields in the tuple.\nReturns the number of fields in the tuple struct.\nReturns the number of fields in the current variant.\nThe total number of fields in this struct.\nThe total number of fields in this tuple.\nThe total number of fields in this struct.\nThe total number of fields in this variant.\nThe total number of fields in this variant.\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field (in …\nA slice containing the names of all fields in order.\nA slice containing the names of all fields in order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>DynamicEnum</code> from an existing one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a dynamic struct that doesn’t represent a type …\nGet a function pointer to turn a <code>Ptr</code> into <code>&amp;dyn Reflect</code> for …\nGet a function pointer to turn a <code>PtrMut</code> into …\nCreate a <code>DynamicEnum</code> from an existing one.\nConstructs a concrete instance of <code>Self</code> from a reflected …\nPerform a <code>FromReflect::from_reflect</code> conversion on the …\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nGets the generic parameters for this type.\nReturns a reference to the element at <code>index</code>, or <code>None</code> if …\nReturns a reference to the element at <code>index</code>, or <code>None</code> if …\nReturns a reference to the value associated with the given …\nReturns a reference to the value.\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns the key-value pair at <code>index</code> by reference, or <code>None</code> …\nReturns the key-value pair at <code>index</code> by reference where the …\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by type.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nGets a custom attribute by its <code>TypeId</code>.\nReturns a reference to the value of the field named <code>name</code>, …\nReturns a reference to the value of the field with index …\nReturns a reference to the value of the field with index …\nReturns a mutable reference to the value of the field …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the value of the field with …\nReturns a mutable reference to the element at <code>index</code>, or …\nReturns a mutable reference to the element at <code>index</code>, or …\nReturns a mutable reference to the value associated with …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nFinds the generic parameter with the given name.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nWill return <code>None</code> if <code>TypeInfo</code> is not available.\nReturns the <code>TypeInfo</code> of the type <em>represented</em> by this value.\nTurn the value into a serializable representation\nReturns a reference to the <code>TypeData</code> of type <code>T</code> associated …\nReturns a mutable reference to the <code>TypeData</code> of type <code>T</code> …\nReturns the <code>TypeInfo</code> associated with the given <code>TypeId</code>.\nReturns the default <code>TypeRegistration</code> for this type.\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nReturns a reference to the <code>TypeRegistration</code> of the type …\nReturns a mutable reference to the <code>TypeRegistration</code> of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this variant has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute of the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this variant has a custom attribute with …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns <code>true</code> if this item has a custom attribute with the …\nReturns the <code>TypeId</code> of the type.\nSee <code>TypePath::type_ident</code>.\nSee <code>TypePath::type_ident</code>.\nA macro used to generate a <code>FromReflect</code> trait …\nA replacement for <code>#[derive(Reflect)]</code> to be used with …\nA macro used to generate reflection trait implementations …\nA replacement for deriving <code>TypePath</code> for use on foreign …\nReturns the index of the field.\nReturns the index of the field (in the current variant) …\nGet the index of the field with the given name.\nGets the index of the field with the given name.\nGet the index of the variant with the given name.\nGet the index of the field with the given name.\nInserts an element at position <code>index</code> within the list, …\nInserts an instance of <code>T</code> into this registration’s type …\nInserts a typed key-value pair into the map.\nInserts a typed value into the set.\nInserts a field named <code>name</code> with the typed value <code>value</code> into …\nAppends a typed element with value <code>value</code> to the tuple.\nAppends a typed element with value <code>value</code> to the tuple …\nInserts a key-value pair into the map.\nInserts a value into the set.\nInserts a field named <code>name</code> with value <code>value</code> into the …\nAppends an element with value <code>value</code> to the tuple.\nAppends an element with value <code>value</code> to the tuple struct.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value as a <code>Box&lt;dyn Any&gt;</code>.\nAttempts a cast to a <code>Array</code> trait object.\nAttempts a cast to a <code>Enum</code> trait object.\nAttempts a cast to a <code>List</code> trait object.\nAttempts a cast to a <code>Map</code> trait object.\nConverts this into an “owned” value.\nCasts this type to a boxed, reflected value.\nCasts this type to a boxed, fully-reflected value.\nConverts this wrapper into its remote type.\nAttempts a cast to a <code>Set</code> trait object.\nAttempts a cast to a <code>Struct</code> trait object.\nAttempts a cast to a <code>Tuple</code> trait object.\nAttempts a cast to a <code>TupleStruct</code> trait object.\nAttempts a cast to a <code>PartialReflect</code> trait object.\nConverts the remote type into this wrapper.\nReturns true if the trait object wraps an object of type …\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nReturns <code>true</code> if the underlying value is of type <code>T</code>, or <code>false</code>\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nCheck if the given type matches this one.\nReturns <code>true</code> if the given short type path is ambiguous, …\nWhether the generic parameter is a const parameter.\nIndicates whether or not this type is a <em>dynamic</em> type.\nIndicates whether or not this type is a <em>dynamic</em> type.\nReturns <code>true</code> if the collection contains no elements.\nReturns <code>true</code> if the collection contains no elements.\nReturns <code>true</code> if the collection contains no elements.\nReturns <code>true</code> if the collection contains no elements.\nReturns <code>true</code> if the list contains no elements.\nReturns <code>true</code> if the list contains no elements.\nReturns <code>true</code> if the list contains no elements.\nReturns <code>true</code> if the list contains no elements.\nReturns true if this registration has no type data.\nReturns true if the current variant’s type matches the …\nReturns true if the current variant’s type matches the …\nThe <code>TypeInfo</code> of the array item.\nThe <code>TypeInfo</code> of the list item.\nThe type of the array item.\nThe type of the list item.\nReturns an iterator over the array.\nReturns an iterator over the list.\nReturns an iterator over the key-value pairs of the map.\nReturns an iterator over the values of the set.\nReturns an iterator over the <code>TypeRegistration</code>s of the …\nReturns an iterator over all type data in this …\nIterate over the fields of this struct.\nIterate over the fields of this tuple.\nIterate over the fields of this struct.\nIterate over the variants of this enum.\nIterate over the fields of this variant.\nIterate over the fields of this variant.\nReturns an iterator over the values of the reflectable …\nReturns an iterator over the values of the tuple’s …\nReturns an iterator over the values of the tuple struct’…\nReturns an iterator over the values of the current variant…\nReturns a mutable iterator over the <code>TypeRegistration</code>s of …\nReturns a mutable iterator over all type data in this …\nChecks to see if the <code>TypeData</code> of type <code>T</code> is associated with …\nThe <code>TypeInfo</code> of the key type.\nThe type of the key type.\nReturns the “kind” of this reflected type without any …\nReturns the “kind” of this reflected type without any …\nReturns the “kind” of this reflected type without any …\nReturns the kind of <code>AccessError</code>.\nReturns the kind of this <code>TypeInfo</code>.\nReturns the number of elements in the array.\nReturns the number of elements in the list.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nThe total count of type data in this registration.\nApplies the elements of <code>b</code> to the corresponding elements of …\nThe default debug formatter for <code>List</code> types.\nReturns the <code>u64</code> hash of the given list.\nCompares a <code>List</code> with a <code>Reflect</code> value.\nTries to apply the elements of <code>b</code> to the corresponding …\nApplies the elements of reflected map <code>b</code> to the …\nThe default debug formatter for <code>Map</code> types.\nCompares a <code>Map</code> with a <code>PartialReflect</code> value.\nTries to apply the elements of reflected map <code>b</code> to the …\nSee <code>TypePath::module_path</code>.\nReturns the path to the module the type is in, or <code>None</code> if …\nReturns the path to the module the type is in, or <code>None</code> if …\nSee <code>TypePath::module_path</code>.\nThe name of the field.\nThe name of this variant.\nThe name of this variant.\nThe name of this variant.\nThe name of the generic parameter.\nThe name of the type parameter.\nThe name of the const parameter.\nReturns the name of the field with index <code>index</code>.\nReturns the name of the field (in the current variant) …\nCreates a new <code>ArrayIter</code>.\nCreates a new <code>ListIter</code>.\nCreates a new <code>MapIter</code>.\nCreate a type registry with default registrations for …\nCreate a new <code>ArrayInfo</code>.\nCreate a new <code>NamedField</code>.\nCreate a new <code>ListInfo</code>.\nCreate a new <code>MapInfo</code>.\nCreate a new <code>SetInfo</code>.\nCreate a new <code>StructInfo</code>.\nCreate a new <code>TupleInfo</code>.\nCreate a new <code>TupleStructInfo</code>.\nCreate a new <code>DynamicEnum</code> to represent an enum at runtime.\nCreate a new <code>EnumInfo</code>.\nCreate a new <code>StructVariantInfo</code>.\nCreate a new <code>TupleVariantInfo</code>.\nCreate a new <code>UnitVariantInfo</code>.\nCreates an empty set of generics.\nCreates a new type parameter with the given name.\nCreates a new const parameter with the given name.\nCreate a new <code>DynamicEnum</code> with a variant index to represent …\nCreates type registration information for <code>T</code>.\nCreate a new <code>Type</code> from a type that implements <code>TypePath</code>.\nCreates a new table from a type.\nIf the <code>Access</code> was created with a parser or an offset was …\nA character offset in the string the path was parsed from.\nRegisters the type described by <code>registration</code>.\nParses a <code>ParsedPath</code> from a string.\nSimilar to <code>Self::parse</code> but only works on <code>&amp;&#39;static str</code> and …\nReturns a statically typed reference to the value …\nReturns a statically typed reference to the value …\nSee <code>TypePath::type_path</code>.\nSee <code>TypePath::type_path</code>.\nReturns a statically typed mutable reference to the value …\nReturns a statically typed mutable reference to the value …\nRemoves the <em>back</em> element from the list and returns it, or …\nRemoves the <em>back</em> element from the list and returns it, or …\nThe reflect prelude.\nAppends an element to the <em>back</em> of the list.\nAppends an element to the <em>back</em> of the list.\nAppends a typed value to the list.\nAppends a <code>Reflect</code> trait object to the list.\nTakes a read lock on the underlying <code>TypeRegistry</code>.\nSee <code>TypePath::crate_name</code>.\nGets a reference to the specified element on the given …\nGets a mutable reference to the specified element on the …\nReturns a hash of the value (which includes the type).\nReturns a hash of the value (which includes the type).\nReturns a zero-sized enumeration of “kinds” of type.\nReturns a zero-sized enumeration of “kinds” of type.\nSee <code>TypePath::module_path</code>.\nReturns a mutable enumeration of “kinds” of type.\nReturns an owned enumeration of “kinds” of type.\nReturns a “partial equality” comparison result.\nReturns a “partial equality” comparison result.\nReturns a reference to the value specified by <code>path</code>.\nReturns a reference to the value specified by <code>path</code>.\nReturns a mutable reference to the value specified by <code>path</code>.\nReturns a mutable reference to the value specified by <code>path</code>.\nReturns an immutable enumeration of “kinds” of type.\nGenerates a wrapper type that can be used to “derive …\nSee <code>TypePath::short_type_path</code>.\nA macro that automatically generates type data for traits, …\nSee <code>TypePath::type_ident</code>.\nSee <code>Typed::type_info</code>.\nSee <code>TypePath::type_path</code>.\nAttempts to register the type <code>T</code> if it has not yet been …\nRegisters the type data <code>D</code> for type <code>T</code>.\nRegisters other types needed by this type.\nRegisters other types needed by this type.\nRemoves and returns the element at position <code>index</code> within …\nRemoves an entry from the map.\nRemoves a value from the set.\nReturns <code>true</code> if the underlying value represents a value of …\nReturns a serializable version of the value.\nReturns a serializable version of the value.\nPerforms a type-checked assignment of a reflected value to …\nApplies the elements of reflected set <code>b</code> to the …\nThe default debug formatter for <code>Set</code> types.\nCompares a <code>Set</code> with a <code>PartialReflect</code> value.\nSets the type to be represented by this <code>DynamicArray</code>.\nSets the type to be represented by this <code>DynamicList</code>.\nSets the type to be represented by this <code>DynamicMap</code>.\nSets the type to be represented by this <code>DynamicSet</code>.\nSets the type to be represented by this <code>DynamicStruct</code>.\nSets the type to be represented by this <code>DynamicTuple</code>.\nSets the type to be represented by this <code>DynamicTupleStruct</code>.\nSets the type to be represented by this <code>DynamicEnum</code>.\nTries to apply the elements of reflected set <code>b</code> to the …\nSet the current enum variant represented by this struct.\nSet the current enum variant represented by this struct …\nSee <code>TypePath::short_type_path</code>.\nSee <code>TypePath::short_type_path</code>.\nReturns a short, pretty-print enabled path to the type.\nThe default debug formatter for <code>Struct</code> types.\nCompares a <code>Struct</code> with a <code>PartialReflect</code> value.\nDowncasts the value to type <code>T</code>, unboxing and consuming the …\nAttempts to downcast the given value to <code>Self</code> using, …\nAttempts to downcast the given value to <code>Self</code> using, …\nTries to <code>apply</code> a reflected value to this value.\nAttempts to cast this type to a fully-reflected value.\nAttempts to cast this type to a mutable, fully-reflected …\nDowncasts the value to type <code>T</code>, consuming the trait object.\nDowncasts the value to type <code>T</code> by mutable reference.\nDowncasts the value to type <code>T</code> by reference.\nAttempts to cast this type to a boxed, fully-reflected …\nDowncasts the value to type <code>T</code>, unboxing and consuming the …\nApplies the elements of <code>b</code> to the corresponding elements of …\nThe default debug formatter for <code>Tuple</code> types.\nCompares a <code>Tuple</code> with a <code>PartialReflect</code> value.\nThe default debug formatter for <code>TupleStruct</code> types.\nCompares a <code>TupleStruct</code> with a <code>PartialReflect</code> value.\nTries to apply the elements of <code>b</code> to the corresponding …\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nThe underlying Rust type.\nReturns the <code>TypeId</code> of the type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of the underlying type.\nThe <code>TypeId</code> of this type.\nReturns the <code>TypeId</code> that the <code>ReflectFromPtr</code> was constructed …\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nThe <code>TypeId</code> of this type.\nReturns the name of the type, or <code>None</code> if it is anonymous.\nReturns the name of the type, or <code>None</code> if it is anonymous.\nReturns the compile-time info for the underlying type.\nReturns a reference to the registration’s <code>TypeInfo</code>\nThe <code>TypeInfo</code> of the field.\nThe <code>TypeInfo</code> of the field.\nReturns the fully qualified path of the underlying type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of the underlying type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nThe stable, full type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of the underlying type.\nA representation of the type path of this.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nA representation of the type path of this type.\nHelpers for working with Bevy reflection.\nThe <code>TypeInfo</code> of the value type.\nThe type of the value type.\nThe type of the value.\nGet a variant with the given name.\nGet a variant at the given index.\nThe index of the current variant.\nThe number of variants in this enum.\nThe name of the current variant.\nA slice containing the names of all variants in order.\nReturns the full path to the current variant.\nReturns the full path to the current variant.\nReturns the full path to the given variant.\nThe type of the current variant.\nReturns the type of this variant.\nAdds the given generic parameter to the set.\nSets the custom attributes for this field.\nSets the custom attributes for this field.\nSets the custom attributes for this struct.\nSets the custom attributes for this struct.\nSets the custom attributes for this enum.\nSets the custom attributes for this variant.\nSets the custom attributes for this variant.\nSets the custom attributes for this variant.\nSets the default type for the parameter.\nSets the default value for the parameter.\nSets the docstring for this array.\nSets the docstring for this field.\nSets the docstring for this field.\nSets the docstring for this list.\nSets the docstring for this map.\nSets the docstring for this set.\nSets the docstring for this struct.\nSets the docstring for this tuple.\nSets the docstring for this struct.\nSets the docstring for this type.\nSets the docstring for this enum.\nSets the docstring for this variant.\nSets the docstring for this variant.\nSets the docstring for this variant.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nSets the generic parameters for this type.\nTakes a write lock on the underlying <code>TypeRegistry</code>.\nThe actual <code>ReflectKind</code> that was found.\nThe actual <code>VariantType</code> that was found.\nThe <code>ReflectKind</code> that was expected based on the <code>Access</code>.\nThe <code>VariantType</code> that was expected based on the <code>Access</code>.\nThe underlying error.\nPosition in <code>path</code>.\nThe path that the error occurred in.\nA singular element access within a path. Multiple accesses …\nA name-based field access on a struct.\nA index-based field access on a struct.\nAn index-based access on a list.\nAn index-based access on a tuple.\nA collection of custom attributes for a type, field, or …\nReturns <code>true</code> if this collection contains a custom …\nReturns <code>true</code> if this collection contains a custom …\nReturns the argument unchanged.\nGets a custom attribute by type.\nGets a custom attribute by its <code>TypeId</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this collection is empty.\nReturns an iterator over all custom attributes.\nReturns the number of custom attributes in this collection.\nInserts a custom attribute into the collection.\nTrait used to provide finer control when deserializing a …\nType data used to deserialize a <code>PartialReflect</code> type with a …\nA general purpose deserializer for reflected types.\nAllows overriding the default deserialization behavior of …\nType data used to serialize a <code>Reflect</code> type with a custom …\nA general purpose serializer for reflected types.\nAllows overriding the default serialization behavior of …\nA type-erased serializable value.\nContains data relevant to the automatic reflect powered …\nTrait used to provide finer control when serializing a …\nData needed for (de)serialization of a skipped field.\nA deserializer for type registrations.\nA deserializer for reflected types whose <code>TypeRegistration</code> …\nA serializer for reflected types whose type will be known …\nDeserialize a <code>PartialReflect</code> type with this type data’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a default instance of the skipped field at the …\nGenerates a default instance of the field.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no skipped fields.\nReturns true if the given index corresponds to a field …\nReturns an iterator over the skipped fields.\nReturns the number of skipped fields.\nCreates a deserializer with no processor.\nCreates a typed deserializer with no processor.\nCreates a serializer with no processor.\nCreates a serializer with no processor.\nCreates a new <code>SerializationData</code> instance with the given …\nCreate a new <code>SkippedField</code>.\nCreates a new <code>TypedReflectDeserializer</code> for the given type <code>T</code>\nSerialize a <code>Reflect</code> type with this type data’s custom …\nAttempts to deserialize the value which a …\nAttempts to serialize the value which a …\nCreates a deserializer with a processor.\nCreates a typed deserializer with a processor.\nCreates a serializer with a processor.\nCreates a serializer with a processor.\nA struct used to provide the default value of a type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA container for <code>TypedProperty</code> over generic types, allowing …\nSee <code>GenericTypeCell</code>.\nSee <code>GenericTypeCell</code>.\nA container for <code>TypeInfo</code> over non-generic types, allowing …\nSee <code>NonGenericTypeCell</code>.\nUsed to store a <code>String</code> in a <code>GenericTypePathCell</code> as part of …\nA type that can be stored in a (<code>Non</code>)<code>GenericTypeCell</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the <code>TypedProperty</code> stored in the …\nReturns a reference to the <code>TypedProperty</code> stored in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitialize a <code>NonGenericTypeCell</code> for non-generic types.\nInitialize a <code>GenericTypeCell</code> for generic types.\nDeterministic fixed state hasher to be used by …")
searchState.loadedDescShard("bevy_winit", 0, "<code>bevy_winit</code> provides utilities to handle window creation …\nThe <code>App</code> will update over and over, as fast as it possibly …\nThe parameters of the <code>create_monitors</code> system.\nThe parameters of the <code>create_windows</code> system.\nSource for <code>CustomCursor</code>.\nUsed to send custom events to <code>EventLoop</code>.\nA wrapper type around <code>winit::event_loop::EventLoopProxy</code> …\nThe <code>App</code> will update in response to the following, until an …\nDetermines how frequently an <code>App</code> should update.\nThe default event that can be used to wake the window loop …\nUse a custom image as a cursor (mouse pointer).\nA <code>Plugin</code> that uses <code>winit</code> to create and manage windows, and …\nSettings for the <code>WinitPlugin</code>.\nA resource mapping window entities to their <code>winit</code>-backend …\nHelpers for mapping window entities to accessibility types\nSynchronize available monitors as reported by <code>winit</code> with …\nCreates a <code>winit</code> window and associates it with our entity.\nCreates new windows on the <code>winit</code> backend for each entity …\nComponents to customize winit cursor\nDefault settings for desktop applications.\nMaps entities to <code>winit</code> window identifiers.\nDetermines how frequently the application can update when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new cursor from an rgba buffer.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nDefault settings for games.\nGets the “best” video-mode handle from a monitor.\nGets the “best” video mode which fits the given …\nGet the winit window that is associated with our entity.\nGet the entity associated with the winit window id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault settings for mobile.\nReactive mode, will update the app for any kind of event\nLow power mode\nRemove a window from winit.\nAllows the window (and the event loop) to be created on …\nSelects a monitor based on the given <code>MonitorSelection</code>.\nSend an event to the <code>EventLoop</code> from which this proxy was …\nDetermines how frequently the application can update when …\nReturns the current <code>UpdateMode</code>.\nStores <code>winit</code> windows by window identifier.\nMaps <code>winit</code> window identifiers to entities.\nCompute the physical window position for a given …\nReacts to device events, that will wake up the loop if it…\nReacts to user events, that will wake up the loop if it’…\nReacts to window events, that will wake up the loop if it…\nThe approximate time from the start of one update to the …\nMaps window entities to their <code>AccessKit</code> <code>Adapter</code>s.\nImplements winit-specific <code>AccessKit</code> functionality.\nForwards <code>AccessKit</code> <code>ActionRequest</code>s from winit to an event …\nMaps window entities to their respective <code>ActionRequest</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInsert into a window entity to set the cursor for that …\nCustom cursor image.\nCustom cursor image data.\nImage to use as a cursor.\nSystem provided cursor icon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe image must be in 8 bit int or 32 bit float rgba. PNG …\nX and Y coordinates of the hotspot in pixels. The hotspot …")
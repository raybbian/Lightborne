searchState.loadedDescShard("bevy_text", 0, "This crate provides the tools for positioning and …\nThe default grayscale antialiasing. Produces text that …\nLines will be broken without discrimination on any …\nBlack weight (900), the thickest value.\nBlack colored text\nBold weight (700).\nBottom to top Y-axis orientation, for 2d world space\nLeftmost &amp; rightmost characters are equidistant to the …\nComputed information for a text block.\nThe contents that could not be parsed\nWrapper for <code>cosmic_text::Buffer</code>\nA wrapper resource around a <code>cosmic_text::FontSystem</code>\nThe raw data for the default font used by <code>bevy_text</code>\nExtra-bold weight (800).\nExtra light weight (200).\nFailed to add glyph to a newly created atlas for some …\nFailed to get scaled glyph image for cache key\nAn <code>Asset</code> that contains the data for a loaded font, if …\nRasterized glyphs are cached, stored in, and retrieved …\nIdentifies a font size and smoothing method in a …\nA map of font sizes to their corresponding <code>FontAtlas</code>es, …\nA map of font faces to their corresponding <code>FontAtlasSet</code>s.\nAn owned version of <code>Family</code>\nAn <code>AssetLoader</code> for <code>Font</code>s, for use by the <code>AssetServer</code>\nPossible errors that can be produced by <code>FontLoader</code>\nDetermines which antialiasing method to use when rendering …\nA face width.\nAllows italic or oblique faces to be selected.\nSpecifies the weight of glyphs in the font, their degree …\nInformation about a glyph in an atlas.\nThe location of a glyph in an atlas, and how it should be …\nAn IO Error\nA form that is generally cursive in nature.\nWords are spaced so that leftmost &amp; rightmost characters …\nDescribes the horizontal alignment of multiple lines of …\nLight weight (300).\nLeftmost character is immediately to the right of the …\nDetermines how lines will be broken when preventing text …\nMedium weight (500, higher than normal).\nNormal (400).\nFont was not found, this could be that the font has not …\nNo soft wrapping, where text is automatically broken up …\nNo antialiasing. Useful for when you want to render text …\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA glyph of a font, typically representing a single …\nRightmost character is immediately to the left of the …\nSemibold weight (600).\nA wrapper resource around a <code>cosmic_text::SwashCache</code>\nThin weight (100), the thinnest value.\nThe top-level 2D text component.\n<code>Text2dBundle</code> was removed in favor of required components. …\n2d alias for <code>TextReader</code>.\n2d alias for <code>TextWriter</code>.\nThe maximum width and height of text. The text will wrap …\nThe color of the text for this section.\nA sub-entity of a <code>ComputedTextBlock</code>.\nErrors related to the textsystem\n<code>TextFont</code> determines the style of a text span within a …\nComponent with text format settings for a block of text.\nRender information for a corresponding text block.\nSize information for a corresponding <code>ComputedTextBlock</code> …\nThe <code>TextPipeline</code> is used to layout and render text blocks …\nAdds text rendering support to an app.\nSystem parameter for reading text spans in a text block.\nHelper trait for the root text component in a text block.\nA span of UI text in a tree of spans under an entity with …\nHelper trait for using the <code>TextReader</code> and <code>TextWriter</code> …\nHelper trait for the text span components in a text block.\nIterator returned by <code>TextReader::iter</code>.\nSystem parameter for reading and writing text spans in a …\nTop to bottom Y-axis orientation, for UI\nUnbounded text will not be truncated or wrapped.\nSystem set in <code>PostUpdate</code> where all 2d text update systems …\nWhite colored text\nUses the Unicode Line Breaking Algorithm. Lines will be …\nWraps at the word level, or fallback to character level if …\nText is rendered for two different view projections; …\nAdd a glyph to the atlas, updating both its texture and …\nAdds the given subpixel-offset glyph to the <code>FontAtlas</code>es in …\nInformation about the glyph’s atlas.\nSystem calculating and inserting an <code>Aabb</code> component to …\nGets the <code>TextColor</code> of a text span within a text block at a …\nGets the <code>TextColor</code> of a text span within a text block at a …\nComputes the size of the text area within the provided …\nQueues text for measurement\nContent of a font file as bytes\nRecords the hierarchy depth of the entity within a …\nSystem that detects changes to text blocks and sets …\nUsed to update the <code>TextureAtlasLayout</code>.\nAccesses entities in this block.\nThe entity that is measured.\nThe entity.\nThis system extracts the sprites from the 2D text …\nGets the <code>TextFont</code> of a text span within a text block at a …\nGets the <code>TextFont</code> of a text span within a text block at a …\nThe specific font face to use, as a <code>Handle</code> to a <code>Font</code> asset.\nThe vertical height of rasterized glyphs in the font atlas …\nThe antialiasing method to use when rendering text.\nInvokes a callback on each span in a text block, starting …\nInvokes a callback on each span’s <code>TextColor</code> in a text …\nInvokes a callback on each span’s <code>TextFont</code> in a text …\nInvokes a callback on each span’s string value in a text …\nInvokes a callback on each span in a text block, starting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new <code>TextFont</code> with the specified font face handle.\nReturns a new <code>TextFont</code> with the specified font size.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGet a reference to the <code>FontAtlasSet</code> with the given font …\nGets a text span within a text block at a specific index …\nGets a mutable reference to a text span within a text …\nGets the <code>TextColor</code> of a text span within a text block at a …\nGets the <code>TextColor</code> of a text span within a text block at a …\nGets the <code>TextFont</code> of a text span within a text block at a …\nGets the <code>TextFont</code> of a text span within a text block at a …\nReturns the <code>cosmic_text::fontdb::ID</code> for a given <code>Font</code> asset.\nGenerates the <code>GlyphAtlasInfo</code> for the given subpixel-offset …\nGet the <code>GlyphAtlasLocation</code> for a subpixel-offset glyph.\nGet a mutable reference to the <code>FontAtlasSet</code> with the given …\nGet the texture of the glyph as a rendered image, and its …\nGets the text value of a text span within a text block at …\nGets the text value of a text span within a text block at …\nThe index of the glyph in the atlas\nA mapping between subpixel-offset glyphs and their …\nScaled and positioned glyphs in screenspace\nChecks if the given subpixel-offset glyph is contained in …\nChecks if the given subpixel-offset glyph is contained in …\nThe maximum height of text in logical pixels. If <code>None</code>, the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of font atlases in this set\nReturns an iterator over the <code>FontAtlas</code>es in this set\nReturns an iterator over text spans in a text block, …\nThe text’s internal alignment. Should not affect its …\nReturns the number of font atlases in this set\nHow the text should linebreak when running out of the …\nProcesses the asset in an asynchronous closure.\nLocation and offset of a glyph within the texture atlas.\nMaximum size for a text area in pixels, to be used when …\nMinimum size for a text area in pixels, to be used when …\nIndicates if the text needs to be refreshed in …\nCreate a new <code>FontAtlas</code> with the given size, adding it to …\nCreates a new <code>TextBounds</code>, bounded with the specified width …\nCreates a new <code>PositionedGlyph</code>\nMakes a new <code>TextLayout</code>.\nMakes a new text span component.\nMakes a new 2d text component.\nCreates a new <code>TextBounds</code>, bounded with the specified width …\nCreates a new <code>TextBounds</code>, bounded with the specified …\nMakes a new <code>TextLayout</code> with the specified <code>JustifyText</code>.\nMakes a new <code>TextLayout</code> with the specified <code>LineBreak</code>.\nMakes a new <code>TextLayout</code> with soft wrapping disabled. Hard …\nThe required offset (relative positioning) when placed\nThe position of the glyph in the text block’s bounding …\nThe text prelude.\nQueues text for rendering\nGets the text span’s string.\nA system that cleans up <code>FontAtlasSet</code>s for removed <code>Font</code>s\nScales <code>value</code> by <code>factor</code>.\nThe width and height of the glyph in logical pixels.\nThe glyphs resulting size\nThe index of the glyph in the <code>ComputedTextBlock</code>’s …\nGets the text value of a text span within a text block at …\nGets the text value of a text span within a text block at …\nThe texture where this font atlas is located\nA handle to the <code>Image</code> data for the texture atlas this …\nThe handle to the <code>TextureAtlasLayout</code> that holds the …\nA handle to the <code>TextureAtlasLayout</code> map for the texture …\nReturns a numeric representation of a width.\nCreates a <code>Font</code> from bytes\nUtilizes <code>cosmic_text::Buffer</code> to shape and layout text\nUpdates the layout and size information whenever the text …\nThe maximum width of text in logical pixels. If <code>None</code>, the …\nReturns this <code>TextFont</code> with the specified font face handle.\nReturns this <code>TextFont</code> with the specified font size.\nReturns this <code>TextFont</code> with the specified <code>FontSmoothing</code>.\nReturns this <code>TextLayout</code> with the specified <code>JustifyText</code>.\nReturns this <code>TextLayout</code> with the specified <code>LineBreak</code>.\nReturns this <code>TextLayout</code> with soft wrapping disabled. Hard …\nGets mutable reference to the text span’s string.")
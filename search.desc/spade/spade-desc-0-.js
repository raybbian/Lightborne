searchState.loadedDescShard("spade", 0, "Spade\nSpecifies the minimum allowed angle that should be kept …\nImplements methods related to barycentric interpolation.\nUndirected edge type of a ConstrainedDelaunayTriangulation …\nA two-dimensional constrained Delaunay triangulation.\nA two-dimensional Delaunay triangulation.\nThe triangulation’s edge type. Any new edge is created …\nIndicates that the line is either crossing or touching an …\nIndicates that a line is (partially) overlapping an …\nThe triangulation’s face type. Any new face is created …\nImplements general functions for triangulations over …\nAn object with a position.\nA hint generator based on a hierarchy of triangulations …\nA structure used to speed up common operations on delaunay …\nThe hint generator used by the triangulation. See …\nThe error type used for inserting elements into a …\nAn intersection that can occur when moving through a …\nA hint generator that returns the last used vertex as hint.\nAn iterator over all intersections of a straight line …\nDescribes on which side of a line a point lies.\nThe largest allowed coordinate value that can be inserted …\nThe smallest allowed coordinate value greater than zero …\nA coordinate value was NaN.\nImplements methods for natural neighbor interpolation.\nThe triangulation contains either no vertices or exactly …\nA position lies exactly on an edge. The edge’s handle is …\nA position lies in the interior of a face. The face’s …\nA position lies exactly on an existing vertex. The …\nA position lies outside the convex hull. The given edge …\nA two-dimensional point.\nIndicates a point’s projected position relative to an …\nDescribes a position in a triangulation.\nControls how Delaunay refinement is performed.\nContains details about the outcome of a refinement …\nThe number type used by this coordinate type.\nA coordinate type that can be used with a triangulation.\nA coordinate value was too large.\nA coordinate value was too small.\nDefines common operations on triangulations.\nThe triangulation’s undirected edge type. Any new edge …\nThe triangulation’s vertex type.\nIndicates that the line is touching a vertex. A line …\nAdds a constraint edge between to vertices.\nAdds a constraint to the triangulation. Splits any …\nInsert two points and creates a constraint between them.\nCreates a several constraint edges by taking and …\nAn iterator visiting all faces.\nAn iterator visiting all faces.\nReturns <code>true</code> if all vertices lie on a single line.\nReturns <code>true</code> if all vertices lie on a single line.\nReturns the intersected edge if this is an edge …\nUsed for barycentric interpolation on this triangulation. …\nUsed for barycentric interpolation on this triangulation. …\nCreates a new triangulation populated with some vertices.\nCreates a new triangulation populated with some vertices.\nEfficient bulk loading of a constraint delaunay …\nStable bulk load variant that preserves the input vertex …\nCreates a new delaunay triangulation with an efficient …\nChecks if a constraint edge can be added.\nRemoves all edges, faces and vertices from the …\nRemoves all edges, faces and vertices from the …\nReturns an iterator over all convex hull edges.\nReturns an iterator over all convex hull edges.\nReturns the number of edges of the convex hull.\nReturns the number of edges of the convex hull.\nReturns the wrapped undirected edge data type.\nReturns the wrapped undirected edge data type.\nConverts a fixed directed edge handle to a reference …\nConverts a fixed directed edge handle to a reference …\nReturns a mutable reference to the associated data of a …\nReturns a mutable reference to the associated data of a …\nAn iterator visiting all directed edges.\nAn iterator visiting all directed edges.\nAn iterator visiting all directed voronoi edges.\nAn iterator visiting all directed voronoi edges.\nReturns the squared distance of this point and another …\nAllows to exclude outer faces from the refinement process.\nA <code>Vec</code> containing all outer faces that were excluded from …\nChecks if two vertices are connected by a constraint edge.\nConverts a fixed face handle to a reference face handle.\nConverts a fixed face handle to a reference face handle.\nReturns a mutable reference to the associated data of a …\nReturns a mutable reference to the associated data of a …\nAn iterator visiting all faces.\nAn iterator visiting all faces.\nAn iterator visiting all directed edges.\nAn iterator visiting all directed edges.\nAn iterator visiting all inner faces of the triangulation.\nAn iterator visiting all inner faces of the triangulation.\nAn iterator visiting all undirected edges.\nAn iterator visiting all undirected edges.\nAn iterator visiting all vertices.\nAn iterator visiting all vertices.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new angle limit from an angle given in degrees.\nCreate a new angle limit from an angle given in radians.\nCreates a new angle limit by specifying the circumradius …\nReturns all constraint edges that would prevent creating a …\nReturns all constraint edges that would prevent inserting …\nReturns an edge between two vertices.\nReturns an edge between two vertices.\nReturns all edges contained in a circle.\nReturns all edges contained in a circle.\nReturns all edges contained in a rectangle.\nReturns all edges contained in a rectangle.\nReturns a vertex handle that should be close to a given …\nGet a vertex by its index\nGet a vertex by its index\nReturns all vertices in a circle.\nReturns all vertices in a circle.\nReturns all vertices in a rectangle.\nReturns all vertices in a rectangle.\nCalculates the natural neighbors and their weights (sibson …\nReturns the barycentric coordinates and the respective …\nHandle types used for traversal and modification of …\nCreates a new hint generator initialized to give hints for …\nAn iterator visiting all inner faces. The iterator type is …\nAn iterator visiting all inner faces. The iterator type is …\nInserts a new vertex into the triangulation.\nInserts a new vertex into the triangulation.\nInserts a new vertex into the triangulation.\nInserts a new vertex into the triangulation.\nInternals that must be published due to technical reasons. …\nInterpolates a value at a given position.\nPerforms barycentric interpolation on this triangulation …\nInterpolates a value at a given position.\nChecks if a line intersects a constraint edge.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if a point’s projection is located before …\nReturns <code>true</code> if a point’s projection is located behind …\nReturns <code>true</code> if this edge is a constraint edge.\nReturns <code>true</code> if a given edge is a constraint edge.\nReturns <code>true</code> if a point’s projection is located on an …\nReturns <code>true</code> if a point lies on the left side of a line.\nReturns <code>true</code> if a point lies on the left side of a line or …\nReturns <code>true</code> if a point lies exactly on this line.\nReturns <code>true</code> if a point lies on the right side of a line.\nReturns <code>true</code> if a point lies on the right side of a line …\nIterators over various elements of Delaunay triangulations.\nPrevents constraint edges from being split during …\nReturns information about the location of a point in a …\nReturns information about the location of a point in a …\nAttempts to remove a vertex from the triangulation.\nAttempts to remove a vertex from the triangulation.\nLocates a vertex at a given position.\nLocates a vertex at a given position.\nReturns information about the location of a point in a …\nReturns information about the location of a point in a …\nPrevents underflow issues of a position by setting any …\nAllows using natural neighbor interpolation on this …\nReturns the nearest neighbor of a given input vertex.\nCreates a new <code>LineIntersectionIterator</code> covering an …\nCreates a new triangulation.\nCreates a new triangulation.\nCreates a new set of <code>RefinementParameters</code>.\nCreates a new point.\nCreates a new line iterator covering the line spanned by …\nNotifies the hint generator that a new vertex is inserted\nNotifies the hint generator that an element was looked up\nNotifies the hint generator that a vertex was removed\nReturns the number of all faces, including the single …\nReturns the number of all faces, including the single …\nReturns the number of constraint edges.\nReturns the number of directed edges in this triangulation.\nReturns the number of directed edges in this triangulation.\nReturns the number of inner faces in this triangulation.\nReturns the number of inner faces in this triangulation.\nReturns the number of undirected edges in this …\nReturns the number of undirected edges in this …\nReturns the number vertices in this triangulation.\nReturns the number vertices in this triangulation.\nReturns a reference handle to the single outer face of …\nReturns a reference handle to the single outer face of …\nReturns the position of this object.\nReturns the radius to shortest edge limit corresponding to …\nRefines a triangulation by inserting additional points to …\nSet to <code>true</code> if the refinement could be completed regularly.\nReturns the relative position of the point used to create …\nRemoves a vertex from the triangulation.\nRemoves a vertex from the triangulation.\nRemoves a vertex from the triangulation.\nRemoves a constraint edge.\nReturns the opposite of this <code>LineSideInfo</code>.\nReturns the inverse of this point projection.\nAttempts to add a constraint edge. Leaves the …\nConverts a fixed undirected edge handle to a reference …\nConverts a fixed undirected edge handle to a reference …\nReturns a mutable reference ot the associated data of an …\nReturns a mutable reference ot the associated data of an …\nAn iterator over all undirected edges.\nAn iterator over all undirected edges.\nAn iterator visiting all undirected voronoi edges.\nAn iterator visiting all undirected voronoi edges.\nChecks if a coordinate value is suitable for insertion …\nChecks if a vertex is suitable for insertion into a …\nConverts a fixed vertex handle to a reference vertex …\nConverts a fixed vertex handle to a reference vertex …\nReturns a mutable reference to the associated data of a …\nReturns a mutable reference to the associated data of a …\nAn iterator visiting all vertices.\nAn iterator visiting all vertices.\nAn iterator visiting all faces of the Voronoi diagram.\nAn iterator visiting all faces of the Voronoi diagram.\nSpecifies the smallest allowed inner angle in a refined …\nCreates a new triangulation and pre-allocates some space …\nCreates a new triangulation and pre-allocates some space …\nSpecifies how many additional vertices may be inserted …\nSpecifies an upper bound for triangle areas in the …\nSpecifies a lower bound for a triangles area.\nThe point’s x coordinate\nThe point’s y coordinate\nHandle to a directed edge of a triangulation.\nA handle to a directed edge of the Voronoi diagram.\nHandle to a face of a triangulation.\nFixed handle to a directed edge.\n“Fixed handle to a face.\nFixed handle to an undirected edge.\nFixed handle to a vertex.\nRefers to an inner vertex of the voronoi diagram.\nMarker type that signifies that a face is an inner faces.\nReturns a reference to the single outer face.\nRefers to an outer vertex of the voronoi diagram.\nMarker type that signifies that a face can possibly be the …\nHandle to an undirected edge of a triangulation.\nA handle to an undirected edge of the Voronoi diagram.\nHandle to a vertex of a triangulation.\nA handle to a face of the voronoi diagram.\nA handle to a vertex of the voronoi diagram.\nReturns an edge that is adjacent to this face.\nReturns an edge that is adjacent to this face.\nReturns the three inner edges adjacent to this face.\nReturns an iterator that returns all edges adjacent to …\nReturns the triangle’s area.\nReturns the directed dual edge of the underlying Delaunay …\nReturns the dual edge of the Delaunay triangulation.\nReturns the dual delaunay face of this voronoi vertex.\nConverts this face into its dual vertex of the Delaunay …\nConverts this directed edge into an undirected edge handle.\nConverts this directed edge into an undirected edge handle.\nConverts this undirected handle into a directed edge …\nConverts this face handle to an inner face.\nConverts this possibly outer face handle into an inner …\nConverts this directed edge handle into an undirected edge …\nConverts this directed edge handle into an undirected edge …\nConverts this directed edge handle into an undirected edge …\nConverts this edge into its dual voronoi edge.\nReturns the dual edge in the Voronoi diagram.\nReturns the voronoi face that corresponds to this vertex …\nReturns the barycentric coordinates of a point relative to …\nReturns the next edge in counterclockwise direction.\nReturns the center of this edge\nReturns the center of this edge.\nReturns the face’s center point.\nReturns the face’s circumcenter.\nReturns the face’s circumcircle center and the <strong>squared</strong> …\nReturns the next edge in clockwise direction.\nReturns a reference to the data associated with this …\nReturns a reference to the data associated with this …\nReturns the data associated with this vertex.\nReturns a reference to the data associated with this face.\nReturns the two directed edges of this undirected edge in …\nReturns a vector that is parallel to the voronoi edge.\nReturns the squared distance of a point to this edge.\nReturns the squared distance of a point to this edge.\nReturns the squared distance of a point to this triangle.\nReturns the face located to the left of this edge.\nReturns the Voronoi face to the left of this Voronoi edge\nReturns the edge’s origin vertex.\nReturns the voronoi vertex from which this edge originates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new vertex handle from a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this edge is a constraint edge.\nReturns <code>true</code> if this edge is a constraint edge.\nReturns <code>true</code> if this face is the single outer face.\nReturns <code>true</code> if this handle refers to the single outer …\nReturns <code>true</code> if this edge is adjacent to the outer face.\nReturns <code>true</code> if either this edge or its reversed edge is …\nReturns <code>true</code> if the outer face is adjacent to any side of …\nReturns the squared length of this edge.\nReturns the squared length of this edge\nYields the nearest point on this edge.\nYields the nearest point on this edge.\nReturns the oriented next edge.\nReturns the edge that is connected to this edge in …\nReturns the position of the vertex opposite of this edge.\nReturns the vertex which lies opposite of this edge.\nReturns an outgoing edge of this vertex.\nReturns a voronoi edge going out of this vertex.\nReturns all directed edges going out of this vertex.\nReturns all directed voronoi edges going out of this …\nReturns the position of this vertex.\nThe position of this voronoi vertex.\nReturns the start and end position of this edge.\nReturns the end positions of this edge.\nReturns the positions of the face’s vertices\nReturns the oriented previous edge.\nReturns the edge that is connected to this edge in …\nIndicates the position of a point being projected onto …\nReturns this edge with its direction reversed.\nReturns this edge in reversed direction.\nReturns this edge with its direction reversed.\nIdentifies on which side of this edge a point lies.\nReturns the edge’s destination vertex.\nReturns the voronoi edge’s destination.\nReturns the edge’s two vertices.\nReturns the edge’s two vertices.\nReturns the face’s three vertices.\nReturns the edge’s two vertices.\nInternal type definition that is only exposed for …\nInternal type definition that is only exposed for …\nReturns an edge that is adjacent to this face.\nReturns an edge that is adjacent to this face.\nReturns the three inner edges adjacent to this face.\nReturns an iterator that returns all edges adjacent to …\nReturns the triangle’s area.\nReturns the directed dual edge of the underlying Delaunay …\nReturns the dual edge of the Delaunay triangulation.\nConverts this face into its dual vertex of the Delaunay …\nConverts this undirected handle into a directed edge …\nConverts this directed edge into an undirected edge handle.\nConverts this directed edge into an undirected edge handle.\nConverts this possibly outer face handle into an inner …\nConverts this face handle to an inner face.\nConverts this directed edge handle into an undirected edge …\nConverts this directed edge handle into an undirected edge …\nConverts this directed edge handle into an undirected edge …\nConverts this edge into its dual voronoi edge.\nReturns the dual edge in the Voronoi diagram.\nReturns the voronoi face that corresponds to this vertex …\nReturns the barycentric coordinates of a point relative to …\nReturns the next edge in counterclockwise direction.\nReturns the center of this edge.\nReturns the center of this edge\nReturns the face’s center point.\nReturns the face’s circumcenter.\nReturns the face’s circumcircle center and the <strong>squared</strong> …\nReturns the next edge in clockwise direction.\nReturns a reference to the data associated with this …\nReturns the data associated with this vertex.\nReturns a reference to the data associated with this …\nReturns a reference to the data associated with this face.\nReturns the two directed edges of this undirected edge in …\nReturns a vector that is parallel to the voronoi edge.\nReturns the squared distance of a point to this edge.\nReturns the squared distance of a point to this triangle.\nReturns the squared distance of a point to this edge.\nReturns the Voronoi face to the left of this Voronoi edge\nReturns the face located to the left of this edge.\nConverts this dynamic handle to its fixed variant.\nReturns the voronoi vertex from which this edge originates.\nReturns the argument unchanged.\nReturns the edge’s origin vertex.\nReturns the argument unchanged.\nCreates a new vertex handle from a <code>usize</code>.\nReturns the internal index of this element.\nReturns the internal index of this element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this edge is a constraint edge.\nReturns <code>true</code> if this edge is a constraint edge.\nReturns <code>true</code> if this handle refers to the single outer …\nReturns <code>true</code> if this face is the single outer face.\nReturns <code>true</code> if this edge is adjacent to the outer face.\nReturns <code>true</code> if either this edge or its reversed edge is …\nReturns <code>true</code> if the outer face is adjacent to any side of …\nReturns the squared length of this edge.\nReturns the squared length of this edge\nYields the nearest point on this edge.\nYields the nearest point on this edge.\nReturns the edge that is connected to this edge in …\nReturns the oriented next edge.\nReturns the position of the vertex opposite of this edge.\nReturns the vertex which lies opposite of this edge.\nReturns an outgoing edge of this vertex.\nReturns all directed edges going out of this vertex.\nReturns the position of this vertex.\nReturns the start and end position of this edge.\nReturns the end positions of this edge.\nReturns the positions of the face’s vertices\nReturns the edge that is connected to this edge in …\nReturns the oriented previous edge.\nIndicates the position of a point being projected onto …\nReturns this edge in reversed direction.\nReturns this edge with its direction reversed.\nReturns this edge with its direction reversed.\nIdentifies on which side of this edge a point lies.\nReturns the voronoi edge’s destination.\nReturns the edge’s destination vertex.\nReturns the edge’s two vertices.\nReturns the edge’s two vertices.\nReturns the face’s three vertices.\nReturns the edge’s two vertices.\nDefines the shape of circle.\nAn iterator over directed edges.\nAn iterator over directed voronoi edges.\nAn iterator over edges within a shape (e.g. a rectangle or …\nAn iterator over faces.\nAn iterator over fixed directed edges.\nAn iterator over fixed faces.\nAn iterator over fixed inner faces.\nAn iterator over fixed undirected edges.\nAn iterator over fixed vertices.\nAn iterator over inner faces.\nDefines the shape of a rectangle.\nAn iterator over undirected edges.\nAn iterator over undirected voronoi edges.\nAn iterator over vertices.\nAn iterator over vertices within a shape (e.g. a rectangle …\nAn iterator over voronoi faces.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")
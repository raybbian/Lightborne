searchState.loadedDescShard("bevy_ecs_ldtk", 0, "<code>bevy_ecs_ldtk</code>\nRenders the tile with its corresponding color in LDtk, so …\nIndicates that a level has despawned.\n<code>Component</code> added to all <code>LdtkEntity</code>s by default.\nUpdate the clear color to use the entire editor’s …\nUpdate the clear color to use the background color of the …\nComponent that stores grid-based coordinate information.\nSpawn level with the given identifier.\nSpawn level with the given level <code>iid</code>.\nSpawn level from its indices in the LDtk file’s …\nComponent added to any <code>IntGrid</code> tile by default.\nOption in LdtkSettings that determines the visual …\nDoes not render the tile\nComponent for storing some LDtk layer information on layer …\nAdds the default systems, assets, and resources used by …\n<code>Component</code> storing the LDtk project asset handle, marking …\nSettings resource for the plugin. Check out the …\n<code>Bundle</code> for spawning LDtk worlds and their levels. The main …\nOption in LdtkSettings that dictates how the plugin …\nEvents fired by the plugin related to level …\n<code>Component</code> that stores a level’s instance identifier.\n<code>Resource</code> for choosing which level(s) to spawn.\n<code>Component</code> that determines the desired levels to be spawned …\nOption in LdtkSettings that determines level spawn …\nDon’t update the clear color at all\nThere will be no level backgrounds, not even an empty …\nSchedule for processing this plugin’s ECS API, inserted …\nThe level background’s color (and image, if it exists) …\nComponent that indicates that an LDtk level or world …\nOption in LdtkSettings that determines clear color …\nSpecifies data that should be ignored completely when …\nIndicates that a level has been triggered to spawn, but …\nThe level, with all of its layers, entities, etc., has …\nComponent for storing user-defined, enum-based tags for a …\nComponent for storing user-defined custom data for a …\nOccurs during the <code>PostUpdate</code> after the level has spawned, …\nSpawn level with the given level <code>uid</code>.\nNewly spawned levels will be spawned with translations …\nNewly spawned levels will be spawned with a translation of …\n<code>Component</code> that indicates that an ldtk entity should be a …\nTypes and traits for hooking into the ldtk loading process …\nGets the Iid of the entity as a &amp;str.\nImmutable access to the IID as a <code>&amp;str</code>.\nAssets and related items for loading LDtk files.\nGrid-based height\nGrid-based width\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a Worldly from the entity information available to …\nCreates a GridCoords from the entity information available …\nConstruct a new <code>LevelSet</code> from a collection of iids.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nImmutable access to the IID as a <code>String</code>.\nGrid size\nLayer definition identifier\nConstruct a <code>LevelSelection::Iid</code> using the given iid.\nUnique layer instance identifier\nConstruct a <code>LevelSelection::Indices</code> using the given level …\nConstruct a <code>LevelSelection::Indices</code> using the given world …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the given level matches this <code>LevelSelection</code>…\nReference the Layer definition UID\nList of layer <code>Identifier</code> names (not UIDs) to skip spawning …\nLayer type (possible values: IntGrid, Entities, Tiles or …\nContains all the types for serializing/deserializing an …\nReference to the UID of the level containing this layer …\nCreates a new <code>EntityIid</code> from any string-like type.\nCreates a new <code>LevelIid</code> from any string-like type.\nLayer opacity as Float [0-1]\nAn Array containing the UIDs of optional rules that were …\nThis layer can use another tileset by overriding the …\n<code>use bevy_ecs_ldtk::prelude::*;</code> to import commonly used …\nX offset in pixels to render this layer, usually 0 …\nY offset in pixels to render this layer, usually 0 …\nTotal layer X pixel offset, including both instance and …\nTotal layer Y pixel offset, including both instance and …\nRandom seed used for Auto-Layers rendering\nSystem functions used by the plugin for processing ldtk …\nThe definition UID of corresponding Tileset, if any.\nThe relative path to corresponding Tileset, if any.\nUtility functions used internally by the plugin that have …\nLayer instance visibility\nWhen used with the <code>LevelSelection</code> resource, levels in the …\nProvides a constructor which can be used for spawning …\nProvides functions to register Bundles to bevy’s App for …\nUsed by LdtkEntityAppExt to associate Ldtk entity …\nProvides a constructor which can be used for spawning …\nProvides functions to register Bundles to bevy’s App for …\nUsed by LdtkIntCellAppExt to associate Ldtk IntGrid values …\nThe constructor used by the plugin when spawning entities …\nThe constructor used by the plugin when spawning …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimilar to LdtkEntityAppExt::register_ldtk_entity_for_layer…\nSimilar to LdtkEntityAppExt::register_ldtk_entity_for_layer…\nSimilar to LdtkEntityAppExt::register_ldtk_entity_for_layer…\nSimilar to LdtkEntityAppExt::register_ldtk_entity_for_layer…\nSimilar to …\nSimilar to …\nSimilar to …\nSimilar to …\nSimilar to LdtkEntityAppExt::register_ldtk_entity_for_layer…\nSimilar to LdtkEntityAppExt::register_ldtk_entity_for_layer…\nRegisters LdtkEntity types to be spawned for a given …\nRegisters LdtkEntity types to be spawned for a given …\nUsed internally by all the other LDtk entity registration …\nSimilar to …\nSimilar to …\nRegisters LdtkIntCell types to be inserted for a given …\nRegisters LdtkIntCell types to be inserted for a given …\nUsed internally by all the other LDtk int cell …\nMarker type for indicating an internal-levels LDtk project.\nPlugin that registers LDtk-related assets.\nLDtk json data and level metadata produced when loading an …\nMain asset for loading LDtk project data.\nLDtk json data and level metadata for both internal- and …\nIndices pointing to the location of a level in an …\nMetadata produced for every level during <code>LdtkProject</code> …\nConvenience methods for types that store levels and level …\nLDtk data for a standalone project (uses internal levels).\nUnwrap as a <code>LdtkJsonWithMetadata&lt;InternalLevels&gt;</code>. For use …\nUnwrap as a <code>LdtkJsonWithMetadata&lt;InternalLevels&gt;</code>. For use …\nImage handle for the background image of this level, if it …\nLDtk json data and level metadata.\nFind the loaded level matching the given <code>LevelSelection</code>.\nFind the level matching the given <code>LevelSelection</code>.\nFind the level matching the given <code>LevelSelection</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns a reference to the level metadata corresponding to …\nImmutable access to a loaded level at the given …\nReturns a reference to the loaded level metadata …\nImmutable access to a level at the given level iid.\nImmutable access to a level at the given level iid.\nConstruct a new <code>LevelIndices</code> pointing to a level in the …\nConstruct a new <code>LevelIndices</code> pointing to a level in a …\nIndices of this level in the project.\nImage used for rendering int grid colors.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through this project’s loaded levels.\nRaw ldtk json data.\nRaw ldtk json data.\nRaw ldtk json data.\nThe index of the level, either within a world or in the …\nMap from level iids to level metadata.\nConstruct a new <code>LevelMetadata</code>.\nMap from tileset uids to image handles for the loaded …\nThe index of the world the level belongs to, if the …\nPossible values: <code>Any</code>, <code>OnlySame</code>, <code>OnlyTags</code>, …\nThis complex section isn’t meant to be used by game devs …\nChecker mode Possible values: <code>None</code>, <code>Horizontal</code>, <code>Vertical</code>\nIf you’re writing your own LDtk importer, you should …\nPossible values: <code>Hidden</code>, <code>ValueOnly</code>, <code>NameAndValue</code>, …\nPossible values: <code>Above</code>, <code>Center</code>, <code>Beneath</code>\nPossible values: <code>ZigZag</code>, <code>StraightArrow</code>, <code>CurvedArrow</code>, …\nComponent added to any LDtk Entity by default.\nIn a tileset definition, enum based tag infos\nThis section is mostly only intended for the LDtk editor …\nThe actual value of a field instance on a Level or …\nThis object is not actually used by LDtk. It ONLY exists …\nThis object is just a grid-based coordinate used in Field …\nNaming convention for Identifiers (first-letter uppercase, …\n“Image export” option when saving project. Possible …\nIntGrid value definition\nIntGrid value group definition\nIntGrid value instance\nThis file is a JSON schema of files created by LDtk level …\nThis section contains all the level data. It can be found …\nLevel background image position info\nPossible values: <code>DiscardOldOnes</code>, <code>PreventAdding</code>, <code>MoveLastOne</code>\nIf TRUE, the maxCount is a “per world” limit, if …\nNearby level info\nThis object describes the “location” of an Entity …\nPossible values: <code>Rectangle</code>, <code>Ellipse</code>, <code>Tile</code>, <code>Cross</code>\nRepresents either a String or a Multilines\nRepresents either Strings or Multilines\nIn a tileset definition, user defined meta-data of a tile.\nThis structure represents a single tile from a given …\nDefines how tileIds array is used Possible values: <code>Single</code>, …\nAn enum describing how the the Entity tile is rendered …\nThe <code>Tileset</code> definition is the most important part among …\nThis object represents a custom sub rectangle in a Tileset …\nType of the layer as Haxe Enum Possible values: <code>IntGrid</code>, …\nPossible values: <code>Manual</code>, <code>AfterLoad</code>, <code>BeforeSave</code>, <code>AfterSave</code>\n<strong>IMPORTANT</strong>: this type is available as a preview. You can …\nAlpha/opacity of the tile (0-1, defaults to 1)\nOptional list of accepted file extensions for FilePath …\nIf FALSE, the rule effect isn’t applied, and no tiles …\nContains <code>AllSomeIter</code>, for coercing a slice of options to …\nIf enabled, this entity is allowed to stay outside of the …\nPossible values: <code>Any</code>, <code>OnlySame</code>, <code>OnlyTags</code>, …\nLDtk application build identifier.  This is only used to …\nArray max length\nArray min length\nAn array containing all tiles generated by Auto-layer …\nContains all the auto-layer rule definitions.\n<strong>WARNING</strong>: this deprecated value is no longer exported since …\nNumber of backup files to keep, if the <code>backupOnSave</code> is TRUE\nIf TRUE, an extra copy of the project will be created in a …\nTarget relative path to store backup files\nProject background color\nBackground color of the level (same as <code>bgColor</code>, except the …\nBackground image X pivot (0-1)\nBackground image Y pivot (0-1)\nPosition informations of the background image, if there is …\nThe <em>optional</em> relative path to the level background image.\nWhen TRUE, the rule will prevent other rules to be applied …\nGrid-based height\nGrid-based height\nGrid-based width\nGrid-based width\nThe following data is used internally for various …\nTRUE if the value can be null. For arrays, TRUE means it …\nAllow editor selections when the layer is not currently …\nChances for this rule to be applied (0 to 1)\nChecker mode Possible values: <code>None</code>, <code>Horizontal</code>, <code>Vertical</code>\n<em>This field was removed in 1.0.0 and should no longer be </em>…\nBase entity color\nOptional color\nUser defined color\nCoordinate ID in the layer grid\nCreates image that will be used for rendering IntGrid …\nAn array of 4 float values describing the cropped …\nAn array of command lines that can be ran manually by the …\nAn array of custom tile metadata\nX grid-based coordinate\nY grid-based coordinate\nInternal data used by the editor.  For auto-layer tiles: …\nReference of the <strong>Field definition</strong> UID\nReference of the <strong>Entity definition</strong> UID\nDefault height for new entities\nDefault width for new entities\nDefault grid size for new layers\nDefault background color of levels\n<strong>WARNING</strong>: this field will move to the <code>worlds</code> array after …\nDefault new level height\n<strong>WARNING</strong>: this field will move to the <code>worlds</code> array after …\nDefault new level width\nDefault value if selected value is null or invalid.\nDefault X pivot (0 to 1) for new entities\nDefault Y pivot (0 to 1) for new entities\nA structure containing all the definitions of this project\nA lowercase string tipping on the level location (<code>n</code>orth, <code>s</code>…\nOpacity of the layer (0 to 1.0)\nUser defined documentation for this element to provide …\nUser defined documentation for this field to provide …\nUser defined documentation for this element to provide …\nIf the project isn’t in MultiWorlds mode, this is the …\nPossible values: <code>Hidden</code>, <code>ValueOnly</code>, <code>NameAndValue</code>, …\nPossible values: <code>Above</code>, <code>Center</code>, <code>Beneath</code>\nPossible values: <code>ZigZag</code>, <code>StraightArrow</code>, <code>CurvedArrow</code>, …\nIf this value is set, then it means that this atlas uses …\nAll entities definitions, including their custom fields\nIID of the refered EntityInstance\nTileset tags using Enum values specified by …\nAll internal enums\nAn array of tags to forbid some Entities in this layer\nIf TRUE, the exported PNGs will include the level …\n<strong>WARNING</strong>: this deprecated value is no longer exported since …\nIf TRUE, a Tiled compatible file will also be generated …\nIf enabled, all instances of this entity will be listed in …\nIf TRUE, the field value will be exported to the <code>toc</code> …\nNote: external enums are exactly the same as <code>enums</code>, except …\nIf TRUE, one file will be saved for the project (incl. all …\nRelative path to the external file providing this Enum\nThis value is not null if the project option “<em>Save </em>…\n“Flip bits”, a 2-bits integer to represent the mirror …\nHuman readable value type. Possible values: …\nArray of field definitions\nType of the field, such as <code>Int</code>, <code>Float</code>, <code>String</code>, …\nAn array of all custom fields and their values.\nAn array containing this level custom field values.\nAn object containing the values of all entity fields with …\nAn array containing various advanced flags (ie. options or …\nIf TRUE, allow rule to be matched by flipping its pattern …\nIf TRUE, allow rule to be matched by flipping its pattern …\nThis object is not actually used by LDtk. It ONLY exists …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGrid-based coordinates (<code>[x,y]</code> format)\nWidth and height of the grid in pixels\nGrid size\nParent group identifier (0 if none)\nHeight of the optional “guide” grid in pixels\nWidth of the optional “guide” grid in pixels\nHeight in pixels\nPixel height\nEntity height in pixels. For non-resizable entities, it …\nHide the layer from the list on the side of the editor …\nTileset UID if provided\nEnum value\nField definition identifier\nUser defined unique identifier\nUser defined unique identifier\nUser defined unique identifier\nUser defined unique identifier\nUser defined unique identifier\nUser defined string identifier\nUser defined unique identifier\nEntity definition identifier\nLayer definition identifier\nUser defined unique identifier\nUser defined unique identifier\nNaming convention for Identifiers (first-letter uppercase, …\nUnique project identifier\nUnique instance identifier\nUnique layer instance identifier\nUnique instance identifier\nUnique instance identifer\nIID information of this instance\n“Image export” option when saving project. Possible …\nAlpha of this layer when it is not the active one.\n<strong>WARNING</strong>: this deprecated value will be <em>removed</em> completely …\n<strong>WARNING</strong>: this deprecated value is no longer exported since …\nA list of all values in the IntGrid layer, stored in CSV …\nAn array that defines extra optional info for each IntGrid …\nGroup informations for IntGrid values\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf TRUE, then the rule should be re-evaluated by the …\nTRUE if the value is an array of multiple values\nFile format version\nOnly applies to entities resizable on both X/Y. If TRUE, …\nReference the Layer definition UID\nType of the layer (<em>IntGrid, Entities, Tiles or AutoLayer</em>)\nIID of the LayerInstance containing the refered …\nLayer type (possible values: IntGrid, Entities, Tiles or …\nAn array containing all Layer instances. <strong>IMPORTANT</strong>: if the …\nAll layer definitions\nContains <code>LdtkFields</code> trait, providing convenience methods …\nBackground color of the level. If <code>null</code>, the project …\nAn enum defining the way the background image (if any) is …\nAll custom fields available to all levels.\nReference to the UID of the level containing this layer …\nIID of the Level containing the refered EntityInstance\nNeighbour Instance Identifier\nThe default naming convention for level identifiers.\n<strong>WARNING</strong>: this deprecated value is no longer exported since …\nAll levels. The order of this array is only relevant in …\nAll levels from this world. The order of this array is …\nPossible values: <code>DiscardOldOnes</code>, <code>PreventAdding</code>, <code>MoveLastOne</code>\nIf TRUE, the maxCount is a “per world” limit, if …\nContains <code>LoadedLevel</code> and related types/implementaions.\nMax limit for value, if applicable\nMax instances count\nMax pixel height (only applies if the entity is resizable …\nMax pixel width (only applies if the entity is resizable …\nMin limit for value, if applicable\nMin pixel height (only applies if the entity is resizable …\nMin pixel width (only applies if the entity is resizable …\nIf TRUE, the Json is partially minified (no indentation, …\nAn array listing all other levels touching this one on the …\nNext Unique integer ID available\nAn array of 4 dimensions for the up/right/down/left …\nLayer opacity as Float [0-1]\nAn Array containing the UIDs of optional rules that were …\nDefault IntGrid value when checking cells outside of level …\nThis layer can use another tileset by overriding the …\nDistance in pixels from image borders\nParallax horizontal factor (from -1 to 1, defaults to 0) …\nParallax vertical factor (from -1 to 1, defaults to 0) …\nIf true (default), a layer with a parallax factor will …\nRule pattern (size x size)\nIf TRUE, enable Perlin filtering to only apply rule on …\nPivot coordinates  (<code>[x,y]</code> format, values are from 0 to 1) …\nPivot X coordinate (from 0 to 1.0)\nX pivot of a tile stamp (0-1)\nPivot Y coordinate (from 0 to 1.0)\nY pivot of a tile stamp (0-1)\nFile naming pattern for exported PNGs\nInternal enum representing the possible field types. …\nType of the layer as Haxe Enum Possible values: <code>IntGrid</code>, …\nPixel coordinates (<code>[x,y]</code> format) in current level …\nPixel coordinates of the tile in the <strong>layer</strong> (<code>[x,y]</code> format). …\nImage height in pixels\nHeight of the level in pixels\nX offset of the layer, in pixels (IMPORTANT: this should …\nX offset in pixels to render this layer, usually 0 …\nY offset of the layer, in pixels (IMPORTANT: this should …\nY offset in pixels to render this layer, usually 0 …\nTotal layer X pixel offset, including both instance and …\nTotal layer Y pixel offset, including both instance and …\nImage width in pixels\nWidth of the level in pixels\nContains <code>RawLevelAccessor</code>: convenience methods for …\nEditor internal raw values\nOptional regular expression that needs to be matched to …\nPath to the source file, relative to the current project …\nIf TRUE, the content of this layer will be used when …\nPossible values: <code>Rectangle</code>, <code>Ellipse</code>, <code>Tile</code>, <code>Cross</code>\nAn array of tags to filter Entities that can be added to …\nIf TRUE, the entity instances will be resizable …\nIf TRUE, the entity instances will be resizable vertically\nArray of group of tiles selections, only meant to be used …\nAn array containing the <code>[scaleX,scaleY]</code> values of the …\nIf enabled, this field will be searchable through LDtk …\nRandom seed used for Auto-Layers rendering\nDisplay entity name in editor\nIf TRUE, a very simplified will be generated on saving, …\nPattern width &amp; height. Should only be 1,3,5 or 7.\nThe entity “smart” color, guessed from either Entity …\nThe “guessed” color for this level in the editor, …\nSpace in pixels between all tiles\nPixel coordinates of the tile in the <strong>tileset</strong> (<code>[x,y]</code> format)\nThe <em>Tile ID</em> in the corresponding tileset.\nAn array of strings that classifies this entity\nAn array of user-defined tags to organize the Enums\nAn array of user-defined tags to organize the Tilesets\nArray of tags defined in this Entity definition\nOptional Enum definition UID used for this tileset …\nPossible values: &lt;<code>null</code>&gt;, <code>LangPython</code>, <code>LangRuby</code>, <code>LangJS</code>, …\nOptional TilesetRect used to display this field (this can …\nOptional TilesetRect used to display this entity (it could …\n<strong>WARNING</strong>: this deprecated value is no longer exported since …\n<strong>WARNING</strong>: this deprecated value is no longer exported since …\n<strong>WARNING</strong>: this deprecated value is no longer exported since …\nDefines how tileIds array is used Possible values: <code>Single</code>, …\nIf the tiles are smaller or larger than the layer grid, …\nIf the tiles are smaller or larger than the layer grid, …\nMax random offset for X tile pos\nMin random offset for X tile pos\nMax random offset for Y tile pos\nMin random offset for Y tile pos\nAn object representing a rectangle from an existing Tileset\nOptional tileset rectangle to represents this value\nArray containing all the possible tile IDs rectangles …\nAn enum describing how the the Entity tile is rendered …\n<strong>WARNING</strong>: this deprecated value is no longer exported since …\nTile X offset\nTile Y offset\nReference to the default Tileset UID being used by this …\nThe definition UID of corresponding Tileset, if any.\nTileset ID used for optional tile display\nThe relative path to corresponding Tileset, if any.\nUID of the tileset used for a Tile\nUID of the tileset\nAll tilesets\nAll instances of entities that have their <code>exportToToc</code> flag …\nAn array containing the <code>[x,y]</code> pixel coordinates of the …\nThis optional description is used by LDtk Samples to show …\nUser defined color for the UI\nDisplay tags\nThis tile overrides the one defined in <code>tileRect</code> in the UI\nUnique Int identifier\nUnique Int identifier\nUnique Int identifier\nUnique Int identifier\nUnique Int identifier\nGroup unique ID\nUnique Intidentifier\nUnique Int identifier\nAsynchronous rendering option for large/complex layers\nIf TRUE, the level identifier will always automatically …\nIf TRUE, the color associated with this field will …\nIntGrid value\nActual value of the field instance. The value type varies, …\nThe IntGrid value itself\nAll possible enum values, with their optional Tile infos.\nLayer instance visibility\nWidth in pixels\nPossible values: <code>Manual</code>, <code>AfterLoad</code>, <code>BeforeSave</code>, <code>AfterSave</code>\nPixel width\nEntity width in pixels. For non-resizable entities, it …\nIndex that represents the “depth” of the level in the …\n<strong>WARNING</strong>: this field will move to the <code>worlds</code> array after …\nHeight of the world grid in pixels.\n<strong>WARNING</strong>: this field will move to the <code>worlds</code> array after …\nWidth of the world grid in pixels.\nIID of the World containing the refered EntityInstance\n<strong>WARNING</strong>: this field will move to the <code>worlds</code> array after …\nAn enum that describes how levels are organized in this …\nX world coordinate in pixels. Only available in GridVania …\nWorld X coordinate in pixels.  Only relevant for world …\nY world coordinate in pixels Only available in GridVania …\nWorld Y coordinate in pixels.  Only relevant for world …\nThis array will be empty, unless you enable the …\nX pixels coordinate of the top-left corner in the Tileset …\nX cell coord modulo\nX cell start offset\nY pixels coordinate of the top-left corner in the Tileset …\nY cell coord modulo\nY cell start offset\n<code>Iterator</code> for coercing a slice of options to non-options.\nError that can occur when attempting to construct …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCould not find a field instance with the given identifier.\nConvenience methods for accessing field instances.\nErrors related to the <code>LdtkFields</code> trait.\nThe field instance exists and is the correct variant, but …\nThe field instance exists, but is the wrong <code>FieldValue</code> …\nImmutable accessor for this item’s field instances, by …\nReturns the argument unchanged.\nGet this item’s Bool field value for the given …\nGet this item’s Bools field value for the given …\nGet this item’s Color field value for the given …\nGet this item’s Colors field value for the given …\nGet this item’s non-null EntityRef field value for the …\nGet this item’s non-null Enum field value for the given …\nGet this item’s field value for the given identifier.\nGet this item’s field instance (with metadata) for the …\nGet this item’s non-null FilePath field value for the …\nGet this item’s non-null Float field value for the given …\nGet this item’s non-null Int field value for the given …\nGet this item’s nullable EntityRef field value for the …\nGet this item’s nullable EntityRefs field value for the …\nGet this item’s nullable Enum field value for the given …\nGet this item’s nullable Enums field value for the given …\nGet this item’s nullable FilePath field value for the …\nGet this item’s nullable FilePaths field value for the …\nGet this item’s nullable Float field value for the given …\nGet this item’s nullable Floats field value for the …\nGet this item’s nullable Int field value for the given …\nGet this item’s nullable Ints field value for the given …\nGet this item’s nullable Point field value for the given …\nGet this item’s nullable Points field value for the …\nGet this item’s nullable String field value for the …\nGet this item’s nullable Strings field value for the …\nGet this item’s nullable Tile field value for the given …\nGet this item’s nullable Tiles field value for the given …\nGet this item’s non-null Point field value for the given …\nGet this item’s non-null String field value for the …\nGet this item’s non-null Tile field value for the given …\nCalls <code>U::from(self)</code>.\nIterate over this item’s non-null EntityRefs field value …\nIterate over this item’s non-null Enums field value for …\nIterate over this item’s non-null FilePaths field value …\nIterate over this item’s non-null Floats field value for …\nIterate over this item’s non-null Ints field value for …\nIterate over this item’s non-null Points field value for …\nIterate over this item’s non-null Strings field value …\nIterate over this item’s non-null Tiles field value for …\nError that can occur when trying to coerce a <code>Level</code> into a …\nWrapper around a borrowed <code>Level</code> that guarantees the level …\nBackground color of the level (same as <code>bgColor</code>, except the …\nBackground image X pivot (0-1)\nBackground image Y pivot (0-1)\nPosition informations of the background image, if there is …\nThe <em>optional</em> relative path to the level background image.\nThis value is not null if the project option “<em>Save </em>…\nAn array containing this level custom field values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUser defined unique identifier\nUnique instance identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn array containing all Layer instances.\nBackground color of the level. If <code>null</code>, the project …\nAn enum defining the way the background image (if any) is …\nAn array listing all other levels touching this one on the …\nHeight of the level in pixels\nWidth of the level in pixels\nThe raw level data borrowed by this instance.\nThe “guessed” color for this level in the editor, …\nUnique Int identifier\nIf TRUE, the level identifier will always automatically …\nIndex that represents the “depth” of the level in the …\nWorld X coordinate in pixels.  Only relevant for world …\nWorld Y coordinate in pixels.  Only relevant for world …\nIterator returned by <code>RawLevelAccessor::iter_raw_levels</code>.\nIterator returned by …\nIterator returned by <code>RawLevelAccessor::iter_root_levels</code>.\nIterator returned by …\nIterator returned by <code>RawLevelAccessor::iter_world_levels</code>.\nIterator returned by …\nConvenience methods for accessing raw level data by …\nImmutable access to a level at the given <code>LevelIndices</code>.\nIterate through this project’s levels.\nIterate through this project’s levels enumerated with …\nIterate through this project’s root levels.\nIterate through this project’s root levels enumerated …\nIterate through this project’s world levels.\nIterate through this project’s world levels enumerated …\nSlice to this project’s collection of root levels.\nSlice to this project’s collection of <code>World</code>s.\nRenders the tile with its corresponding color in LDtk, so …\nIndicates that a level has despawned.\n<code>Component</code> added to all <code>LdtkEntity</code>s by default.\nUpdate the clear color to use the entire editor’s …\nUpdate the clear color to use the background color of the …\nComponent that stores grid-based coordinate information.\nSpawn level with the given identifier.\nSpawn level with the given level <code>iid</code>.\nSpawn level from its indices in the LDtk file’s …\nComponent added to any <code>IntGrid</code> tile by default.\nOption in LdtkSettings that determines the visual …\nDoes not render the tile\nComponent for storing some LDtk layer information on layer …\nAdds the default systems, assets, and resources used by …\n<code>Component</code> storing the LDtk project asset handle, marking …\nSettings resource for the plugin. Check out the …\n<code>Bundle</code> for spawning LDtk worlds and their levels. The main …\nOption in LdtkSettings that dictates how the plugin …\nEvents fired by the plugin related to level …\n<code>Component</code> that stores a level’s instance identifier.\n<code>Resource</code> for choosing which level(s) to spawn.\n<code>Component</code> that determines the desired levels to be spawned …\nOption in LdtkSettings that determines level spawn …\nDon’t update the clear color at all\nThere will be no level backgrounds, not even an empty …\nSchedule for processing this plugin’s ECS API, inserted …\nThe level background’s color (and image, if it exists) …\nComponent that indicates that an LDtk level or world …\nOption in LdtkSettings that determines clear color …\nSpecifies data that should be ignored completely when …\nIndicates that a level has been triggered to spawn, but …\nThe level, with all of its layers, entities, etc., has …\nComponent for storing user-defined, enum-based tags for a …\nComponent for storing user-defined custom data for a …\nOccurs during the <code>PostUpdate</code> after the level has spawned, …\nSpawn level with the given level <code>uid</code>.\nNewly spawned levels will be spawned with translations …\nNewly spawned levels will be spawned with a translation of …\n<code>Component</code> that indicates that an ldtk entity should be a …\nGrid-based height\nGrid-based width\nGrid size\nLayer definition identifier\nUnique layer instance identifier\nReference the Layer definition UID\nList of layer <code>Identifier</code> names (not UIDs) to skip spawning …\nLayer type (possible values: IntGrid, Entities, Tiles or …\nReference to the UID of the level containing this layer …\nLayer opacity as Float [0-1]\nAn Array containing the UIDs of optional rules that were …\nThis layer can use another tileset by overriding the …\nX offset in pixels to render this layer, usually 0 …\nY offset in pixels to render this layer, usually 0 …\nTotal layer X pixel offset, including both instance and …\nTotal layer Y pixel offset, including both instance and …\nRandom seed used for Auto-Layers rendering\nThe definition UID of corresponding Tileset, if any.\nThe relative path to corresponding Tileset, if any.\nLayer instance visibility\nWhen used with the <code>LevelSelection</code> resource, levels in the …\nUpdates all LevelSet components according to the …\nTriggers the spawning/despawning of levels according to …\nPerforms the “despawning” portion of the respawn …\nReturns the <code>iid</code>s of levels that have spawned in this …\nFires LevelEvent::Transformed events for all the entities …\nDetects LdtkProject events and spawns levels as children …\nPerforms all the spawning of levels, layers, chunks, …\nImplements the functionality for <code>Worldly</code> components.\nPerforms <code>EntityInstance</code> to <code>Transform</code> conversion\nSimple conversion from a list of EntityDefinitions to a …\nSimple conversion from a list of LayerDefinitions to a map …\nPerforms GridCoords to LDtk grid coordinate conversion.\nPerforms GridCoords to translation conversion, so that the …\nPerforms GridCoords to translation conversion (relative to …\nThe <code>int_grid_csv</code> field of a LayerInstance is a …\nPerforms LDtk grid coordinate to GridCoords conversion.\nPerforms LDtk grid coordinate to translation conversion, …\nPerforms LDtk grid coordinate to translation conversion, …\nPerforms LDtk pixel coordinate to GridCoords conversion.\nPerforms LDtk pixel coordinate to translation conversion.\nPerforms LDtk pixel coordinate to translation conversion, …\nCreates a Sprite from the entity information available to …\nCreates a <code>Sprite</code> with <code>TextureAtlas</code> from the entity …\nPerforms translation to GridCoords conversion.\nPerforms translation to LDtk pixel coordinate conversion.")
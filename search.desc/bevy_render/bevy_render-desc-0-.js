searchState.loadedDescShard("bevy_render", 0, "Cleanup render resources here.\nA helper for accessing <code>MainWorld</code> content using a system …\nThis is used for applying the commands from the …\nSchedule which extract data from the main world and …\nThe simulation <code>World</code> of the application, stored as a …\nCreate any additional views such as those used for shadow …\nSort the <code>SortedRenderPhase</code>s and <code>BinKey</code>s here.\nFinal cleanup occurs: all entities will be despawned.\nPrepare render resources from extracted data for the GPU …\nPrepare assets that have been created/modified/removed …\nA sub-set within <code>Prepare</code> for constructing bind groups, or …\nA sub-set within <code>Prepare</code> for initializing buffers, …\nFlush buffers after <code>PrepareResources</code>, but before …\nQueue drawable entities as phase items in render phases …\nA sub-set within <code>Queue</code> where mesh entity queue systems are …\nThe main render schedule.\nActual rendering happens here. In most cases, only the …\nA label for the rendering sub-app.\nContains the default Bevy rendering backend based on wgpu.\nThe systems sets of the default <code>App</code> rendering schedule.\nSets up the base structure of the rendering <code>Schedule</code>.\nInitializes the renderer, sets up the <code>RenderSet</code> and …\nInfrastructure for recording render diagnostics.\nConvenience logic for turning components from the main …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe render prelude.\nThe modular rendering abstraction responsible for queuing, …\nIf <code>true</code>, disables asynchronous pipeline compilation. This …\nCombines the color of the fragments with the colors behind …\nSets how a material’s base color alpha channel is used …\nSpreads the fragment out over a hardware-dependent number …\nThe base color alpha value defines the opacity of the …\nReduce transparency to fully opaque or fully transparent …\nCombines the color of the fragments with the colors behind …\nBase color alpha values are overridden to be fully opaque …\nSimilar to <code>AlphaMode::Blend</code>, however assumes RGB channel …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nThe per-instance data to be inserted into the …\nThe per-instance data that was inserted into the …\nData used for comparison between phase items. If the …\nA trait to support getting data used for batching draw …\nA trait to support getting data used for batching draw …\nAdd this component to mesh entities to disable automatic …\nThe system parameters <code>GetBatchData::get_batch_data</code> needs in\nReturns the argument unchanged.\nGet the per-instance data to be inserted into the …\nPushes <code>gpu_preprocessing::IndirectParameters</code> necessary to …\nGet the per-instance data to be inserted into the …\nReturns the index of the <code>GetFullBatchData::BufferInputData</code> …\nReturns the index of the <code>GetFullBatchData::BufferInputData</code> …\nBatching functionality when GPU preprocessing is in use.\nCalls <code>U::from(self)</code>.\nBatching functionality when GPU preprocessing isn’t in …\nSorts a render phase that uses bins.\nThe GPU buffers holding the data needed to render batches.\nBoth GPU preprocessing and GPU culling are available.\nRecords whether GPU preprocessing and/or GPU culling are …\nThe <code>wgpu</code> indirect parameters structure.\nThe buffer containing the list of <code>IndirectParameters</code>, for …\nNo GPU preprocessing support is available at all.\nOne invocation of the preprocessing shader: i.e. one mesh …\nThe buffer of GPU preprocessing work items for a single …\nGPU preprocessing is available, but GPU culling isn’t.\nFor <code>ArrayIndirectParameters</code>, <code>first_instance</code>; for …\nCreates batches for a render phase that uses bins.\nBatch the items in a sorted render phase, when GPU …\nThe buffer of work items.\nClears out the buffers in preparation for a new frame.\nA system that runs early in extraction and clears out all …\nThe uniform data inputs for the current frame.\nA storage area for the buffer data that the GPU compute …\nA system that removes GPU preprocessing work item buffers …\nFor <code>ArrayIndirectParameters</code>, this is padding; for …\nFor <code>ArrayIndirectParameters</code>, <code>first_vertex</code>; for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nTrue if we’re using GPU culling.\nThe index of the batch input data in the input buffer that …\nThe number of instances we’re going to draw.\nReturns the binding of the buffer that contains the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new buffers.\nCreates the indirect parameters buffer.\nIn direct mode, this is the index of the <code>MeshUniform</code> in …\nThe uniform data inputs for the previous frame.\nFor <code>ArrayIndirectParameters</code>, <code>vertex_count</code>; for …\nThe index of the buffer data in the current input buffer …\nA system that writes all instance buffers to the GPU.\nThe GPU buffers holding the data needed to render batches.\nCreates batches for a render phase that uses bins, when …\nBatch the items in a sorted render phase, when GPU …\nA system that clears out the <code>BatchedInstanceBuffer</code> for the …\nReturns the argument unchanged.\nReturns the binding of the buffer that contains the …\nCalls <code>U::from(self)</code>.\nCreates a new buffer.\nWrites the instance buffer data to the GPU.\nKeeping the aspect ratio while the axes can’t be bigger …\nKeeping the aspect ratio while the axes can’t be smaller …\nThis value was calibrated to match Blender’s …\nThe defining <code>Component</code> for camera entities, storing …\nThis component lets you control the <code>TextureUsages</code> field of …\nControl how this camera outputs once rendering is …\nTrait to control the projection matrix of a camera.\nAdds <code>Camera</code> driver systems for a given projection type.\nConfigures the <code>RenderGraph</code> name assigned to be run for a …\nLabel for <code>camera_system&lt;T&gt;</code>, shared across all <code>T</code>.\nA <code>Resource</code> that stores the color that is used to clear the …\nFor a camera, specifies the color used to clear the …\nHolds internally computed <code>Camera</code> values.\nThe given clear color is used, overriding the <code>ClearColor</code> …\nThe clear color is taken from the world’s <code>ClearColor</code> …\nThis value was calibrated to match Blender’s …\nHow much energy a <code>Camera3d</code> absorbs from incoming light.\nManually specify the projection’s size, ignoring window …\nKeep the projection’s width constant; height will be …\nKeep the projection’s height constant; width will be …\nImage to which the camera’s view is rendered.\nImage to which the camera’s view is rendered.\nThe Normalized Device Coordinates could not be computed …\nA manually managed <code>TextureView</code> for use as a …\nA unique id that corresponds to a specific …\nStores manually managed <code>ManualTextureView</code>s for use as a …\nCamera component specifying a mip bias to apply when …\nThe pre-computed size of the viewport was not available.\nNo clear color is used: the camera will simply draw on top …\nNormalized version of the render target.\nProject a 3D space onto a 2D surface using parallel lines, …\nThe computed coordinate was beyond the <code>Camera</code>’s far …\nThe computed coordinate was beyond the <code>Camera</code>’s near …\nA 3D camera projection in which distant objects appear …\nParameters based on physical camera characteristics for …\nA configurable <code>CameraProjection</code> that can select its …\nThe “target” that a <code>Camera</code> will render to. For …\nInformation about the current <code>RenderTarget</code>.\nScaling mode for <code>OrthographicProjection</code>.\nSkips writing the camera output to the configured render …\nCameras sorted by their order field. This is updated in …\nSettings to define a camera sub view.\nA subpixel offset to jitter a perspective camera’s …\nTexture View to which the camera’s view is rendered. …\nTexture View to which the camera’s view is rendered. …\nRender viewport configuration for the <code>Camera</code> component.\nError returned when a conversion between world-space and …\nWindow to which the camera’s view is rendered.\nWindow to which the camera’s view is rendered.\nMatch the viewport size.\nWrites the camera output to configured render target.\nhttps://en.wikipedia.org/wiki/F-number\nThe area that the projection covers relative to …\nGet a handle to the render target’s image, or <code>None</code> if …\nThe aspect ratio (width divided by height) of the viewing …\nSystem in charge of updating a <code>Camera</code> when its window or …\nThe clear color operation to perform on the render target.\nThe projection matrix computed using this camera’s …\nCompute camera frustum for camera with given projection …\nCompute camera frustum for camera with given projection …\nComputed values for this camera, such as the projection …\nReturns the default orthographic projection for a 2D …\nReturns the default orthographic projection for a 3D …\nThe minimum and maximum depth to render (on a scale from …\nConverts the depth in Normalized Device Coordinates to …\nConverts the depth in Normalized Device Coordinates to …\nCalculate the EV100.\n…\nConverts EV100 values to exposure values. …\nThe distance from the camera in world units of the viewing …\nThe distance of the far clipping plane in world units.\nThe vertical field of view (FOV) in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nSize of the entire camera view\nRetrieves the <code>TextureFormat</code> of this render target, if it …\nIf this is set to <code>true</code>, the camera will use an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is set to <code>true</code>, this camera will be rendered to …\nThe full logical size of this camera’s <code>RenderTarget</code>, …\nThe rendered logical bounds <code>Rect</code> of the camera. If the …\nThe logical size of this camera’s viewport. If the …\nIf this is enabled, a previous camera exists that shares …\nGiven a position in Normalized Device Coordinates, use the …\nThe distance from the camera in world units of the viewing …\nThe distance of the near clipping plane in world units.\nCreates a new <code>CameraRenderGraph</code> from any string-like type.\nNormalize the render target down to a more concrete value, …\nOffset of the sub camera\nOffset is in range [-0.5, 0.5].\nCameras with a higher order are rendered later, and thus …\nThe <code>CameraOutputMode</code> for this camera.\nThe physical position to render this viewport to within …\nThe physical size of the viewport rectangle to render to …\nThe physical size of this render target (in physical …\nThe full physical size of this camera’s <code>RenderTarget</code> (in …\nThe rendered physical bounds <code>URect</code> of the camera. If the …\nThe physical size of this camera’s viewport (in physical …\nScales the projection.\nThe scale factor of this render target.\nHow the projection will scale to the viewport.\nhttps://en.wikipedia.org/wiki/Film_speed\nThe height of the image sensor format in meters.\nSets the graph name.\nhttps://en.wikipedia.org/wiki/Shutter_speed\nSize of the sub camera\nIf set, this camera will be a sub camera of a large view, …\nThe “target” that this camera will render to.\nConverts a physical size in this <code>Camera</code> to a logical size.\nIf set, this camera will render to the given <code>Viewport</code> …\nSpecifies the origin of the viewport as a normalized …\nReturns a ray originating from the camera, that passes …\nReturns a 2D world position computed from a position on …\nGiven a position in world space, use the camera’s …\nGiven a position in world space, use the camera to compute …\nGiven a position in world space, use the camera to compute …\nThe blend state that will be used by the pipeline that …\nThe clear color operation to perform on the final render …\nGuard returned by <code>RecordDiagnostics::pass_span</code>.\nAllows recording diagnostic spans.\nEnables collecting render diagnostics, such as CPU/GPU …\nGuard returned by <code>RecordDiagnostics::time_span</code>.\nEnd the span. You have to provide the same encoder which …\nEnd the span. You have to provide the same encoder which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBegin a pass span, which will record elapsed CPU and GPU …\nBegin a time span, which will record elapsed CPU and GPU …\nStores all uniforms of the component type.\nStores the index of a uniform inside of <code>ComponentUniforms</code>.\nDescribes how a component gets extracted for rendering.\nImplements <code>ExtractComponent</code> trait for a component.\nThis plugin extracts the components into the render world …\nThe output from extraction.\nECS <code>ReadOnlyQueryData</code> to fetch the components to extract.\nFilters the entities with additional constraints.\nThis plugin prepares the components of the corresponding …\nDefines how the component is transferred into the “…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes how to extract data needed for rendering from a …\nThis plugin extracts one or more components into the “…\nStores all extract instances of a type in the render world.\nECS <code>ReadOnlyQueryData</code> to fetch the components to extract.\nFilters the entities with additional constraints.\nDefines how the component is transferred into the “…\nCreates a new <code>ExtractInstancesPlugin</code> that extracts to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ExtractInstancesPlugin</code> that unconditionally …\nDescribes how a resource gets extracted for rendering.\nThis plugin extracts the resources into the “render world…\nThis system extracts the resource of the corresponding …\nDefines how the resource is transferred into the “render …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nThe buffer containing the <code>GlobalsUniform</code>\nContains global values useful when writing shaders. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis plugin prepares the components of the corresponding …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nA plugin that enables reading back gpu buffers and …\nA component that registers the wrapped handle for gpu …\nAn event that is triggered when a gpu readback is complete.\nCreate a readback component for a buffer using the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a readback component for a texture using the given …\nConvert the raw bytes of the event to a shader type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPer vertex coloring. Use in conjunction with …\nPer vertex joint transform matrix index. Use in …\nPer vertex joint transform matrix weight. Use in …\nThe direction the vertex normal is facing in. Use in …\nWhere the vertex is located in space. Use in conjunction …\nThe direction of the vertex tangent. Used for normal …\nTexture coordinates for the vertex. Use in conjunction …\nAlternate texture coordinates for the vertex. Use in …\nThis error occurs when you try to invert the winding for a …\nA builder for creating a <code>Mesh</code> with an <code>Annulus</code> shape.\nUV space is distributed by how much of the capsule …\nThe center of the base circle\nOur base mesh pipeline key bits start from the highest bit …\nThe center of the bottom circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Capsule2d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Capsule3d</code> shape.\nManner in which UV coordinates are distributed vertically.\nA builder used for creating a <code>Mesh</code> with a <code>Circle</code> shape.\nSpecifies how to generate UV-mappings for the …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSector</code> …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSegment</code> …\nAnchoring options for <code>ConeMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cone</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>ConicalFrustum</code> …\nA builder used for creating a <code>Mesh</code> with a <code>ConvexPolygon</code> …\nAnchoring options for <code>CylinderMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cylinder</code> shape.\nA builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nA trait required for implementing <code>Meshable</code> for <code>Extrusion&lt;T&gt;</code>…\nA builder used for creating a <code>Mesh</code> with an <code>Extrusion</code> shape.\nUpper third of the texture goes to the northern …\nThis segment of the perimeter will be shaded flat.\nFailed to generate tangents for the mesh.\nAn icosphere, a spherical mesh that consists of similar …\nAn error when creating an icosphere <code>Mesh</code> from a …\nAn array of indices into the <code>VertexAttributeValues</code> for a …\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nTreats the shape as a mask over a circle of equal size and …\nA 3D object made out of vertices representing triangles, …\nA component for 2D meshes. Requires a <code>MeshMaterial2d</code> to be …\nA component for 3D meshes. Requires a <code>MeshMaterial3d</code> to be …\nA trait used to build <code>Mesh</code>es from a configuration\nAdds the <code>Mesh</code> as an asset and makes sure that they are …\nAn error that occurred while trying to extract a …\nDescribes the layout of the mesh vertices in GPU memory.\nStores the single copy of each mesh vertex buffer layout.\nAn error that occurred while trying to invert the winding …\nA trait for shapes that can be turned into a <code>Mesh</code>.\nMidpoint between the tip of the cone and the center of its …\nMidpoint between the top and bottom caps of the cylinder\nInherit weights from glTF mesh parent entity to direct …\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA type representing a segment of the perimeter of an …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nVertex data is a list of points. Each vertex is a new …\nPrimitive type the input mesh is composed of.\nA builder used for creating a <code>Mesh</code> with a <code>Rectangle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>RegularPolygon</code> …\nThe render world representation of a <code>Mesh</code>.\nThe index/vertex buffer info of a <code>RenderMesh</code>.\nThis segment of the perimeter will be shaded smooth.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe Tip of the triangle\nThe icosphere has too many vertices.\nThe center of the top circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Triangle2d</code> shape.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nContains an array where each entry describes a property of …\nDescribes how the vertex buffer is interpreted.\nThis error occurs when you try to invert the winding for a …\nGet a flags value with all known bits set.\nManages mesh vertex and index buffers.\nSets a custom anchor point for the mesh\nSets a custom anchor point for the mesh\nThe anchor point for the cone mesh, defaults to the …\nThe anchor point for the cylinder mesh, defaults to the …\nSets a custom angle range in radians instead of a full …\nOptional angle range in radians, defaults to a full circle …\nThe <code>Annulus</code> shape.\nThe stride, in bytes, between elements of this buffer.\nReturns the values as float triples if possible.\nRetrieves the data currently set to the vertex attribute …\nRetrieves the data currently set to the vertex attribute …\nReturns an iterator that yields references to the data of …\nThe list of attributes which comprise a single vertex.\nReturns an iterator that yields mutable references to the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nInformation about the mesh data buffers, including whether …\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nBuilds a <code>Mesh</code> according to the configuration in <code>self</code>.\nIf set to <code>true</code>, the cylinder caps (flat circle faces) are …\nThe <code>Capsule2d</code> shape.\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCompute the Axis-Aligned Bounding Box of the mesh vertices …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh.\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of a mesh. If the …\nCalculates the <code>Mesh::ATTRIBUTE_NORMAL</code> of an indexed mesh, …\nThe <code>Cone</code> shape.\nWhether all set bits in a source flags value are also set …\nCounts all vertices of the mesh.\nComputes and returns the vertex data of the mesh as bytes. …\nThe <code>Cylinder</code> shape.\nThe intersection of a source flags value with the …\nDuplicates the vertex attributes so that no vertices are …\nThe <code>Ellipse</code> shape.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe format of the vertex attribute.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts this sector into a <code>Mesh</code> using a default …\nReturns the argument unchanged.\nConverts this sector into a <code>Mesh</code> using a default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreates a new <code>PlaneMeshBuilder</code> from the given length, with …\nGet a flags value with the bits of a flag with the given …\nCreates a new <code>PlaneMeshBuilder</code> from the given size, with …\nCreates a new densely packed <code>VertexBufferLayout</code> from an …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe <code>ConicalFrustum</code> shape.\nGenerate tangents for the mesh using the <code>mikktspace</code> …\nFlattens the <code>VertexAttributeValues</code> into a sequence of …\nComputes and returns the index data of the mesh as bytes. …\nGet this <code>Mesh</code>’s <code>MeshVertexBufferLayout</code>, used in …\nReturns the size required for the vertex buffer in bytes.\nReturns the size of a vertex in bytes.\nWhether this mesh has morph targets.\nCreates an icosphere mesh with the given number of …\nThe <em>unique</em> id of the vertex attribute. This will also …\nRetrieves the vertex <code>indices</code> of the mesh.\nRetrieves the vertex <code>indices</code> of the mesh mutably.\nBevy meshes are gltf primitives, <code>MorphWeights</code> on the bevy …\nInserts a new mesh vertex buffer layout in the store and …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSets the data for a vertex attribute (position, normal, …\nSets the vertex indices of the mesh. They describe how …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the winding of the indices such that all …\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if there are no indices.\nReturns <code>true</code> if there are no vertices in this …\nWhether all bits in this flags value are unset.\nReturns true for strip topologies.\nReturns an iterator over the indices.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nPrecomputed pipeline key bits for this mesh.\nSets the <code>SphereKind</code> that will be used for building the …\nThe type of sphere mesh that will be built.\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the hemispheres …\nA reference to the vertex buffer layout.\nReturns the number of indices.\nReturns the number of vertices in this …\nSets the number of vertical lines subdividing the …\nThe number of vertical lines subdividing the hemispheres …\nSets the number of segments used for the main ring of the …\nThe number of segments used for the main ring of the torus.\nMerges the <code>Mesh</code> data of <code>other</code> with <code>self</code>. The attributes …\nCreates a <code>Mesh</code> for a shape.\nSets the number of vertices used for each circular segment …\nThe number of vertices used for each circular segment in …\nGets a list of all morph target names, if they exist.\nMorph targets for the mesh, if present.\nThe friendly name of the vertex attribute\nCreate an <code>AnnulusMeshBuilder</code> with the given inner radius, …\nCreate a new <code>ExtrusionBuilder&lt;P&gt;</code> from a given <code>base_shape</code> …\nConstruct a new mesh. You need to provide a …\nCreates a new <code>CircleMeshBuilder</code> from a given radius and …\nCreates a new <code>CircularSectorMeshBuilder</code> from a given sector\nCreates a new <code>CircularSegmentMeshBuilder</code> from a given …\nCreates a new <code>EllipseMeshBuilder</code> from a given half width …\nCreates a new <code>Capsule2dMeshBuilder</code> from a given radius, …\nCreates a new <code>Capsule3dMeshBuilder</code> from a given radius, …\nCreates a new <code>ConeMeshBuilder</code> from a given radius, height, …\nCreates a new <code>ConicalFrustumMeshBuilder</code> from the given top …\nCreates a new <code>CylinderMeshBuilder</code> from the given radius, a …\nCreates a new <code>PlaneMeshBuilder</code> from a given normal and …\nCreates a new <code>SphereMeshBuilder</code> from a radius and …\nCreates a new <code>TorusMeshBuilder</code> from an inner and outer …\nSets the normal of the plane, aka the direction the plane …\nNormalize joint weights so they sum to 1.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns a <code>VertexBufferLayout</code> with the shader location of …\nA list of the indices each representing a part of the …\nThe <code>Plane3d</code> shape.\nConverts the extracted mesh into a <code>RenderMesh</code>.\nReturns the topology of the mesh.\nReturns the primitive topology of this mesh (triangles, …\nMesh generation for primitive shapes.\nAdd an index. If the index is greater than <code>u16::MAX</code>, the …\nThe intersection of a source flags value with the …\nRemoves the data for a vertex attribute\nRemoves the vertex <code>indices</code> from the mesh and returns them.\nSets the number of vertices used in constructing the …\nSets the number of vertices used for the circle mesh at …\nSets the number of vertices used for the ellipse mesh at …\nSets the number of vertices used in constructing the …\nSets the number of vertices used for each hemicircle at …\nSets the number of vertices used for the circle mesh.\nSets the number of vertices used for the sector mesh.\nSets the number of vertices used for the segment mesh.\nSets the number of vertices used for the ellipse mesh.\nSets the number of vertices used for one hemicircle. The …\nSets the number of vertices used for the base of the cone.\nSets the number of vertices used for the top and bottom of …\nSets the number of vertices used for the top and bottom of …\nThe number of vertices used in constructing each …\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for one hemicircle. The total …\nThe number of vertices used for the base of the cone.\nThe number of vertices used for the top and bottom of the …\nThe number of vertices used for the top and bottom of the …\nSets the number of horizontal lines subdividing the …\nThe number of horizontal lines subdividing the cylindrical …\nRotates the vertex positions, normals, and tangents of the …\nRotates the vertex positions, normals, and tangents of the …\nScales the vertex positions, normals, and tangents of the …\nScales the vertex positions, normals, and tangents of the …\nThe sector shape.\nThe segment shape.\nSets the number of segments along the depth of the …\nSets the number of horizontal lines subdividing the …\nSets the number of segments along the height of the …\nThe number of horizontal lines subdividing the lateral …\nThe number of segments along the height of the cylinder. …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the names of each morph target. This should …\nSet morph targets image for this mesh. This requires a “…\nSets the size of the plane mesh.\nThe <code>Sphere</code> shape.\nHow often this vertex buffer is “stepped” forward.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSets the subdivisions of the plane mesh.\nThe number of subdivisions in the mesh.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe <code>Torus</code> shape.\nTransforms the vertex positions, normals, and tangents of …\nTransforms the vertex positions, normals, and tangents of …\nTranslates the vertex positions of the mesh in place by …\nTranslates the vertex positions of the mesh by the given …\nGet a list of this Mesh’s triangles as an iterator if …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCreates a UV sphere <code>Mesh</code> with the given number of …\nSets the uv mode used for the sector mesh\nSets the uv mode used for the segment mesh\nThe UV mapping mode\nThe UV mapping mode\nSets the manner in which UV coordinates are distributed …\nThe manner in which UV coordinates are distributed …\nThe number of vertices in the mesh.\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with calculated …\nConsumes the mesh and returns a mesh with no shared …\nConsumes the mesh and returns a mesh with tangents …\nConsumes the mesh and returns a mesh with data set for a …\nConsumes the mesh and returns a mesh with the given vertex …\nConsumes the mesh and returns a mesh with inverted winding …\nConsumes the mesh and returns a mesh with morph target …\nConsumes the mesh and returns a mesh with the given morph …\nConsumes the mesh and returns a mesh without the data for …\nConsumes the mesh and returns a mesh without the vertex …\nIgnore the cylinder caps, making the mesh a shallow tube …\nComputes and write the vertex data of the mesh into a …\nAngle by which to rotate the shape when generating the UV …\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe normal of the first vertex.\nA list of indices representing this segment of the …\nA list of indices representing this segment of the …\nThe normal of the last vertex.\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nManages the assignment of mesh data to GPU buffers.\nA plugin that manages GPU memory for mesh data.\nTunable parameters that customize the behavior of the …\nThe hardware buffer that mesh data lives in, as well as …\nA system that processes newly-extracted or newly-removed …\nThe buffer that the mesh data resides in.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nThe factor by which we scale a slab when growing it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum size of vertex or index data that can be …\nThe maximum size of a slab (hardware buffer), in bytes.\nReturns the buffer and range within that buffer of the …\nReturns the buffer and range within that buffer of the …\nThe minimum size of a slab (hardware buffer), in bytes.\nThe range of elements within this buffer that the mesh …\nHow many components <code>MorphAttributes</code> has.\nMax target count available for morph targets.\nControl a specific <code>Mesh</code> instance’s morph targets. These …\nAttributes <strong>differences</strong> used for morph targets.\nAn image formatted for use with <code>MorphWeights</code> for rendering …\nControls the morph targets for all child <code>Mesh3d</code> entities. …\nThe first child <code>Mesh3d</code> primitive controlled by these …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate textures for each morph target.\nThe vertex normal difference between base mesh and this …\nThe vertex position difference between base mesh and this …\nThe vertex tangent difference between base mesh and this …\nA builder for creating a <code>Mesh</code> with an <code>Annulus</code> shape.\nUV space is distributed by how much of the capsule …\nThe center of the base circle\nThe center of the bottom circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Capsule2d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Capsule3d</code> shape.\nManner in which UV coordinates are distributed vertically.\nA builder used for creating a <code>Mesh</code> with a <code>Circle</code> shape.\nSpecifies how to generate UV-mappings for the …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSector</code> …\nA builder used for creating a <code>Mesh</code> with a <code>CircularSegment</code> …\nAnchoring options for <code>ConeMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cone</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>ConicalFrustum</code> …\nA builder used for creating a <code>Mesh</code> with a <code>ConvexPolygon</code> …\nAnchoring options for <code>CylinderMeshBuilder</code>\nA builder used for creating a <code>Mesh</code> with a <code>Cylinder</code> shape.\nA builder used for creating a <code>Mesh</code> with an <code>Ellipse</code> shape.\nA trait required for implementing <code>Meshable</code> for <code>Extrusion&lt;T&gt;</code>…\nA builder used for creating a <code>Mesh</code> with an <code>Extrusion</code> shape.\nUpper third of the texture goes to the northern …\nThis segment of the perimeter will be shaded flat.\nAn icosphere, a spherical mesh that consists of similar …\nAn error when creating an icosphere <code>Mesh</code> from a …\nTreats the shape as a mask over a circle of equal size and …\nA trait used to build <code>Mesh</code>es from a configuration\nA trait for shapes that can be turned into a <code>Mesh</code>.\nMidpoint between the tip of the cone and the center of its …\nMidpoint between the top and bottom caps of the cylinder\nThe output of <code>Self::mesh</code>. This will be a <code>MeshBuilder</code> used …\nA type representing a segment of the perimeter of an …\nA builder used for creating a <code>Mesh</code> with a <code>Plane3d</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Rectangle</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>RegularPolygon</code> …\nThis segment of the perimeter will be shaded smooth.\nA type of sphere mesh.\nA builder used for creating a <code>Mesh</code> with an <code>Sphere</code> shape.\nThe Tip of the triangle\nThe icosphere has too many vertices.\nThe center of the top circle cap\nA builder used for creating a <code>Mesh</code> with a <code>Torus</code> shape.\nA builder used for creating a <code>Mesh</code> with a <code>Triangle2d</code> shape.\nHemispheres get UV space according to the ratio of …\nA UV sphere, a spherical mesh that consists of …\nThe anchor point for the cone mesh, defaults to the …\nThe anchor point for the cylinder mesh, defaults to the …\nOptional angle range in radians, defaults to a full circle …\nThe <code>Annulus</code> shape.\nBuilds a <code>Mesh</code> based on the configuration in <code>self</code>.\nIf set to <code>true</code>, the cylinder caps (flat circle faces) are …\nThe <code>Capsule2d</code> shape.\nThe <code>Capsule3d</code> shape.\nThe <code>Circle</code> shape.\nThe <code>Cone</code> shape.\nThe <code>Cylinder</code> shape.\nThe <code>Ellipse</code> shape.\nThe <code>ConicalFrustum</code> shape.\nThe type of sphere mesh that will be built.\nThe number of horizontal lines subdividing the hemispheres …\nThe number of vertical lines subdividing the hemispheres …\nThe number of segments used for the main ring of the torus.\nCreates a <code>Mesh</code> for a shape.\nThe number of vertices used for each circular segment in …\nA list of the indices each representing a part of the …\nThe <code>Plane3d</code> shape.\nThe number of vertices used in constructing each …\nThe number of vertices used for the circle mesh. The …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the arc portion of the …\nThe number of vertices used for the ellipse mesh. The …\nThe number of vertices used for one hemicircle. The total …\nThe number of vertices used for the base of the cone.\nThe number of vertices used for the top and bottom of the …\nThe number of vertices used for the top and bottom of the …\nThe number of horizontal lines subdividing the cylindrical …\nThe sector shape.\nThe segment shape.\nThe number of horizontal lines subdividing the lateral …\nThe number of segments along the height of the cylinder. …\nThe <code>Sphere</code> shape.\nThe number of subdivisions in the mesh.\nThe <code>Torus</code> shape.\nThe UV mapping mode\nThe UV mapping mode\nThe manner in which UV coordinates are distributed …\nAngle by which to rotate the shape when generating the UV …\nThe number of vertices generated. 65535 is the largest …\nThe number of subdivisions used. 79 is the largest allowed …\nThe normal of the first vertex.\nA list of indices representing this segment of the …\nA list of indices representing this segment of the …\nThe normal of the last vertex.\nThe number of longitudinal sectors, aka the horizontal …\nThe number of latitudinal stacks, aka the vertical …\nThe number of subdivisions applied. The number of faces …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>PipelinedRenderingPlugin</code> can be added to your …\nChannels used by the main app to send and receive the …\nA Label for the sub app that runs the parts of pipelined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>RenderAppChannels</code> from a <code>async_channel::Receiver</code> …\nReceive the <code>render_app</code> from the rendering thread. Return …\nSend the <code>render_app</code> to the rendering thread.\nAn axis-aligned bounding box, defined by:\nA region of 3D space defined by the intersection of 6 …\nA region of 3D space, specifically an open set whose …\nReturns the signed distance from the bisecting plane to …\nReturns a bounding box enclosing the specified set of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a frustum derived from <code>clip_from_world</code>.\nReturns a frustum derived from <code>clip_from_world</code>, but with a …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nChecks if an Oriented Bounding Box (obb) intersects the …\nChecks if a sphere intersects the frustum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a <code>HalfSpace</code> from a 4D vector whose first 3 …\nReturns the unit normal vector of the bisecting plane that …\nReturns the bisecting plane’s unit normal vector and the …\nCalculate the relative radius of the AABB with respect to …\nTemporarily stores the extracted and removed assets of the …\nSpecifies all ECS data required by …\nAll assets that should be prepared next frame.\nDescribes how an asset gets extracted and prepared for …\nA resource that attempts to limit the amount of data …\nThis plugin extracts the changed assets from the “app …\nDefines where the asset will be used.\nStores all GPU representations (<code>RenderAsset</code>) of …\nThe representation of the asset in the “main world”.\nIDs of the assets added this frame.\nGet a flags value with all known bits set.\nWhether or not to unload the asset after extracting it to …\ncheck how many bytes are available since the last reset\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSize of the data the asset will upload to the gpu. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns the default render asset usage flags: …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe assets extracted this frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n<code>max_bytes</code>: the number of bytes to write per frame. this is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPrepares the <code>RenderAsset::SourceAsset</code> for the GPU by …\nThis system prepares all assets of the corresponding …\nThe intersection of a source flags value with the …\nIDs of the assets removed this frame.\nReset the available bytes. Called once per frame by the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA GPU-accessible <code>Buffer</code>.\nA GPU-accessible <code>Buffer</code>.\nAn object safe version of <code>Eq</code>. This trait is automatically …\nAn edge, which connects two <code>Nodes</code> in a <code>RenderGraph</code>.\nA collection of input and output <code>Edges</code> for a <code>Node</code>.\nA <code>Node</code> without any inputs, outputs and subgraphs, which …\nAn entity from the ECS.\nAn entity from the ECS.\nThe label for the input node of a graph. Used to connect …\nA <code>Node</code> which acts as an entry point for a <code>RenderGraph</code> with …\nA shorthand for <code>Interned&lt;dyn RenderLabel&gt;</code>.\nA shorthand for <code>Interned&lt;dyn RenderSubGraph&gt;</code>.\nA render node that can be added to a <code>RenderGraph</code>.\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a <code>Node</code>, with all data …\nThe render graph configures the modular and re-usable …\nAdds common <code>RenderGraph</code> operations to <code>SubApp</code> (and <code>App</code>).\nThe context with all graph information required to run a …\nA strongly-typed class of labels used to identify a <code>Node</code> …\nDerive macro generating an impl of the trait <code>RenderLabel</code>.\nA strongly-typed class of labels used to identify a […\nDerive macro generating an impl of the trait <code>RenderSubGraph</code>…\nA <code>RenderGraph</code> <code>Node</code> that runs the configured subgraph once. …\nA command that signals the graph runner to run the sub …\nA texture <code>Sampler</code> defines how a pipeline will sample from …\nA texture <code>Sampler</code> defines how a pipeline will sample from …\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a slot, which specifies its …\nA collection of input or output <code>SlotInfos</code> for a <code>NodeState</code>.\nA <code>SlotLabel</code> is used to reference a slot by either its name …\nDescribes the render resources created (output) or used …\nA value passed between render <code>Nodes</code>. Corresponds to the …\nA <code>TextureView</code> describes a texture used in a pipeline.\nA <code>TextureView</code> describes a texture used in a pipeline.\nThis trait should be used instead of the <code>Node</code> trait when …\nThis <code>Node</code> can be used to run any <code>ViewNode</code>. It will take …\nThe query that will be used on the view entity. It is …\nAdds the <code>node</code> with the <code>label</code> to the graph. If the label is …\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdd <code>node_edge</code>s based on the order of the given <code>edges</code> array.\nAdd node edge to the specified graph\nAutomatically add the required node edges based on the …\nAdd a <code>Node</code> to the <code>RenderGraph</code>:\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …\nAdds the <code>sub_graph</code> with the <code>label</code> to the graph. If the …\nCasts the type to <code>dyn Any</code>.\nCasts this value to a form where it can be compared with …\nCasts this value to a form where it can be compared with …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nClones this <code>RenderSubGraph</code>.\nClones this <code>RenderLabel</code>.\nThis method tests for <code>self</code> and <code>other</code> values to be equal.\nFeeds this value into the given [<code>Hasher</code>].\nFeeds this value into the given [<code>Hasher</code>].\nFinishes the context for this <code>Node</code> by returning the sub …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nRetrieves the input slot value referenced by the <code>label</code>.\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the input slot value referenced by the <code>label</code> as …\nReturns the id of the <code>input_node</code>.\nReturns the <code>NodeState</code> of the input node of this graph.\nRetrieves the input slot value referenced by the <code>label</code> as …\nSearches the <code>input_edges</code> for a <code>Edge::SlotEdge</code>, which …\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the <code>Node</code> referenced by the <code>label</code>.\nRetrieves the <code>Node</code> referenced by the <code>label</code> mutably.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code>.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code> mutably.\nReturns the id of the <code>output_node</code>.\nSearches the <code>output_edges</code> for a <code>Edge::SlotEdge</code>, which …\nRetrieves the <code>SlotInfo</code> for the provided label.\nRetrieves the index (inside input or output slots) of the …\nRetrieves the <code>SlotInfo</code> for the provided label mutably.\nRetrieves the sub graph corresponding to the <code>label</code>.\nRetrieves the sub graph corresponding to the <code>label</code> mutably.\nChecks whether the <code>edge</code> already exists in the graph.\nChecks whether the input edge already exists.\nChecks whether the output edge already exists.\nSpecifies the required input slots for this node. They …\nSpecifies the required input slots for this node. They …\nReturns all “input edges” (edges going “in”) for …\nReturns the <code>SlotInfos</code> of the inputs.\nReturns the <code>NodeState</code> of the input node of this graph.\nReturns the input slot values for the node.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nReturns an <code>Interned</code> value corresponding to <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns true if there are no slots.\nReturns an iterator over the slot infos.\nReturns an iterator over a tuple of the input edges and …\nReturns an iterator over a tuple of the output edges and …\nReturns an iterator over the <code>NodeStates</code>.\nReturns an iterator over the <code>NodeStates</code>, that allows …\nReturns an iterator over the sub graphs.\nReturns an iterator over the sub graphs, that allows …\nReturns this node’s label.\nReturns the count of slots.\nCreates a new render graph context for the <code>node</code>.\nCreates an <code>NodeState</code> without edges, but the <code>input_slots</code> …\nRetrieves the <code>Node</code>.\nRetrieves the <code>Node</code> mutably.\nSpecifies the produced output slots for this node. They …\nSpecifies the produced output slots for this node. They …\nReturns all “output edges” (edges going “out”) for …\nReturns the <code>SlotInfos</code> of the outputs.\nRemoves the <code>node</code> with the <code>label</code> from the graph. If the …\nRemoves the <code>Edge::NodeEdge</code> from the graph. If either node …\nRemoves the <code>Edge::SlotEdge</code> from the graph. If any nodes or …\nRemoves the <code>sub_graph</code> with the <code>label</code> from the graph. If …\nRuns the graph node logic, issues draw calls, updates the …\nRuns the graph node logic, issues draw calls, updates the …\nQueues up a sub graph for execution after the node has …\nCreates an <code>GraphInputNode</code> with the specified slots if not …\nSets the output slot value referenced by the <code>label</code>.\nReturns the <code>SlotType</code> of this value.\nRetrieves the sub graph corresponding to the <code>label</code>.\nRetrieves the sub graph corresponding to the <code>label</code> mutably.\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …\nThe name of the type that implements <code>Node</code>.\nUpdates internal node state using the current render <code>World</code> …\nUpdates internal node state using the current render <code>World</code> …\nUpdates internal node state using the current render <code>World</code> …\nUpdates internal node state using the current render <code>World</code> …\nUpdates all nodes and sub graphs of the render graph. …\nVerifies that the edge existence is as expected and checks …\nValidates that each input slot corresponds to an input …\nValidates that each output slot corresponds to an output …\nWhether or not this <code>PhaseItem</code> should be subjected to …\nRegisters a <code>RenderCommand</code> as a <code>Draw</code> function. They are …\nThe item is a mesh that’s eligible for indirect …\nThe key used for binning <code>PhaseItem</code>s into bins. Order the …\nRepresents phase items that are placed into bins. The …\nA collection of all rendering instructions, that will be …\nInformation about a single batch of entities rendered …\nA convenient abstraction for adding all the systems …\nIdentifies the list within <code>BinnedRenderPhase</code> that a phase …\nA <code>PhaseItem</code> item, that automatically sets the appropriate …\nA draw function used to draw <code>PhaseItem</code>s.\nAn identifier for a <code>Draw</code> function stored in <code>DrawFunctions</code>.\nStores all draw functions for the <code>PhaseItem</code> type hidden …\nStores all <code>Draw</code> functions for the <code>PhaseItem</code> type.\nTo extract the flag from a packed <code>PhaseItemExtraIndex</code>, …\nThe flag that indicates that this index is an indirect …\nSpecifies the ECS data of the item entity required by …\nThe special value that indicates that no extra index is …\nThe item isn’t a mesh at all.\nTo extract the index from a packed <code>PhaseItemExtraIndex</code>, …\nSpecifies the general ECS data (e.g. resources) required …\nAn item (entity of the render world) which will be drawn …\nThe “extra index” associated with some <code>PhaseItem</code>s, …\n<code>RenderCommand</code>s are modular standardized pieces of render …\nThe result of a <code>RenderCommand</code>.\nWraps a <code>RenderCommand</code> into a state so that it can be used …\nA <code>RenderCommand</code> that sets the pipeline for the …\nThe type used for ordering the items. The smallest values …\nRepresents phase items that must be sorted. The <code>SortKey</code> …\nA collection of all items to be rendered that will be …\nA convenient abstraction for adding all the systems …\nA <code>RenderPass</code>, which tracks the current pipeline state to …\nInformation about the unbatchable entities in a bin.\nThe item is a mesh that’s eligible for indirect …\nStores the rendering instructions for a single phase that …\nSpecifies the ECS data of the view entity required by …\nA distance calculator for the draw order of <code>PhaseItem</code>s.\nStores the rendering instructions for a single phase that …\nAdds the <code>Draw</code> function and maps it to its own type.\nBins a new entity.\nAdds a <code>PhaseItem</code> to this render phase.\nAdds the <code>RenderCommand</code> for the specified render phase to …\nAdds the <code>Draw</code> function and maps it to the type <code>T</code>\nIf this extra index describes a dynamic offset, returns …\nIf this extra index describes an indirect parameters …\nThe range of instances that the batch covers. After doing …\nReturns a pair of mutable references to both the batch …\nA list of <code>BinKey</code>s for batchable items.\nThe batchable bins themselves.\nThe id of the render pipeline, cached in the <code>PipelineCache</code>…\nRemoves all <code>PhaseItem</code>s from this render phase.\nCalculates the distance, or view-space <code>Z</code> value, for the …\nCalculates the distance, or view-space <code>Z</code> value, for the …\nDraws a <code>PhaseItem</code> by issuing zero or more <code>draw</code> calls via …\nFetches the ECS parameters for the wrapped <code>RenderCommand</code> …\nDraws primitives from the active vertex buffer(s).\nSpecifies the <code>Draw</code> function used to render the item.\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nPacks a dynamic offset into this extra index.\nThe entities.\nThe corresponding entity that will be drawn.\nReturns the <code>PhaseItemExtraIndex</code>.\nThe dynamic offset of the batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates a 3D rangefinder for a view matrix.\nRetrieves the id of the <code>Draw</code> function corresponding to …\nRetrieves the <code>Draw</code> function corresponding to the <code>id</code> …\nRetrieves the id of the <code>Draw</code> function corresponding to …\nPacks a indirect parameters index into this extra index.\nInsert a single debug marker.\nThe range of instance indices in this batch.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe items within this <code>SortedRenderPhase</code>.\nAn <code>Iterator</code> through the associated <code>Entity</code> for each …\nThe main world entity represented by this <code>PhaseItem</code>.\nReturns either a dynamic offset or …\nReturns either an indirect parameters index or …\nCreates the appropriate <code>BinnedRenderPhaseType</code> for a mesh, …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls from the active vertex …\nCreates a new binned phase item from the key and …\nCreates a new <code>RenderCommandState</code> for the <code>RenderCommand</code>.\nTracks the supplied render pass.\nItems in the bin that aren’t meshes at all.\nEnd the current debug group.\nPrepares the draw function to be used. This is called once …\nPrepares the draw function to be used. This is called once …\nPrepares all draw function. This is called once and only …\nPrepares the render command to be used. This is called …\nStart a new debug group.\nAccesses the draw functions in read mode.\nRenders a <code>PhaseItem</code> by recording commands (e.g. setting …\nEncodes the GPU commands needed to render all entities in …\nRenders all of its <code>PhaseItem</code>s using their corresponding …\nRenders all <code>PhaseItem</code>s in the provided <code>range</code> (based on …\nAn entity that’s <em>representative</em> of this batch.\nSets the active bind group for a given bind group index. …\nSets the blend color as used by some of the blending modes.\nSet the rendering viewport to the given camera <code>Viewport</code>.\nSets the active index buffer.\nSet push constant data.\nSets the active <code>RenderPipeline</code>.\nSets the scissor region.\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nSet the rendering viewport.\nSorts all of its <code>PhaseItem</code>s.\nSorts a slice of phase items into render order. Generally …\nDetermines the order in which the items are drawn.\nThis system sorts the <code>PhaseItem</code>s of all <code>SortedRenderPhase</code>s …\nA list of <code>BinKey</code>s for unbatchable items.\nThe unbatchable bins.\nReturns the wgpu <code>RenderPass</code>.\nAccesses the draw functions in write mode.\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nEnable writes to all channels.\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nSupports samplers with anisotropic filtering. Note this isn…\nA ray-tracing acceleration structure binding.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nFunction always passes\nConverts a value to a <code>BindGroup</code> with a given …\nAn error that occurs during <code>AsBindGroup::as_bind_group</code> …\nConverts a value to a <code>ShaderType</code> for use in a bind group.\nblock compressed texture. 16 bytes per block.\nASTC block dimensions\nASTC RGBA channel\n10x10 block compressed texture. 16 bytes per block (1.28 …\n10x5 block compressed texture. 16 bytes per block (2.56 …\n10x6 block compressed texture. 16 bytes per block (2.13 …\n10x8 block compressed texture. 16 bytes per block (1.6 …\n12x10 block compressed texture. 16 bytes per block (1.07 …\n12x12 block compressed texture. 16 bytes per block (0.89 …\n4x4 block compressed texture. 16 bytes per block (8 …\n5x4 block compressed texture. 16 bytes per block (6.4 …\n5x5 block compressed texture. 16 bytes per block (5.12 …\n6x5 block compressed texture. 16 bytes per block (4.27 …\n6x6 block compressed texture. 16 bytes per block (3.56 …\n8x5 block compressed texture. 16 bytes per block (3.2 …\n8x6 block compressed texture. 16 bytes per block (2.67 …\n8x8 block compressed texture. 16 bytes per block (2 …\nSupports non-zero <code>base_vertex</code> parameter to direct indexed …\nAllows the [<code>wgpu::TextureUsages::STORAGE_BINDING</code>] usage on …\nEnable blue channel writes\nSupports buffer bindings with sizes that aren’t a …\nAllows the user to create arrays of buffers in shaders:\nBack face\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBind groups are responsible for binding render resources …\nDescribes a group of bindings and the resources to be …\nHelper for constructing bindgroups.\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nDescribes a <code>BindGroupLayout</code>.\nDescribes a single binding inside a bind group.\nHelper for constructing bind group layouts.\nResource that can be bound to a pipeline.\nSpecific type of a binding.\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nBinding is backed by a buffer.\nA buffer binding.\nIntegral type used for buffer offsets.\nBinding is backed by an array of buffers.\nError occurred when trying to async map a buffer.\nDescribes the segment of a buffer to bind.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nDescribes a Buffer when allocating.\nIntegral type used for buffer slice sizes.\nDifferent ways that you can use a buffer.\nLike <code>RawBufferVec</code>, but doesn’t require that the data …\nEnables clear to zero for textures.\nEnable red, green, and blue channel writes\nSupports comparison samplers.\nBinding is visible from the compute shader of a compute …\nThe device supports compiling and using compute shaders.\nAllows the user to set a …\nBuffer to buffer copy as well as buffer clear offsets and …\nAllow a buffer to be the destination buffer for a […\nAllows a texture to be the destination in a  […\nAllow a buffer to be the source buffer for a […\nAllows a texture to be the source in a […\nSupports textures that are cube arrays.\nIndex of a cached compute pipeline in a <code>PipelineCache</code>.\nState of a cached pipeline inserted into a <code>PipelineCache</code>.\nIndex of a cached render pipeline in a <code>PipelineCache</code>.\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nEncodes a series of GPU operations.\nDescribes a <code>CommandEncoder</code>.\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nIn-progress recording of a compute pass.\nDescribes the attachments of a compute pass.\nA <code>ComputePipeline</code> represents a compute pipeline and its …\nDescribes a compute pipeline.\nConstant\nThe pipeline GPU object is being created.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nAllows for explicit creation of textures of format …\nSupports depth bias clamping\nBy default, polygon depth is clipped to 0-1 range …\nSupports copies between depth textures and buffers.\nAllows two outputs from a shader to be used for blending. …\nData that will be stored alongside the “prepared” bind …\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nUse the “default” shader for the current context.\nA rendering resource for the default image sampler which …\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nDiscards the resulting value of the render pass for this …\nArgument buffer layout for dispatch_indirect commands.\nBinary flags listing features that may or may not be …\nArgument buffer layout for draw_indexed_indirect commands.\nArgument buffer layout for draw_indirect commands.\nD.component\nD.alpha\nStores data to be transferred to the GPU and made …\nStores data to be transferred to the GPU and made …\nA writer that can be used to directly write elements into …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nFunction passes if new value is equal to existing value. …\nAn error occurred while trying to create the pipeline GPU …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nExtent of a texture related operation.\nAllows textures with formats “r32float”, “rg32float…\nBinding is visible from the fragment shader of a render …\nSupports storage buffers in fragment shaders.\nSupports binding storage buffers and textures to fragment …\nSupports full 32-bit range indices (2^32-1 as opposed to …\nFace of a vertex.\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nDescribes the fragment process in a render pipeline.\nFront face\nVertex winding order which classifies the “front” face …\nEnable green channel writes\nStores an array of elements to be transferred to the GPU …\nAn index into a <code>GpuArrayBuffer</code> for a given element.\nTrait for types able to go in a <code>GpuArrayBuffer</code>.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\nA handle to a shader stored in the <code>Assets&lt;Shader&gt;</code> resource\nfloating-point RGBA, linear-color float can be outside of …\nIgnore the stencil state for the face.\nSupports different blend operations per color attachment.\nAllow a buffer to be the index buffer in a draw operation.\nAllow a buffer to be the indirect buffer in an indirect …\nSupports indirect drawing and dispatching.\nAllows non-zero value for the <code>first_instance</code> member in …\nAn invalid cached render pipeline index, often used to …\nAn invalid cached compute pipeline index, often used to …\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nLayout of a texture in a buffer’s memory.\nSubresource range within an image\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nVertex data is advanced every instance.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nThe texture is laid out densely in memory as:\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nAllow a buffer to be mapped for reading using […\nAllow a buffer to be mapped for writing using […\nSupports sample-rate shading.\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call <code>RenderPass::multi_draw_indirect</code> …\nAllows the user to call …\nPassed to <code>Device::poll</code> to control how and if it should …\nType of buffer mapping.\nmax(Src, Dst)\nmin(Src, Dst)\nThe texture is laid out densely in memory as:\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>…\nBinding is not visible from any shader stage.\nSupports textures with mipmaps which have a non power of …\nYUV 4:2:0 chroma subsampled format.\nNaga module.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nFunction passes if new value is not equal to existing …\nBlend state of (1 * src) + ((1 - src_alpha) * dst)\nThe pipeline GPU object was created successfully and is …\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nPair of load and store operations for an attachment aspect.\nOrigin of a copy to/from a texture.\nAn owned binding resource of any type (ex: a <code>Buffer</code>, …\nAllows the user to create bind groups containing arrays …\nAllows the use of pipeline cache objects\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nBlend mode that does standard alpha blending with …\nAllows the use of push constants: small, fast bits of …\nAn asset path leading to a shader\nA pipeline defining the data layout and shader logic for a …\nCache for render and compute pipelines.\nType of error returned by a <code>PipelineCache</code> when the …\nAdvanced options for use when a pipeline is compiled\nA descriptor for a <code>Pipeline</code>.\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nType of drawing mode for polygons\nA prepared bind group returned as a result of …\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nThe pipeline GPU object is queued for creation.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [-127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nAllows for the creation of ray-tracing queries within …\nAllows for the creation of ray-tracing acceleration …\nSupports reading from a depth/stencil texture while using …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nAllows for usage of textures of format …\nA structure for storing raw bytes that have already been …\nDescribes a compute pipeline.\nDescribes the fragment processing in a render pipeline.\nDescribes a render (graphics) pipeline.\nDescribes how the vertex buffer is interpreted.\nDescribes the vertex processing in a render pipeline.\nMap only for reading\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nA <code>RenderPipeline</code> represents a graphics pipeline and its …\nDescribes a render (graphics) pipeline.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nThe bind group could not be generated. Try again next …\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [-127, …\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nAllows shaders to index sampled texture and storage buffer …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to acquire the FP16 ability\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i64 and u64.\nAllows shaders to use all i64 and u64 atomic operations.\nAllows shaders to use i64 and u64 atomic min and max.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nEnables creating shader modules from SPIR-V binary data …\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nAllows the user to create uniform arrays of storage …\nAllows compute and fragment shaders to use the subgroup …\nAllows shaders to use the subgroup barrier\nAllows vertex shaders to use the subgroup operation …\nSupports specifying which view formats are allowed when …\nA Sampler defines how a pipeline will sample from a …\nBinding is a sampler.\nA sampler that can be used to sample a texture.\nBinding is backed by an array of samplers.\nSpecific type of a sampler binding.\nDescribes a <code>Sampler</code>.\nA shader, as defined by its <code>ShaderSource</code> and <code>ShaderStage</code> …\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nA reference to a shader asset.\nTrait implemented for all WGSL fixed-footprint types\nSource of a shader module.\nStage of the programmable pipeline.\nDescribes the shader stages that a binding will be visible …\nBase trait for all WGSL host-shareable types\nSampling returns signed integers.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed shorts (i16). [-32767, 32767] converted to …\nFour signed shorts (i16). [-32767, 32767] converted to …\nTwo signed bytes (i8). [-127, 127] converted to float [-1, …\nFour signed bytes (i8). [-127, 127] converted to float […\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nStores data to be transferred to the GPU and made …\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nSrc - Dst\nEnables device specific texture format features.\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables BCn family of compressed textures. All BCn …\nAllows the 3d dimension for textures with BC compressed …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nA GPU-accessible texture.\nA texture binding.\nKind of data the texture holds.\nOrder in which TextureData is laid out in memory.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nUnderlying texture data format.\nSpecific type of a sample in a texture binding.\nDifferent ways that you can use a texture.\nDescribes a <code>Texture</code> with its associated metadata required …\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nAllows shaders to index uniform buffer and storage texture …\nWith this feature not present, there are the following …\nSupports buffers to combine <code>BufferUsages::INDEX</code> with …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nA buffer for uniform values.\nStores data to be transferred to the GPU and made …\nLike a <code>BufferVec</code>, but only reserves space on the GPU for …\n8 bit integer RGBA, [0, 255] converted to/from …\nThree unsigned 10-bit integers and one 2-bit integer, …\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\n8 bit integer RGBA, Srgb-color [0, 255] converted to/from …\na map containing <code>OwnedBindingResource</code>s, keyed by the …\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nIf this is true, use of <code>@builtin(vertex_index)</code> and …\nEnables using 64-bit types for vertex attributes.\nBinding is visible from the vertex and fragment shaders of …\nSupports storage buffers in vertex shaders.\nEnables bindings of writable storage buffers and textures …\nSupports specifying which view format values are allowed …\nAllows using the VK_GOOGLE_display_timing Vulkan extension.\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nDescribes how the vertex buffer is interpreted.\nVertex Format for a <code>VertexAttribute</code> (input).\nWhether a vertex buffer is indexed by vertex or by …\nSupports all the texture usages described in WebGPU. If …\nSame as WaitForSubmissionIndex but waits for the most …\nOn wgpu-core based backends, block until the given …\nInformation about an adapter.\nFeatures that are not guaranteed to be supported.\nRepresents the sets of limits an adapter/device supports.\nWGSL module as a string slice.\nMap only for writing\nThe texture can only be written in the shader and it:\nZero origin.\n0.0\nSet stencil value to zero.\nReserves space for one more element in the buffer and …\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nAdd more <code>BufferUsages</code> to the buffer.\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nAlpha equation.\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe stride, in bytes, between elements of this buffer.\nThe stride, in bytes, between elements of this buffer.\nCreates a bind group for <code>self</code> matching the layout defined …\nCreates a bind group for <code>self</code> matching the layout defined …\nReturn the <code>T</code> <code>ShaderType</code> for <code>self</code>. When used in <code>AsBindGroup</code> …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the bytes representation of the struct, ready to …\nReturns the inner hal CommandEncoder using a callback. The …\nThe copy aspect.\nAspect of the texture. Color textures must be …\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nAsserts that <code>Self</code> meets the requirements of the uniform …\nThe list of attributes which comprise a single vertex.\nThe list of attributes which comprise a single vertex.\nBack face mode.\nBackend used for device\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nThe value added to the vertex index before indexing into …\nBegins recording of a compute pass.\nStart a pipeline statistics query on this compute pass. It …\nBegins recording of a render pass.\nDepth bias state.\nCreates the bind group layout matching all bind groups …\nCreates the bind group layout matching all bind groups …\nReturns a vec of bind group layout entries\nBind groups that this pipeline uses. The first entry will …\nReturns the binding for the buffer if the data has been …\nReturns the binding for the buffer if the data has been …\nReturns the binding for the buffer if the data has been …\nSlot for which binding provides resource. Corresponds to …\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nWait for a render pipeline to finish compiling.\nThe number of bytes one texel block occupies during an …\nBorder color to use when address_mode is …\nReturns a handle to the buffer, if the data has been …\nReturns a handle to the buffer, if the data has been …\nReturns the buffer, if allocated.\nThe buffer to be copied to/from.\nThe buffer to bind.\nThe buffer to be copied to/from.\nThe format of any vertex buffers used with this pipeline.\nThe format of any vertex buffers used with this pipeline.\nBytes per “row” in an image.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nReturns the amount of space that the GPU will use before …\nReturns the amount of space that the GPU will use before …\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nDepth bias clamp value (absolute).\nRemoves all elements from the buffer.\nRemoves all elements from the buffer.\nRemoves all elements from the buffer.\nClears buffer to zero.\nClears texture to zero.\nColor equation.\nThe color attachments of the render pass.\nIf this is enabled, this is a comparison sampler using the …\nComparison function that determines if the fail_op or …\nGet the texture dimension required of this texture view …\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll flags that indicate if the backend is WebGPU compliant\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nSpecifies the values of pipeline-overridable constants in …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nContents of a buffer on creation.\nCopy data from one buffer to another.\nCopy data from a buffer to a texture.\nCopy data from a texture to a buffer.\nCopy data from one texture to another.\nThe number of samples calculated per pixel (for MSAA). For …\nIf this value is Some, indicates this entry is an array. …\nCreates a view of this texture.\nThe face culling mode.\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nWhat operations will be performed on the depth part of the …\nThe depth of the extent or the number of array layers\nThe effect of draw calls on the depth and stencil aspects …\nThe effect of draw calls on the depth and stencil aspects …\nThe depth and stencil attachment of the render pass, if …\nIf disabled, depth will not be written to.\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDimensions of the texture.\nThe dimension of the texture view. For 1D textures, this …\nDispatches compute work operations.\nDispatches compute work operations, based on the contents …\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nThe dynamic offset to use when setting the bind group in a …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnd the pipeline statistics query on this compute pass. It …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is performed when stencil test fails.\nFinishes recording and returns a <code>CommandBuffer</code> that can be …\nThe first index within the index buffer.\nThe instance ID of the first instance to draw.\nThe instance ID of the first instance to draw.\nThe Index of the first vertex to draw.\nDrops the lifetime relationship to the parent command …\nFormat of the texture.\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nFormat of the texture view. Either must be the same as the …\nThe compiled fragment stage, its entry point, and the …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nFront face mode.\nThe face to consider the front for the purpose of culling …\nGet the compilation info for the shader module.\nTry to retrieve a compute pipeline GPU object from a …\nGet the compute pipeline descriptor a cached render …\nGet the state of a cached compute pipeline.\nReturns the label\nReturns the label\nTry to retrieve a render pipeline GPU object from a cached …\nGet the render pipeline descriptor a cached render …\nGet the state of a cached render pipeline.\nCreates a writer that can be used to directly write …\nReturns the format features guaranteed by the WebGPU spec.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nHeight of the extent\nReturns the <code>BindGroupId</code>.\nReturns the <code>ComputePipelineId</code>.\nReturns the <code>TextureId</code>.\nReturns the <code>TextureViewId</code>.\nReturns the <code>SamplerId</code>.\nThe index to use in a shader into the array.\nThe number of indices to draw.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts debug marker.\nInserts debug marker.\nThe number of instances to draw.\nThe number of instances to draw.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> for BCn compressed formats.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the buffer is empty.\nReturns true if the buffer is empty.\nReturns true if no elements have been added to this …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nlabel\nlabel\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label of the texture. This will show up in graphics …\nDebug label of the bind group. This will show up in …\nDebug label of the bind group layout. This will show up in …\nDebug label of the compute pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the pipeline layout. This will show up in …\nDebug label of the render pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the sampler. This will show up in graphics …\nDebug label of the shader module. This will show up in …")
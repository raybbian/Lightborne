searchState.loadedDescShard("bevy_render", 1, "Debug label of the texture view. This will show up in …\nDebug label of a buffer. This will show up in graphics …\nDebug label of the pipeline. This will show up in graphics …\nReturns the layer range of a subresource range describes …\nThe layout of the texture data in this buffer.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of the texture data in this buffer.\nThe layout of bind groups for this pipeline.\nReturns the number of items that have been pushed to this …\nReturns the number of items that have been pushed to this …\nReturns the length of the buffer.\nProcesses the asset in an asynchronous closure.\nHow data should be read through this attachment.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nAllows a buffer to be mapped immediately after they are …\nBitmask that restricts the samples of a pixel modified by …\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nHow to filter the texture when it needs to be minified …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nCreates a new <code>RawBufferVec</code> with the given <code>BufferUsages</code>.\nCreates a new <code>BufferVec</code> with the given <code>BufferUsages</code>.\nCreates a new <code>UninitBufferVec</code> with the given <code>BufferUsages</code>.\nCreate a new pipeline cache associated with the given …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDefines where the occlusion query results will be stored …\nBase offset of the buffer, in bytes.\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nThe binary operation applied to the source and destination,\nWhat operations will be performed on this color attachment.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns an iterator over the pipelines in the pipeline …\nReturns the number of planes a multi-planar format has.\nControls the way each polygon is rasterized. Can be either …\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nThe properties of the pipeline at the primitive assembly …\nThe properties of the pipeline at the primitive assembly …\nProcess the pipeline queue and create all pending …\nAdds a new value and returns its index.\nAdds a new value and returns its index.\nPush data into the <code>DynamicUniformBuffer</code>’s internal …\nSet of push constant ranges this pipeline uses. Each …\nThe push constant ranges for this pipeline. Supply an …\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nInsert a compute pipeline into the cache, and queue its …\nInsert a render pipeline into the cache, and queue its …\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nReturns the required features (if any) in order to use the …\nCreates a <code>Buffer</code> on the <code>RenderDevice</code> with size at least …\nCreates a <code>Buffer</code> on the <code>RenderDevice</code> with size at least …\nMaterializes the buffer on the GPU with space for <code>capacity</code> …\nResolves a query set, writing the results into the …\nThe view that will receive the resolved output if …\nResource to attach to the binding\n“Rows” that make up a single “image”.\nSample count of texture. If this is not 1, texture must …\nReturns the sample type compatible with this format and …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the data the buffer stores.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the active bind group for a given bind group index. …\nChanges the debugging label of the buffer.\nChanges the debugging label of the buffer.\nSets the active compute pipeline.\nSet push constant data for subsequent dispatch calls.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nLocation for this input. Must match the location in the …\nReturns the size of <code>Self</code> at runtime\nReturns the byte size of the format.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nReturns the size multiple requirement for a texture using …\nSlope depth biasing factor.\nSource code for the shader.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nStencil state.\nWhat operations will be performed on the stencil part of …\nHow often this vertex buffer is “stepped” forward.\nHow often this vertex buffer is “stepped” forward.\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee …\nThe number of bytes occupied per pixel in a color …\nThe color state of the render targets.\nThe color state of the render targets.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nRemoves the third dimension from this origin\nAdds color space and premultiplied alpha information to …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nReduces the length of the buffer.\nReduces the length of the buffer.\nThe type of the binding\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a vec of (binding index, <code>OwnedBindingResource</code>). In …\nConvenience method to “unwrap” a pipeline state into …\nUsages of a buffer. If the buffer is used in any way that …\nAllowed usages of the texture. If used in other ways, the …\nUsages of a buffer. If the buffer is used in any way that …\nReturns true if the state relies on the constant color, …\nModify the current limits to use the buffer alignment …\nModify the current limits to use the resolution limits of …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nThe compiled vertex stage, its entry point, and the input …\nThe number of vertices to draw.\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nCalculates the volume of the <code>Extent3d</code>.\nReturns a iterator of the IDs of all currently waiting …\nWidth of the extent\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nMaterializes the buffer on the GPU, with an appropriate …\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nQueues writing of data from system RAM to VRAM using the …\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nX position of the origin\nThe number of work groups in X dimension.\nY position of the origin\nThe number of work groups in Y dimension.\nZ position of the origin\nThe number of work groups in Z dimension.\nWhether workgroup scoped memory will be initialized with …\nWhether to zero-initialize workgroup memory by default. If …\nWhether to zero-initialize workgroup memory by default. If …\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nHelper type meant to be used together with the <code>ShaderType</code> …\nTrait implemented for WGSL runtime-sized arrays and WGSL …\nDynamic storage buffer wrapper facilitating RW operations\nDynamic uniform buffer wrapper facilitating RW operations\nRepresents WGSL Size (equivalent to <code>ShaderType::min_size</code>)\nTrait implemented for all WGSL fixed-footprint types\nBase trait for all WGSL host-shareable types\nStorage buffer wrapper facilitating RW operations\nUniform buffer wrapper facilitating RW operations\nAsserts that <code>Self</code> meets the requirements of the uniform …\nReturns the size of <code>Self</code> assuming the (contained) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nUsed to implement <code>ShaderType</code> for the given vector type\nUsed to implement <code>ShaderType</code> for the given wrapper type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule containing items necessary to implement <code>ShaderType</code> …\nRepresents the minimum size of <code>Self</code> (equivalent to …\nCreates a new dynamic storage buffer wrapper with an …\nCreates a new dynamic uniform buffer wrapper with an …\nCreates a new dynamic storage buffer wrapper with a given …\nCreates a new dynamic uniform buffer wrapper with a given …\nModule containing items necessary to implement <code>ShaderType</code> …\nReturns the size of <code>Self</code> at runtime\nModule containing items necessary to implement <code>ShaderType</code> …\nHelper type for alignment calculations\nContains the error value\nContains the success value\nHelper type for size calculations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an alignment that is the smallest power of two …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>n</code> is a multiple of this alignment\nReturns the max alignment from an array of alignments\nReturns the amount of padding needed so that <code>n + padding</code> …\nWill round up the given <code>n</code> so that the returned value will …\nWill round up the given <code>n</code> so that the returned value will …\nlength of the contained runtime sized array\nmax elements to read into the contained runtime sized array\nEnables writing to the matrix (via <code>&amp;mut [[T; R]; C]</code>)\nEnables reading from the matrix (via <code>&amp;[[T; R]; C]</code>)\nEnables the creation of a matrix (via <code>[[T; R]; C]</code>)\nUsed to implement <code>ShaderType</code> for the given matrix type\nUsed to implement <code>ShaderType</code> for the given runtime-sized …\nEnables writing to the vector (via <code>&amp;mut [T; N]</code>)\nEnables reading from the vector (via <code>&amp;[T; N]</code>)\nEnables the creation of a vector (via <code>[T; N]</code>)\nUsed to implement <code>ShaderType</code> for the given vector type\nThe handle to the physical device being used for rendering.\nThe <code>AdapterInfo</code> of the adapter in use by the renderer.\nThe context with all information required to interact with …\nThis GPU device is responsible for the creation of most …\nThe GPU instance is used to initialize the <code>RenderQueue</code> and …\nThis queue is used to enqueue tasks for the GPU to execute …\nA wrapper to safely make <code>wgpu</code> types Send / Sync on web …\nAppend a <code>CommandBuffer</code> to the command buffer queue.\nAppend a function that will generate a <code>CommandBuffer</code> to the\nCreates a new <code>TrackedRenderPass</code> for the context, …\nGets the current <code>CommandEncoder</code>.\nInitializes <code>Surface</code> for presentation.\nCreates a new <code>BindGroup</code>.\nCreates a <code>BindGroupLayout</code>.\nCreates a <code>Buffer</code>.\nCreates a <code>Buffer</code> and initializes it with the specified …\nCreates an empty <code>CommandEncoder</code>.\nCreates a <code>ComputePipeline</code>.\nCreates a <code>PipelineLayout</code>.\nCreates an empty <code>RenderBundleEncoder</code>.\nCreates a <code>RenderPipeline</code>.\nCreates a new <code>Sampler</code>.\nCreates a <code>ShaderModule</code> from either SPIR-V or WGSL source …\nCreates a new <code>Texture</code>.\nCreates a new <code>Texture</code> and initializes it with the …\nGets the diagnostics recorder, used to track elapsed time …\nList all <code>Features</code> that may be used with this device.\nFinalizes and returns the queue of <code>CommandBuffer</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the renderer by retrieving and preparing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all <code>Limits</code> that were requested of this device.\nCreates a new <code>RenderContext</code> from a <code>RenderDevice</code>.\nCheck for resource cleanups and mapping callbacks.\nGets the underlying <code>RenderDevice</code>.\nUpdates the <code>RenderGraph</code> with all of its nodes and then …\nReturns the wgpu <code>Device</code>.\nWhether wgpu should expose adapters that run on top of …\nLets the rendering plugin create resources itself.\nNo explicit minor version is requested, the driver …\nSupported when targeting the web through webassembly with …\nRepresents the backends that wgpu will use.\nWebGPU default features and limits\nGenerate debug information in shaders and objects.\nDon’t pass labels to wgpu-hal.\nSupported on Windows 10 and later\nSelects which DX12 shader compiler to use.\nThe Dxc compiler is new, fast and maintained.\nThe maximum supported features and limits of the adapter …\nThe Fxc compiler (default) is old, slow and unmaintained.\nSupported on Linux/Android, the web through webassembly …\nEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. …\nSelects which OpenGL ES 3 minor version to request.\nAdapter that has the highest performance. This is often a …\nInstance debugging flags.\nAdapter that uses the least possible power. This is often …\nSupported on macOS/iOS\nApplications that have control over the content that is …\nAllows renderer resource initialization to happen outside …\nHints to the device about the memory allocation strategy.\nFavor memory usage over performance.\nPower usage is not considered when choosing an adapter.\nAll the apis that wgpu offers first tier of support for.\nFavor performance over memory usage (the default value).\nPower Preference when choosing a physical adapter.\nAn enum describing how the renderer will initialize …\nAll the apis that wgpu offers second tier of support for. …\nEnable validation, if possible.\nSupported on Windows, Linux/Android, and macOS/iOS via …\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nWebGPU default limits plus additional constraints in order …\nFeatures that are not guaranteed to be supported.\nRepresents the sets of limits an adapter/device supports.\nProvides configuration for renderer initialization. Use …\nConfigures the priority used when automatically …\nEnable advanced debugging and validation flags …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe constraints on limits allowed regardless of what the …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nEnable recommended debugging and validation flags.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe features to ensure are disabled regardless of what the …\nThe shader compiler to use for the DX12 backend.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe features to ensure are enabled regardless of what the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer good defaults from the build type\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nAllows you to choose which minor version of GLES3 to use …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThese are for controlling WGPU’s debug information to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe imposed limits.\nFunction to create a <code>RenderCreation::Manual</code> variant.\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nThis hints to the WGPU device about the preferred memory …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet a features/limits priority from the environment …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe path to pass to wgpu for API call tracing. This only …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns this set of flags, affected by environment …\nPath to the <code>dxcompiler.dll</code> file, or path to the directory …\nPath to the <code>dxil.dll</code> file, or path to the directory …\nDefines the range of allowed memory block sizes for …\nA storage buffer that is prepared as a <code>RenderAsset</code> and …\nA storage buffer that is prepared as a <code>RenderAsset</code> and …\nAdds <code>ShaderStorageBuffer</code> as an asset that is extracted and …\nThe asset usage of the storage buffer.\nThe buffer description used to create the buffer.\nOptional data used to initialize the buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new storage buffer with the given data and asset …\nSets the data of the storage buffer to the given <code>ShaderType</code>…\nCreates a new storage buffer with the given size and asset …\nPlugin that registers a component for automatic sync to …\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nComponent added on the render world entities to keep track …\nA <code>HashMap</code> pre-configured to use <code>EntityHash</code> hashing with a …\nA <code>HashSet</code> pre-configured to use <code>EntityHash</code> hashing with a …\nComponent added on the main world entities that are synced …\nMarker component that indicates that its entity needs to …\nA plugin that synchronizes entities with <code>SyncToRenderWorld</code> …\nMarker component that indicates that its entity needs to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cached GPU <code>Texture</code> with corresponding <code>TextureView</code>.\nA wrapper for a <code>CachedTexture</code> that is used as a …\nA wrapper for a <code>TextureView</code> that is used as a depth-only …\nA <code>RenderApp</code> resource that contains the default “fallback …\nA <code>RenderApp</code> resource that contains a “cubemap fallback …\nA Cache of fallback textures that uses the sample count …\nA <code>RenderApp</code> resource that contains a <em>zero-filled</em> “…\nThe GPU-representation of an <code>Image</code>. Consists of the <code>Texture</code>…\nAdds the <code>Image</code> as an asset and makes sure that they are …\nA wrapper for a <code>TextureView</code> that is used as a …\nA handle to a 1 x 1 transparent white image.\nThis resource caches textures that are created repeatedly …\nFallback image for <code>TextureViewDimension::Cube</code>.\nFallback image for <code>TextureViewDimension::CubeArray</code>.\nFallback image for <code>TextureViewDimension::D1</code>.\nFallback image for <code>TextureViewDimension::D2</code>.\nFallback image for <code>TextureViewDimension::D2Array</code>.\nFallback image for <code>TextureViewDimension::D3</code>.\nCreates image settings with linear sampling by default.\nCreates image settings with nearest sampling by default.\nThe default image sampler to use when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nRetrieves a texture that matches the <code>descriptor</code>. If no …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment. The attachment …\nGet this texture view as an attachment, without the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the texture cache contains no textures.\nConverts the extracted image into a <code>GpuImage</code>.\nUpdates the cache and only retains recently used textures.\nUpdates the <code>TextureCache</code> to only retains recently used …\nConfigures filmic color grading parameters to adjust the …\nFilmic color grading values applied to the image as a …\nA section of color grading values that can be selectively …\nThe <code>ColorGrading</code> structure, packed into the most efficient …\nComponent for configuring the number of samples for …\nContains <code>OutputColorAttachment</code> used for each target …\nReturns an iterator that visits the shadows, midtones, and …\nApplies the given mutating function to the shadows, …\nClears the view target <code>OutputColorAttachment</code>s.\nAdjusts the range of colors.\nExposure value (EV) offset, measured in stops.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nA linear luminance adjustment, mainly affecting the middle …\nA nonlinear luminance adjustment, mainly affecting the …\nRetrieve this target’s main texture’s color attachment.\nRetrieve this target’s “unsampled” main texture’s …\nFilmic color grading values applied to the image as a …\nColor grading values that are applied to the lighter parts …\nAn adjustment to the hue, in radians.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if and only if the main texture is …\nA fixed luminance adjustment, mainly affecting the lower …\nThe “main” unsampled texture.\nThe <em>other</em> “main” unsampled texture. In most cases you …\nThe <em>other</em> “main” unsampled texture view. In most cases …\nThe “main” unsampled texture.\nColor grading values that are applied to the parts of the …\nThe luminance (brightness) ranges that are considered part …\nThe final texture this view will render to.\nThe format of the final texture this view will render to\nThis will start a new “post process write”, which …\nSaturation adjustment applied after tonemapping. Values …\nPrepares the view target <code>OutputColorAttachment</code> for each …\nCreates a 3D rangefinder for a view\nThe “main” sampled texture.\nThe “main” sampled texture view.\nValues below 1.0 desaturate, with a value of 0.0 resulting …\nColor grading values that are applied to the darker parts …\nAn adjustment made to the CIE 1931 chromaticity <em>x</em> value.\nAn adjustment made to the CIE 1931 chromaticity <em>y</em> value.\nCreates a new <code>ColorGrading</code> instance in which shadows, …\nLabel for the <code>calculate_bounds</code>, <code>calculate_bounds_2d</code> and …\nLabel for the <code>check_visibility</code> system updating …\nAn entity that is invisible in the hierarchy.\nAn entity that cannot be seen from any views.\nAn entity with <code>Visibility::Hidden</code> will be unconditionally …\nAn entity with <code>Visibility::Inherited</code> will inherit the …\nWhether or not an entity is visible in the hierarchy. This …\nAn identifier for a rendering layer.\nUse this component to opt-out of built-in frustum culling …\nDescribes which rendering layers an entity belongs to.\nStores information related to <code>VisibilityRange</code>s in the …\nCollection of entities visible from the current view.\nLabel for <code>update_frusta</code> in <code>CameraProjectionPlugin</code>.\nWe need at least 4 storage buffer bindings available to …\nAn entity that is visible in the hierarchy.\nAlgorithmically-computed indication of whether an entity …\nUser indication of whether an entity is visible. …\nA <code>Bundle</code> of the <code>Visibility</code>, <code>InheritedVisibility</code>, and …\nLabel for the system propagating the <code>InheritedVisibility</code> …\nSpecifies the range of distances that this entity must be …\nA plugin that enables <code>VisibilityRange</code>s, which allow …\nAn entity with <code>Visibility::Visible</code> will be unconditionally …\nCollection of entities visible from the current view.\nStores which entities are in within the <code>VisibilityRange</code>s …\nCreates a new <em>abrupt</em> visibility range, with no crossfade.\nGet the bitmask representation of the contained layers.\nReturns a reference to the GPU buffer that stores …\nComputes and adds an <code>Aabb</code> component to entities with a …\nSystem updating the visibility of entities each frame.\nChecks all entities against all views in order to …\nBy default, this structure includes layer <code>0</code>, which …\nThe range of distances, in world units, between which this …\nReturns true if the entity has a visibility range and it …\nReturns true if the entity is in range of any view.\nReturns true if the entity is in range of the given camera.\nExtracts all <code>VisibilityRange</code> components from the main …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>RenderLayers</code> from a list of layers.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns <code>true</code> if the entity is visible in the hierarchy. …\nReturns <code>true</code> if the entity is visible in any view. …\nReturns the set of layers shared by two instances of …\nDetermine if a <code>RenderLayers</code> intersects another.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if both the start and end transitions for …\nReturns true if the object is completely invisible, given …\nReturns true if the object will be visible at all, given a …\nGet an iterator of the layers.\nCreate a new <code>RenderLayers</code> belonging to the given layer.\nReturns the index in the GPU buffer corresponding to the …\nCreate a new <code>RenderLayers</code> that belongs to no layers.\nSets the visibility to <code>true</code>. This should not be considered …\nThe range of distances, in world units, between which this …\nReturns all layers included in exactly one of the …\nToggles between <code>Visibility::Inherited</code> and …\nToggles between <code>Visibility::Inherited</code> and …\nToggles between <code>Visibility::Visible</code> and <code>Visibility::Hidden</code>.\nReturns all layers included in either instance of …\nUpdates <code>Frustum</code>.\nIf set to true, Bevy will use the center of the …\nThe visibility of the entity.\nAdd the given layer.\nRemoves the given rendering layer.\nWrites the <code>RenderVisibilityRanges</code> table to the GPU.\nCreates window surfaces.\nAn entity that contains the components in <code>Window</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(re)configures window surfaces, and obtains a swapchain …\nNote: this will not always be the swap chain texture view. …\nA marker component that indicates that a screenshot has …\nA marker component that indicates that a screenshot is …\nA component that signals to the renderer to capture a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCapture a screenshot of the provided render target image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCapture a screenshot of the primary window, if one exists.\nSaves the captured screenshot to disk at the provided path.\nCapture a screenshot of the provided manual texture view.\nCapture a screenshot of the provided window entity.")
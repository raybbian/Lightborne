searchState.loadedDescShard("bevy_egui", 0, "This crate provides an Egui integration for the Bevy game …\nBegins the <code>egui</code> pass.\nA resource for accessing clipboard.\nA component for storing <code>bevy_egui</code> context.\nA component for storing Egui context settings.\nA helper SystemParam that provides a way to get <code>EguiContext</code>…\nIntermediate output buffer generated on an Egui pass end …\nA resource for storing global plugin settings.\nIs used for storing Egui context input.\nSubsets of the <code>EguiPreUpdateSet::ProcessInput</code> set.\nAll the systems are enabled by default. These settings …\nRepresents a texture allocated and painted by Egui.\nContains textures allocated and painted by Egui.\nStores last Egui output.\nAdds all Egui resources and render graph nodes.\nSystem sets that run during the <code>PostUpdate</code> schedule.\nSystem sets that run during the <code>PreUpdate</code> schedule.\nIs used for storing Egui shapes and textures delta.\nContexts with this component will render UI to a specified …\nThe <code>bevy_egui</code> plugin startup system sets.\nA resource for storing <code>bevy_egui</code> user textures.\nEnds Egui pass.\nProcesses window mouse button click and touch events, …\nInitializes Egui contexts for available windows.\nInitializes Egui contexts for newly created render targets.\nReads key modifiers state and pointer positions.\nThe ordering value used for <code>bevy_picking</code>.\nPost-processing of Egui output (updates textures, browser …\nReads Egui inputs (keyboard, mouse, etc) and writes them …\nProcesses Egui output, reads paint jobs for the renderer.\nProcesses rest of the events for both window and …\nStores physical size and scale factor, is used as a helper …\nAutomatically generated <code>WorldQuery</code> item type for …\nAutomatically generated <code>WorldQuery</code> type for a read-only …\nAutomatically generated <code>WorldQuery</code> item type for …\nFeeds all the events into <code>EguiInput</code>.\nCan accept either a strong or a weak handle.\nCan accept either a strong or a weak handle.\nMarks a pass start for Egui.\nControls if Egui should capture pointer input when using …\nCaptures pointers on egui windows for <code>bevy_picking</code>.\nStored in full so we can do partial updates (which bevy …\nAllows to get multiple contexts at the same time. This …\nEgui context of a specific entity.\nEgui context of the primary window.\nEgui render node.\nSet this to <code>false</code> if you want to disable updating focused …\nMarks a pass end for Egui.\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nThis system is responsible for deleting image assets of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGets clipboard contents. Returns <code>None</code> if clipboard …\nBorrows the underlying Egui context mutably.\nAssets store handle.\nA handle of an image to render to.\nReturns the height of the render target.\nHelpers for converting Bevy types into Egui ones and vice …\nReturns an associated Egui texture id.\nReturns an associated Egui texture id.\nSystems for translating Bevy input events into Egui input.\nControls running of the input systems.\nControls running of the input systems.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the output has no Egui shapes and no …\nCustomizable <code>LoadOp</code> for the render node which will be …\nCreates a component from an image handle and sets …\nThe names of <code>bevy_egui</code> nodes.\nSystems for handling Egui output.\nPairs of rectangles and paint commands.\nPhysical height\nPhysical width\nThe field gets updated during the …\nRemoves the image handle and an Egui texture id associated …\nRemoves the image handle and an Egui texture id associated …\nPlugin systems for the render app.\nControls if Egui is run manually.\nControls running of the <code>write_ime_events_system</code> system.\nControls running of the <code>write_keyboard_input_events_system</code> …\nControls running of the <code>write_modifiers_keys_state_system</code> …\nControls running of the <code>write_mouse_wheel_events_system</code> …\nControls running of the …\nControls running of the …\nControls running of the <code>write_pointer_button_events_system</code> …\nControls running of the …\nControls running of the <code>write_window_touch_events_system</code> …\nGlobal scale factor for Egui widgets (<code>1.0</code> by default).\nScale factor\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_archetype</code> for each member that …\nSets clipboard contents.\nSAFETY: we call <code>set_table</code> for each member that implements …\nSAFETY: we call <code>set_table</code> for each member that implements …\nAdds bevy_egui components to newly created windows.\nThe change in egui textures since last frame.\nFallible variant of <code>EguiContexts::ctx_for_entity_mut</code>.\nFallible variant of <code>EguiContexts::ctx_mut</code>.\nUpdates textures painted by Egui.\nUpdates UI <code>egui::RawInput::screen_rect</code> and calls …\nReturns the width of the render target.\nEgui shader.\nCallback to execute custom ‘wgpu’ rendering inside …\nCallback that executes custom rendering logic\nEgui render node.\nEgui render pipeline.\nKey for specialized pipeline.\nIs used to make a render node aware of a render target …\nRender to an image.\nRender to a window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a pipeline key from a window.\nConstructs a pipeline key from a gpu image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs Egui render node.\nCreates a new <code>egui::epaint::PaintCallback</code> from a callback …\nPaint callback call before render step\nPaint callback render step\nRender target type (e.g. window, image).\nTexture bind group layout.\nTexture format of a window’s swap chain to render to.\nTransform bind group layout.\nPaint callback will be rendered in near future, all data …\nMatches the implementation of …\nMatches the implementation of …\nConverts <code>egui::Pos2</code> into <code>bevy_math::Vec2</code>.\nConverts <code>egui::Rect</code> into <code>bevy_math::Rect</code>.\nTranslates <code>egui::CursorIcon</code> into …\nConverts <code>egui::Vec2</code> into <code>bevy_math::Vec2</code>.\nConverts <code>bevy_math::Rect</code> into <code>egui::Rect</code>.\nConverts <code>bevy_math::Vec2</code> into <code>egui::Pos2</code>.\nConverts <code>bevy_math::Vec2</code> into <code>egui::Vec2</code>.\nIndicates whether IME is enabled or disabled to avoid …\nCached pointer position, used to populate …\nStores an active touch id.\nWraps Egui events emitted by <code>crate::EguiInputSet</code> systems.\nStores an entity of a focused non-window context (to push …\nInsert this resource when a pointer hovers over a …\nStores “pressed” state of modifier keys.\nIndicates whether the <code>Key::Alt</code> key is pressed.\nContext to pass an event to.\nIndicates whether the <code>Key::Control</code> key is pressed.\nWrapped event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nIndicates whether IME is enabled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nActive touch id.\nPointer position.\nIndicates whether the <code>Key::Shift</code> key is pressed.\nReturns <code>true</code> if modifiers shouldn’t prevent text input …\nConverts the struct to <code>egui::Modifiers</code>.\nIndicates whether the <code>Key::Super</code> (or <code>Key::Meta</code>) key is …\nReads <code>EguiInputEvent</code> events and feeds them to Egui.\nReads <code>Ime</code> events and wraps them into <code>EguiInputEvent</code>, can …\nReads <code>KeyboardInput</code> events and wraps them into …\nReads <code>KeyboardInput</code> events to update the <code>ModifierKeysState</code> …\nReads <code>MouseWheel</code> events and wraps them into <code>EguiInputEvent</code>…\nReads <code>CursorMoved</code> events and wraps them into <code>EguiInputEvent</code>…\nReads <code>TouchInput</code> events and wraps them into <code>EguiInputEvent</code> …\nReads <code>MouseButtonInput</code> events and wraps them into …\nReads <code>MouseButtonInput</code> events and wraps them into …\nReads <code>TouchInput</code> events and wraps them into <code>EguiInputEvent</code>.\nThe main egui pass.\nReads Egui output.\n<code>RenderLabel</code> type for the Egui pass.\nCached Pipeline IDs for the specialized instances of …\nMaps Egui textures to bind groups.\nCorresponds to Egui’s <code>egui::TextureId</code>.\nScale and translation for rendering Egui shapes. Is needed …\nDescribes the transform buffer.\nThe extracted version of <code>EguiManagedTextures</code>.\nExtracted Egui settings.\nExtracted Egui textures.\nTextures allocated via Egui.\nTextures allocated via Bevy.\nBind group.\nUniform buffer.\nMaps Egui managed texture ids to Bevy image handles.\nGeneration of the window entity.\nIndex of the window entity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculates the transform from window size and scale factor.\nCreates a pass from a “render to image” Egui context.\nCreates a pass from a window Egui context.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns an iterator over all textures (both Egui and Bevy …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Entity is from the main world.\nPrepares Egui transforms.\nQueues bind groups.\nQueue <code>EguiPipeline</code> instances specialized on each window’…\nRender target type (e.g. window, image).\nIs affected by window size and …\nSets up render nodes for newly created “render to texture…\nSets up render nodes for newly created window Egui …\nTears render nodes down for deleted “render to texture”…\nTears render nodes down for deleted window Egui contexts.\nNormally equals <code>Vec2::new(-1.0, 1.0)</code>.\nMaps Bevy managed texture handles to Egui user texture ids.")
searchState.loadedDescShard("ena", 0, "An implementation of union-find. See the <code>unify</code> module for …\nA utility class for implementing “snapshottable” …\nModule which contains the snapshot/rollback functionality …\nUnion-find implementation. The main type is …\nNew variable with given index was created.\nExtensible set of actions\nVariable with given index was changed <em>from</em> the given value.\nCommits all changes since the last snapshot. Of course, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable pointer into the vec; whatever changes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SnapshotVec</code>. If <code>L</code> is set to <code>()</code> then most …\nReserve space for new values, just like an ordinary vec.\nUpdates the element at the given index. The old value will …\nUpdates all elements. Potentially more efficient – but …\nCreates a <code>SnapshotVec</code> using the <code>undo_log</code>, allowing …\nCreates a <code>SnapshotVec</code> using the <code>undo_log</code>, allowing …\nA trait implemented for storage types (like …\nSnapshots are tokens that should be created/consumed …\nA trait which extends <code>UndoLogs</code> to allow snapshots to be …\nA trait which allows undo actions (<code>T</code>) to be pushed which …\nA basic undo log.\nReturns the slice of actions that were taken since the …\nRemoves all items from the undo log.\nCommit: keep the changes that have been made since the …\nExtends the undo log with many undos.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if <code>self</code> has made any changes since snapshot …\nTrue if a snapshot has started, false otherwise\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many open snapshots this undo log currently has\nPushes a new “undo item” onto the undo log. This …\nRollback (undo) the changes made to <code>storage</code> since the …\nStarts a new snapshot. That snapshot must eventually …\nA convenient helper for unification values which must be …\nDefines the type to return when merging of two values …\nBacking store for an in-place unification table. Not …\nA unification table that uses an “in-place” vector.\nA struct which can never be instantiated. Used for the …\nAt any time, users may snapshot a unification table.  The …\nLargely internal trait implemented by the unification table\nTable of unification keys and their values. You must …\nThis trait is implemented by any type that can serve as a …\nTrait implemented for <strong>values</strong> associated with a unification …\nValue of a unification key. We implement Tarjan’s …\nCommits all changes since the last snapshot. Of course, …\nGiven a key, returns the (current) root key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of keys created so far.\nCreates a fresh key with the given value.\nYou should return first the key that should be used as …\nReturns the current value for the given key. If the key has\nReserve memory for <code>num_new_keys</code> to be created. Does not …\nClears all unifications that have been performed, …\nReverses all changes since the last snapshot. Also removes …\nStarts a new snapshot. Each snapshot must be either rolled …\nObtains current value for key without any pointer chasing; …\nGiven two values, produce a new value that combines them. …\nSets the value of the key <code>a_id</code> to <code>b</code>, attempting to merge …\nUnions together two variables, merging their values. If …\nUnions two keys without the possibility of failure; only …\nUnions a key and a value without the possibility of …\nGiven two keys, indicates whether they have been unioned …\nReturns the keys of all variables created since the …\nCreates a <code>UnificationTable</code> using an external <code>undo_log</code>, …\nCreates a <code>UnificationTable</code> using an external <code>undo_log</code>, …")
searchState.loadedDescShard("bevy_ecs_tilemap", 0, "Bevy ECS Tilemap plugin is a ECS driven tilemap rendering …\nThe default tilemap bundle. All of the components within …\nA bevy tilemap plugin. This must be included in order for …\nBy default, <code>FrustumCulling</code> is <code>true</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nUser indication of whether tilemap should be frustum …\nUser indication of whether tilemap should be frustum …\nA module which provides helper functions.\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA module which contains tilemap components.\nA module which exports commonly used dependencies.\nA module which contains tile components.\nUser indication of whether an entity is visible\nUser indication of whether an entity is visible\nFills an entire tile storage with the given tile.\nFills a hexagonal region with the given <code>tile_texture</code>.\nFills a rectangular region with the given tile.\nFills a rectangular region with colored versions of the …\nGenerates a vector of hex positions that form a ring of …\nGenerates a vector of hex positions that form a hexagon of …\nCalculates a <code>Transform</code> for a tilemap that places it so …\nCode for the axial coordinate system.\nVarious constants that are helpful for hex grid related …\nCode for the cube coordinate system\nCode for the offset coordinate system.\nA position in a hex grid labelled according to …\nThe matrix for mapping from <code>AxialPos</code>, to world position …\nA fractional axial position can represent a point that …\nThe inverse of <code>COL_BASIS</code>.\nThe inverse of <code>ROW_BASIS</code>.\nThe matrix for mapping from <code>AxialPos</code>, to world position …\nConverts an axial position into a tile position in the …\nConverts an axial position into a tile position in the …\nTry converting into a <code>TilePos</code>.\nConvert naively into a <code>TilePos</code>.\nReturns the center of a hex tile world space, assuming …\nReturns the center of a hex tile world space, assuming …\nReturns the coordinate of the corner of a hex tile in the …\nReturns the coordinate of the corner of a hex tile in the …\nReturns the offset to the corner of a hex tile in the …\nReturns the offset to the corner of a hex tile in the …\nReturns the distance between <code>self</code> and <code>other</code> on the hex …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an axial position into a tile position in the …\nReturns the axial position of the hex grid containing the …\nReturns the axial position of the hex grid containing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe magnitude of an axial position is its distance away …\nProject a vector, representing a fractional axial position …\nProject a vector representing a fractional axial position …\n2/sqrt(3)\nsqrt(3)/2\n1/sqrt(3)\nsqrt(3)\nIdentical to <code>AxialPos</code>, but has an extra component <code>s</code>. …\nReturns the distance between <code>self</code> and <code>other</code> in the cube …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe magnitude of a cube position is its distance away from …\nReturns <code>self</code> rounded to a <code>CubePos</code> that contains <code>self</code>. This …\nArray of <code>HexDirection</code> variants.\nOffsets of tiles that lie in each <code>HexDirection</code>.\nCompass directions of a tile in hexagonal column-oriented …\nNeighbors of a hexagonal tile. <code>Zero</code> corresponds with <code>East</code> …\nStores some data <code>T</code> associated with each neighboring hex …\nCompass directions of a tile in hexagonal row-oriented …\nApplies the supplied closure <code>f</code> with an <code>and_then</code> to each …\nApplies the supplied closure <code>f</code> with an <code>and_then</code> to each …\nReturns the entities associated with each tile position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates <code>HexNeighbors&lt;T&gt;</code> from a closure that takes a hex …\nCreates <code>Self</code> using <code>default()</code>.\nGet an item that lies in a particular hex direction, …\nGet a mutable reference to an item that lies in a …\nGet a mutable reference to the optional item that lies in …\nReturns neighboring tile positions, given a coordinate …\nReturns neighboring tile positions on a map using …\nReturns neighboring tile positions on a map using …\nReturns neighboring tile positions on a map using …\nReturns neighboring tile positions on a map using …\nReturns neighboring tile positions. This works for maps …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over neighbors, in the order specified by …\nApplies the supplied closure <code>f</code> with a <code>map</code> to each neighbor …\nSet item that lies in a particular hex direction.\nTry converting into a <code>TilePos</code>.\nTry converting into a <code>TilePos</code>.\nTry converting into a <code>TilePos</code>.\nTry converting into a <code>TilePos</code>.\nConvert naively into a <code>TilePos</code>.\nConvert naively into a <code>TilePos</code>.\nConvert naively into a <code>TilePos</code>.\nConvert naively into a <code>TilePos</code>.\nReturns the position of this tile’s center, in world …\nReturns the position of this tile’s center, in world …\nReturns the position of this tile’s center, in world …\nReturns the position of this tile’s center, in world …\nReturns the position of the corner of a hex tile in the …\nReturns the position of the corner of a hex tile in the …\nReturns the position of the corner of a hex tile in the …\nReturns the position of the corner of a hex tile in the …\nReturns the offset to the corner of a hex tile in the …\nReturns the offset to the corner of a hex tile in the …\nReturns the offset to the corner of a hex tile in the …\nReturns the offset to the corner of a hex tile in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the tile containing the given world position.\nReturns the tile containing the given world position.\nReturns the tile containing the given world position.\nReturns the tile containing the given world position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the tile offset from <code>self</code> in the given <code>HexDirection</code>.\nGet the tile offset from <code>self</code> in the given <code>HexDirection</code>.\nGet the tile offset from <code>self</code> in the given <code>HexDirection</code>.\nGet the tile offset from <code>self</code> in the given <code>HexDirection</code>.\nGet the tile offset from <code>self</code> in the given <code>HexRowDirection</code>.\nGet the tile offset from <code>self</code> in the given <code>HexRowDirection</code>.\nGet the tile offset from <code>self</code> in the given <code>HexColDirection</code>.\nGet the tile offset from <code>self</code> in the given <code>HexColDirection</code>.\nPosition for tiles arranged in a square coordinate system.\nTry converting into a <code>TilePos</code>.\nReturns the position of this tile’s center, in world …\nReturns the coordinate of the corner of a tile in the …\nReturns the offset to the corner of a tile in the …\nCode for the isometric diamond coordinate system.\nReturns the argument unchanged.\nReturns the tile containing the given world position.\nCalls <code>U::from(self)</code>.\nCalculate offset in the given direction.\nProject a vector representing a fractional tile position …\nThe matrix mapping from tile positions in the diamond …\nPosition for tiles arranged in <code>Diamond</code> isometric …\nThe inverse of <code>DIAMOND_BASIS</code>.\nTry converting into a <code>TilePos</code>.\nReturns the position of this tile’s center, in world …\nReturns the coordinate of the corner of a tile in the …\nReturns the offset to the corner of a tile in the …\nReturns the argument unchanged.\nReturns the tile containing the given world position.\nCalls <code>U::from(self)</code>.\nCalculate offset in the given direction.\nProject a vector representing a fractional tile position …\nArray of cardinal `SquareDirections (N, W, S, E).\nStores some data <code>T</code> associated with each neighboring grid …\nArray of <code>SquareDirection</code> variants.\nOffsets of tiles that lie in each <code>SquareDirection</code>.\nThe eight directions in which a neighbor may lie, on a …\nApplies the supplied closure <code>f</code> with an <code>and_then</code> to each …\nApplies the supplied closure <code>f</code> with an <code>and_then</code> to each …\nReturns the entities associated with each tile position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates <code>SquareNeighbors&lt;T&gt;</code> from a closure that takes a …\nCreates <code>Self</code> using <code>default()</code>.\nGet an item that lies in a particular square direction.\nGet a mutable reference to an item that lies in a …\nGet a mutable reference to the optional item that lies in …\nReturns neighboring tile positions for a tile position in …\nReturns neighboring tile positions for a tile position in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this direction a cardinal direction (i.e. North, South, …\nIs this direction a diagonal direction (i.e. NorthEast, …\nIterate over neighbors, in the order specified by …\nIterate over neighbors, in the order specified by …\nApplies the supplied closure <code>f</code> with a <code>map</code> to each neighbor …\nSet item that lies in a particular square direction.\nPosition for tiles arranged in <code>Staggered</code> isometric …\nTry converting into a <code>TilePos</code>.\nReturns the position of this tile’s center, in world …\nReturns the coordinate of the corner of a tile in the …\nReturns the offset to the corner of a tile in the …\nReturns the argument unchanged.\nReturns the tile containing the given world position.\nCalls <code>U::from(self)</code>.\nCalculate offset in the given direction.\nCalculates the <code>Aabb</code> of a generic chunk. The AABB depends …\nCalculates the world-space position of the bottom-left of …\nThe default chunk_size (in tiles) used per mesh.\nDifferent hex grid coordinate systems. You can find out …\nUsed to specify rendering of tilemaps on hexagons.\nDifferent isometric coordinate systems.\nUsed to change the rendering mode to Isometric.\nAll textures for tiles are inside a single image asset.\nA tilemap with rectangular tiles.\nThe tiles are provided as array layers inside a KTX2 or …\nSize of the tiles on the grid in pixels. This can be used …\nA component which stores a reference to the tilemap entity.\nCustom parameters for the render pipeline.\nSize of the tilemap in tiles.\nSpacing between tiles in pixels inside of the texture …\nSize of the atlas texture in pixels.\nSize of the tiles in pixels\nThe type of tile to be rendered, currently we support: …\nEach tile’s texture has its own image asset (each asset …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDimensions of a “chunk” in tiles. Chunks are grouping …\nSets images with the <code>COPY_SRC</code> flag.\nIf true, uses the chunk’s <code>z</code> and <code>y</code> values when sorting …\nA bevy world resource that allows you to add atlas …\nDefaults to ImageSettings.\nReturns this material’s fragment shader. If …\nReturns this material’s fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCustomizes the default <code>RenderPipelineDescriptor</code>.\nCustomizes the default <code>RenderPipelineDescriptor</code>.\nReturns this material’s vertex shader. If …\nReturns this material’s vertex shader. If …\nA component that is attached to a Tile entity that tells …\nThis an optional tile bundle with default components.\nA custom color for the tile.\nFlips the tiles texture along the X, Y or diagonal axes\nA tile position in the tilemap grid.\nUsed to store tile entities for fast look up. Tile …\nA texture index into the atlas or texture array for a …\nHides or shows a tile based on the boolean. Default: True\nGet the center of this tile in world space.\nGets a tile entity for the given tile position, if:\nRemove any stored entity at the given tile position, if …\nSets a tile entity for the given tile position, if the …\nGet the neighbor lying in the specified direction from …\nCreates a new tile storage that is empty.\nThe end frame index in the tilemap atlas/array (exclusive).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry converting a pair of <code>i32</code> numbers into a <code>TilePos</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nGets a tile entity for the given tile position, if an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator with all of the positions in the grid.\nReturns mutable iterator with all of the positions in the …\nRemove entity at the given tile position, if there was …\nSets a tile entity for the given tile position.\nThe speed the animation plays back at.\nGet the neighbor lying in the specified direction from …\nGet the neighbor lying in the specified direction from …\nThe start frame index in the tilemap atlas/array …\nConverts a tile position (2D) into an index in a flattened …\nChecks to see if <code>self</code> lies within a tilemap of the …\nFlip tile along the x axis.\nFlip tile along the Y axis.")
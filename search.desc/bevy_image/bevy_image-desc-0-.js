searchState.loadedDescShard("bevy_image", 0, "Function always passes\nClamp the value to the border of the texture Requires the …\nClamp the value to the edge of the texture.\nDefault image sampler, derived from the <code>ImagePlugin</code> setup.\nCustom sampler for this image which will override global …\nFunction passes if new value is equal to existing value. …\nThe extension of an image file, for example <code>&quot;png&quot;</code>.\nAn error that occurs when loading a texture from a file.\nThe direct format of the image\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\nLoads HDR textures as Texture assets\nHow edges should be handled in texture addressing.\nComparison function used for depth and stencil operations.\nTexel mixing mode when sampling between texels.\nLoader for images that can be read by the <code>image</code> crate.\nUsed in <code>Image</code>, this determines what image sampler to use …\nColor variation to use when the sampler addressing mode is …\nIndicates to an <code>ImageLoader</code> how an <code>Image</code> should be sampled.\nThe type of a raw image buffer.\nOnly cubemaps with six faces are supported.\nErrors that occur while converting an <code>Image</code> into a …\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nLinear Interpolation.\nThe mime type of an image, for example <code>&quot;image/png&quot;</code>.\nRepeat the texture, mirroring it every repeat.\nNearest neighbor sampling.\nFunction never passes\nFunction passes if new value is not equal to existing …\nRGBA color <code>[0, 0, 0, 1]</code>.\nRGBA color <code>[1, 1, 1, 1]</code>.\nRepeat the texture in a tiling fashion.\nGets the list of file extensions for all formats.\nFull list of supported formats.\nAn error that occurs when accessing specific pixels in a …\nAn error that occurs when loading a texture\nExtends the wgpu <code>TextureFormat</code> with information about the …\nRGBA color <code>[0, 0, 0, 0]</code>.\nEncountered an unknown error during conversion.\nConversion into dynamic image not supported for source …\nUsed to calculate the volume of an item.\nOn the Metal wgpu backend, this is equivalent to …\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nGet a flags value with all known bits set.\nMust be at least 1. If this is not 1, all filter modes …\nReturns the aspect ratio (width / height) of a 2D image.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBorder color to use when <code>address_mode</code> is …\nIf this is enabled, this is a comparison sampler using the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nConvert a texture from a format to another. Only a few …\ndefault is a 1x1x1 all ‘1.0’ texture\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nLoad a bytes buffer in a <code>Image</code>, according to type …\nConverts a <code>DynamicImage</code> to an <code>Image</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nRead the color of a specific pixel (2D texture).\nRead the color of a specific pixel (1D texture).\nRead the color of a specific pixel (3D texture).\nInitialize the descriptor if it is not already initialized.\nReturns the height of a 2D image.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether the texture format is compressed or uncompressed\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns an image sampler with <code>ImageFilterMode::Linear</code> min …\nReturns a sampler descriptor with <code>Linear</code> min and mag …\nProcesses the asset in an asynchronous closure.\nProcesses the asset in an asynchronous closure.\nMaximum level of detail (i.e. mip level) to use.\nMinimum level of detail (i.e. mip level) to use.\nHow to filter the texture when it needs to be magnified …\nHow to filter the texture when it needs to be minified …\nHow to filter between mip map levels\nReturns an image sampler with <code>ImageFilterMode::Nearest</code> min …\nReturns a sampler descriptor with <code>Nearest</code> min and mag …\nCreates a new image from raw binary data and the …\nCreates a new image loader that supports the provided …\nCreates a new image from raw binary data and the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet a reference to the data bytes where a specific pixel’…\nGet a mutable reference to the data bytes where a specific …\nCompute the byte offset where the data of a specific pixel …\nReturns the size of a pixel in bytes of the format.\nChanges the <code>size</code>, asserting that the total number of data …\nTakes a 2D image containing vertically stacked images of …\nThe intersection of a source flags value with the …\nResizes the image to the new size, by removing information …\nThe <code>ImageSampler</code> to use during rendering.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChange the color of a specific pixel (2D texture).\nChange the color of a specific pixel (1D texture).\nChange the color of a specific pixel (3D texture).\nReturns the size of a 2D image.\nReturns the size of a 2D image as f32.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets the file extensions for a given format.\nGets the MIME types for a given format.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nA transparent white 1x1x1 image.\nConvert a <code>Image</code> to a <code>DynamicImage</code>. Useful for editing image\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the width of a 2D image.")
searchState.loadedDescShard("bevy_ecs", 1, "Iterates over all resources in the world.\nMutably iterates over all resources in the world.\nWhen called from within an exclusive system (a <code>System</code> that …\nSets <code>World::last_change_tick()</code> to the specified value …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets metadata indicating the location where the current …\nGets an <code>EntityRef</code> for multiple entities at once.\nGets mutable access to multiple entities at once.\nCreates a new builder with no access.\nCreates a new builder with no access.\nCreates a new empty <code>World</code>.\nCreate a new, unique <code>WorldId</code>. Returns <code>None</code> if the supply …\nGets an immutable reference to the non-send resource of …\nGets a mutable reference to the non-send resource of the …\nGets a mutable reference to the non-send resource of the …\nCreates an <code>Observer</code> listening for events of type <code>E</code> …\nEnsures the entry has this component by inserting the …\nEnsures the entry has this component by inserting the …\nEnsures the entry has this component by inserting the …\nPush a <code>Command</code> onto the queue.\nReturns <code>Query</code> for the given <code>QueryState</code>, which is used to …\nReturns <code>QueryState</code> for the given <code>QueryData</code>, which is used …\nReturns <code>QueryState</code> for the given filtered <code>QueryData</code>, which …\nReads the current change tick of this world.\nReborrow self as a new instance of <code>DeferredWorld</code>\nReturns a new instance with a shorter lifetime. This is …\nReturns a new instance with a shorter lifetime. This is …\nReturns a new instance with a shorter lifetime. This is …\nReturns a new instance with a shorter lifetime.\nProvides additional functionality for <code>World</code> when the …\nSimilar to <code>Self::register_system</code>, but allows passing in a …\nRegisters all of the components in the given <code>Bundle</code> and …\nRegisters a new <code>Component</code> type and returns the <code>ComponentId</code> …\nReturns a mutable reference to the <code>ComponentHooks</code> for a …\nReturns a mutable reference to the <code>ComponentHooks</code> for a …\nRegisters a new <code>Component</code> type and returns the <code>ComponentId</code> …\nRegisters the given component <code>R</code> as a required component …\nRegisters the given component <code>R</code> as a required component …\nRegisters a new <code>Resource</code> type and returns the <code>ComponentId</code> …\nRegisters a new <code>Resource</code> type and returns the <code>ComponentId</code> …\nRegisters a system and returns a <code>SystemId</code> so it can later …\nRegisters a system or returns its cached <code>SystemId</code>.\nRemoves any components in the <code>Bundle</code> from the entity.\nRemoves a dynamic <code>Component</code> from the entity if it exists.\nRemoves the resource of a given type, if it exists. …\nRemoves a <code>!Send</code> resource from the world and returns it, if …\nRemoves the resource of a given type and returns it, if it …\nRemoves the resource of a given type, if it exists. …\nRemoves all components in the <code>Bundle</code> and remove all …\nReturns an iterator of entities that had components of …\nRetrieves this world’s <code>RemovedComponentEvents</code> collection\nReturns an iterator of entities that had components with …\nGets a reference to the resource of the given type\nReturns the <code>ComponentId</code> of the given <code>Resource</code> type <code>T</code>.\nGets a mutable reference to the resource of the given type\nGets a mutable reference to the resource of the given type\nGets a reference to the resource of the given type\nTemporarily removes the requested resource from this <code>World</code>…\nRemoves any components except those in the <code>Bundle</code> (and its …\nRuns the <code>Schedule</code> associated with the <code>label</code> a single time.\nRun stored systems by their <code>SystemId</code>. Before running a …\nRuns a cached system, registering it if necessary.\nRuns a cached system with an input, registering it if …\nRun a stored chained system by its <code>SystemId</code>, providing an …\nTemporarily removes the schedule associated with <code>label</code> …\nSends an <code>Event</code>. This method returns the ID of the sent …\nSends an <code>Event</code>. This method returns the ID of the sent …\nSends a batch of <code>Event</code>s from an iterator. This method …\nSends a batch of <code>Event</code>s from an iterator. This method …\nSends the default value of the <code>Event</code> of type <code>E</code>. This …\nSends the default value of the <code>Event</code> of type <code>E</code>. This …\nSpawns a new <code>Entity</code> with a given <code>Bundle</code> of components and …\nSpawns a batch of entities with the same component <code>Bundle</code> …\nSpawns a new <code>Entity</code> and returns a corresponding …\nRetrieves this world’s <code>Storages</code> collection.\nRemoves all components in the <code>Bundle</code> from the entity and …\nRemoves the component from the entry and returns it.\nSends a “global” <code>Trigger</code> without any targets.\nTriggers the given <code>event</code> for this entity, which will run …\nTriggers the given <code>Event</code>, which will run any <code>Observer</code>s …\nTriggers the given <code>Event</code> as a mutable reference, which …\nSends a <code>Trigger</code> with the given <code>targets</code>.\nTriggers the given <code>Event</code> for the given <code>targets</code>, which will …\nTriggers the given <code>Event</code> as a mutable reference for the …\nPerforms the same function as <code>Self::despawn</code> but does not …\nFor a given batch of (<code>Entity</code>, <code>Bundle</code>) pairs, adds the …\nFor a given batch of (<code>Entity</code>, <code>Bundle</code>) pairs, adds the …\nTries to register the given component <code>R</code> as a required …\nTries to register the given component <code>R</code> as a required …\nAttempts to run the <code>Schedule</code> associated with the <code>label</code> a …\nTemporarily removes the schedule associated with <code>label</code> …\nRemoves a registered system and returns the system, if it …\nRemoves a cached system and its <code>CachedSystemId</code> resource.\nContains types that allow disjoint mutable access to a …\nUpdates the internal entity location to match the current …\nGets read-only access to the world that the current entity …\nReturns this entity’s world.\nGives mutable access to this entity’s <code>World</code> in a …\nThe component with the given <code>ComponentId</code> was requested …\nThe entity with the given ID was requested mutably more …\nAn error that occurs when dynamically retrieving …\nAn error that occurs when fetching entities mutably from a …\nThe component with the given <code>ComponentId</code> does not exist on …\nThe entity with the given ID does not exist.\nThe error type returned by <code>World::try_run_schedule</code> if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe given <code>Entity</code> does not have a <code>Component</code> corresponding …\nThe error type returned by <code>World::get_reflect</code> and …\nThe <code>World</code> was missing the <code>AppTypeRegistry</code> resource.\nThe <code>World</code>’s <code>TypeRegistry</code> did not contain <code>TypeData</code> for …\nThere is no <code>ComponentId</code> corresponding to the given <code>TypeId</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>ComponentId</code> corresponding to the given <code>TypeId</code>.\nThe name corresponding to the <code>Component</code> with the given …\nThe given <code>Entity</code>.\nThe given <code>TypeId</code>.\nA interior-mutable reference to a particular <code>Entity</code> and …\nVariant of the <code>World</code> where resource and component accesses …\nReturns the archetype that the current entity belongs to.\nRetrieves this world’s <code>Archetypes</code> collection.\nRetrieves this world’s <code>Bundles</code> collection.\nGets the current change tick of this world.\nRetrieves this world’s <code>Components</code> collection.\nReturns <code>true</code> if the current entity has a component of type …\nReturns <code>true</code> if the current entity has a component …\nReturns <code>true</code> if the current entity has a component with …\nRetrieves this world’s <code>Entities</code> collection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nGets the component of the given <code>ComponentId</code> from the …\nRetrieves the change ticks for the given component. This …\nRetrieves the change ticks for the given <code>ComponentId</code>. This …\nRetrieves an <code>UnsafeEntityCell</code> that exposes read and write …\nSafety\nRetrieves a mutable untyped reference to the given <code>entity</code>…\nGets a reference to the non-send resource of the given …\nGets a <code>!Send</code> resource to the resource with the id …\nGets a mutable reference to the non-send resource of the …\nGets a <code>!Send</code> resource to the resource with the id …\nSafety\nGets a reference to the resource of the given type if it …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a mutable reference to the resource of the given type …\nGets a pointer to the resource with the id <code>ComponentId</code> if …\nGets a reference including change detection to the …\nRetrieves this world’s unique ID.\nReturns the ID of the current entity.\nIncrements the world’s current change tick and returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn self into a <code>DeferredWorld</code>\nReturns the <code>Tick</code> indicating the last time that …\nReturns the id of the last ECS event that was fired. Used …\nGets metadata indicating the location where the current …\nRetrieves this world’s collection of removed components.\nProvides unchecked access to the internal data stores of …\nGets a reference to the <code>&amp;World</code> this <code>UnsafeWorldCell</code> …\nGets the world that the current entity belongs to.\nGets a reference to the <code>World</code> this <code>UnsafeWorldCell</code> belong …\nGets a mutable reference to the <code>World</code> this <code>UnsafeWorldCell</code> …")
searchState.loadedDescShard("bevy_animation", 0, "Animation for the game engine Bevy\nThe UUID namespace of animation targets (e.g. bones).\nAn animation that an <code>AnimationPlayer</code> is currently either …\nA list of <code>VariableCurve</code>s and the <code>AnimationTargetId</code>s to …\nA mapping from <code>AnimationTargetId</code> (e.g. bone in a skinned …\nA type alias for <code>EntityMutExcept</code> as used in animation.\nWhy Bevy failed to evaluate an animation.\nTemporary data that the <code>animate_targets</code> system maintains.\nAnimation controls.\nAdds animation support to an app\nAn entity that can be animated by an <code>AnimationPlayer</code>.\nA unique UUID for an animation target (e.g. bone in a …\nThe component to be animated isn’t present on the …\nThe animation will finish after running “n” times.\nThe animation will never finish.\nAn internal error occurred in the implementation of …\nThe animation will finish after running once.\nThe component to be animated was present, but the property …\nRepetition behavior of an animation.\nContains an animation curve which is used to animate a …\nAdds an <code>AnimationCurve</code> to an <code>AnimationTarget</code> named by an …\nAdd a untargeted <code>Event</code> to this <code>AnimationClip</code>.\nAdd a untargeted event function to this <code>AnimationClip</code>.\nAdd an event function to an <code>AnimationTarget</code> named by an …\nAdd an <code>Event</code> to an <code>AnimationTarget</code> named by an …\nLike <code>add_curve_to_target</code>, but adding a <code>VariableCurve</code> …\nMultiplies the speed of all active animations by the given …\nA system that advances the time for all playing animations.\nCheck if all playing animations have finished, according …\nCheck if all playing animations are paused.\nTraits and type for interpolating between values.\nA system that modifies animation targets (e.g. bones in a …\nReturns an <code>AnimatedField</code> with a given <code>$component</code> and <code>$field</code>…\nReturns the <code>ActiveAnimation</code> associated with the given …\nThe <code>AnimationCurve</code> trait and adaptors that allow curves to …\nReturns true if the animation is currently playing or …\nReturns a mutable reference to the <code>ActiveAnimation</code> …\nReturns the number of times this animation has completed.\n<code>VariableCurve</code>s for each animation target. Indexed by the …\nGets the curves for a single animation target.\nGets mutable references of the curves for a single …\nGet mutable references of <code>VariableCurve</code>s for each …\nDuration of the clip, represented in seconds.\nReturns the amount of time the animation has been playing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>AnimationTargetId</code> by hashing a list of …\nCreates a new <code>AnimationTargetId</code> by hashing a single name.\nCreates a new <code>AnimationTargetId</code> by hashing a list of names.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nConcrete curve structures used to load glTF curves into …\nThe animation graph, which allows animations to be blended …\nThe ID of this animation target.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the animation has finished, based on its …\nReturns true if this animation is currently paused.\nReturns true if the animation is playing in reverse.\nReturns true if the animation is currently playing or …\nCreate a new <code>VariableCurve</code> from an animation curve.\nPause the animation.\nResume all playing animations.\nStart playing an animation, unless the requested animation …\nThe entity containing the <code>AnimationPlayer</code>.\nIterates through all animations that this <code>AnimationPlayer</code> …\nIterates through all animations that this <code>AnimationPlayer</code> …\nThe animation prelude.\nMarks this animation as repeating forever.\nReturns the repeat mode assigned to this active animation.\nReset back to the initial state as if no time has elapsed.\nUnpause the animation.\nResume all active animations.\nSeeks to the beginning of the animation.\nRewinds all active animations.\nSeeks all active animations forward or backward by the …\nReturns the seek time of the animation.\nSeeks to a specific time in the animation.\nSet the duration of the clip in seconds.\nSets the repeat mode for this playing animation.\nSeeks to a specific time in the animation.\nSets the speed of the animation playback.\nSets the weight of this animation.\nReturns the speed of the animation playback.\nStart playing an animation, restarting it if necessary.\nStops playing the given animation, removing it from the …\nStops all currently-playing animations.\nAnimation transitions.\nReturns the current weight of this animation.\nAn animatable value type.\nAn individual input for <code>Animatable::blend</code>.\nWhether or not to additively blend this input into the …\nBlends one or more values together.\nReturns the argument unchanged.\nInterpolates between <code>a</code> and <code>b</code> with  a interpolation factor …\nEvaluates a cubic Bézier curve at a value <code>t</code>, given two …\nCalls <code>U::from(self)</code>.\nThe input value to be blended.\nThe individual item’s weight. This may not be bound to …\nThis type allows the conversion of a curve valued in the …\nAn <code>AnimatableCurveEvaluator</code> for <code>AnimatableProperty</code> …\nA curve defined by keyframes with values in an animatable …\nA value on a component that Bevy can animate.\nA <code>Component</code> field that can be animated, defined by a …\nThis trait collects the additional requirements on top of …\nA low-level trait that provides control over how curves …\nA low-level trait for use in <code>crate::VariableCurve</code> that …\nCorresponds to a specific field on a specific component …\nThe <code>EvaluatorId</code> is used to look up the …\nThe animated property type.\nCorresponds to a custom property of a given type. This …\nThis type allows an <code>IterableCurve</code> valued in <code>f32</code> to be used …\nAdditively blends the top element of the stack with the …\nSamples the curve at the given time <code>t</code>, and pushes the …\nBlends the top element of the stack with the blend …\nReturns a boxed clone of this value.\nPops the top value off the stack and writes it into the …\nReturns a newly-instantiated <code>AnimationCurveEvaluator</code> for …\nThe inner curve whose values are used to animate the …\nThe range of times for which this animation is defined.\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nThe <code>EvaluatorId</code> used to look up the <code>AnimationCurveEvaluator</code>…\nReturns the type ID of the <code>AnimationCurveEvaluator</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the property from the given <code>entity</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nCreate an <code>AnimatableCurve</code> (and thus an <code>AnimationCurve</code>) …\nCreate a new <code>AnimatableKeyframeCurve</code> from the given …\nCreates a new instance of <code>AnimatedField</code>. This operates …\nThe property selector, which defines what component to …\nPushes the current value of the blend register onto the …\nA curve which takes a constant value over its domain. …\nAn error was returned by the internal core constructor.\nA keyframe-defined curve that uses cubic spline …\nA keyframe-defined curve that uses cubic spline …\nA curve which interpolates between keyframes by using …\nThe number of given values was not divisible by a multiple …\nA curve which interpolates weights linearly between …\nA curve which interpolates weights between keyframes in …\nA keyframe-defined curve that “interpolates” by …\nA curve specifying the <code>MorphWeights</code> for a mesh in …\nA keyframe-defined curve that uses cubic interpolation …\nAn error indicating that a multisampling keyframe curve …\nA keyframe-defined curve that uses linear interpolation …\nA keyframe-defined curve that uses stepped “interpolation…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SteppedKeyframeCurve</code>. If the curve could not …\nCreate a new <code>CubicKeyframeCurve</code> from keyframe <code>times</code> and …\nCreate a new <code>CubicRotationCurve</code> from keyframe <code>times</code> and …\nCreate a new <code>WideLinearKeyframeCurve</code>. An error will be …\nCreate a new <code>WideSteppedKeyframeCurve</code>. An error will be …\nCreate a new <code>WideCubicKeyframeCurve</code>.\nThe number that <code>values_given</code> was supposed to be divisible …\nThe number of values given.\nAn <em>additive blend node</em>, which combines the animations of …\nCorresponds to <code>AnimationNodeType::Add</code>.\nA type alias for the <code>petgraph</code> data structure that defines …\nA graph structure that describes how animation clips are …\nAn <code>AssetLoader</code> that can load <code>AnimationGraph</code>s as assets.\nA <code>Handle</code> to the <code>AnimationGraph</code> to be used by the …\nVarious errors that can occur when serializing or …\nAn individual node within an animation graph.\nThe type of an animation mask bitfield.\nThe index of either an animation or blend node in the …\nAnimation node data specific to the type of node (clip, …\nThe fallback that records an asset ID.\nRecords an asset path.\nA <em>blend node</em>, which blends its children according to their …\nCorresponds to <code>AnimationNodeType::Blend</code>.\nA <em>clip node</em>, which plays an animation clip.\nCorresponds to <code>AnimationNodeType::Clip</code>.\nAn I/O error occurred.\nAn error occurred in RON serialization or deserialization.\nA version of <code>Handle&lt;AnimationClip&gt;</code> suitable for …\nA version of <code>AnimationGraph</code> suitable for serializing as an …\nA version of <code>AnimationGraphNode</code> suitable for serializing …\nA version of <code>AnimationNodeType</code> suitable for serializing as …\nAn error occurred in RON deserialization, and the location …\nAn acceleration structure for an animation graph that …\nAcceleration structures for animation graphs that allows …\nAdds a blend node to the animation graph with the given …\nAdds a blend node to the animation graph with the given …\nAdds a blend node to the animation graph with the given …\nAdds a blend node to the animation graph with the given …\nAdds an <code>AnimationClip</code> to the animation graph with the …\nAdds an <code>AnimationClip</code> to the animation graph with the …\nA convenience method to add multiple <code>AnimationClip</code>s to the …\nAdds an edge from the edge <code>from</code> to <code>to</code>, making <code>to</code> a child of\nMasks out the mask groups specified by the given <code>mask</code> …\nMasks out the single mask group specified by <code>group</code>.\nAdds an animation target (bone) to the mask group with the …\nA mapping from node index to a bitfield specifying the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA convenience function for creating an <code>AnimationGraph</code> from …\nA convenience method to create an <code>AnimationGraph</code>s with an …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the <code>AnimationGraphNode</code> associated with the given …\nReturns a mutable reference to the <code>AnimationGraphNode</code> …\nThe <code>petgraph</code> data structure that defines the animation …\nCorresponds to the <code>graph</code> field on <code>AnimationGraph</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcesses the asset in an asynchronous closure.\nA bitfield specifying the mask groups that this node and …\nCorresponds to the <code>mask</code> field on <code>AnimationGraphNode</code>.\nThe mask groups that each animation target (bone) belongs …\nCorresponds to the <code>mask_groups</code> field on <code>AnimationGraph</code>.\nCreates a new animation graph with a root node and no …\nAnimation node data specific to the type of node (clip, …\nCorresponds to the <code>node_type</code> field on <code>AnimationGraphNode</code>.\nReturns an iterator over the <code>AnimationGraphNode</code>s in this …\nRemoves an edge between <code>from</code> and <code>to</code> if it exists.\nUnmasks the mask groups specified by the given <code>mask</code> …\nUnmasks the single mask group specified by <code>group</code>.\nThe index of the root node in the animation graph.\nCorresponds to the <code>root</code> field on <code>AnimationGraph</code>.\nSerializes the animation graph to the given <code>Write</code>r in RON …\nA mapping from each parent node index to the range within …\nA list of the children of each node, sorted in ascending …\nA cached postorder traversal of the graph.\nThe weight of this node, which signifies its contribution …\nCorresponds to the <code>weight</code> field on <code>AnimationGraphNode</code>.\nAn animation that is being faded out as part of a …\nManages fade-out of animation blend factors, allowing for …\nA system that alters the weight of currently-playing …\nA system that removed transitions that have completed from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nObtain the currently playing main animation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>AnimationTransitions</code> component, ready to be …\nPlays a new animation on the given <code>AnimationPlayer</code>, fading …")
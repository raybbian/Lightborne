searchState.loadedDescShard("bevy_ui", 0, "This crate contains Bevy’s UI system, which can be used …\nIndependent of all other nodes, but relative to its parent …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nAutomatically determine the value based on the context and …\nUse the parent node’s <code>AlignItems</code> value to determine how …\nUse the parent node’s <code>JustifyItems</code> value to determine …\nTrack minimum size should be automatically sized\nTrack maximum size should be automatically sized\nRepeat the track to fill available space\nRepeat the track to fill available space but collapse any …\nThe background color of the node\nThe items are packed such that their baselines align.\nThe items are packed such that their baselines align.\nThis item will be aligned at the baseline.\nThis item will be aligned at the baseline.\nBlocks interaction\nUse CSS Block layout model to determine the position of …\nClip any content that overflows outside the border box\nThe border color of the UI node.\nUsed to add rounded corners to a UI node. You can set a UI …\nThe calculated clip of the node\nThe items are packed along the center of the axis.\nThe items are packed along the center of the axis\nThis item will be aligned along the center of the axis.\nThis item will be aligned along the center of the axis.\nThe items are packed along the center of the axis.\nThe items are packed along the center of the axis.\nHide overflowing items by clipping.\nFlex from top to bottom.\nItems are placed by filling each column in turn, adding …\nCombines <code>Column</code> with the dense packing algorithm.\nFlex from bottom to top.\nProvides the computed size and layout properties of the …\nClip any content that overflows outside the content box\nRepeat the track fixed number of times\nBackground color is transparent by default.\nBorder color is transparent by default.\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nThe items are packed in their default position as if no …\nDefines the layout model used by this node.\nThe items are packed towards the end of the axis.\nThe items are packed towards the end of the axis.\nThis item will be aligned with the end of the axis.\nThis item will be aligned with the end of the axis.\nThe items are packed towards the end of the axis.\nThe items are packed towards the end of the axis.\nTrack maximum size should be sized according to the …\nTrack maximum size should be sized according to the …\nUse Flexbox layout model to determine the position of this …\nDefines how flexbox items are ordered within a flexbox\nThe items are packed towards the end of the axis, unless …\nThis item will be aligned with the end of the axis, unless …\nThe items are packed towards the end of the axis, unless …\nThe items are packed towards the end of the axis, unless …\nThe items are packed towards the start of the axis, unless …\nThis item will be aligned with the start of the axis, …\nThe items are packed towards the start of the axis, unless …\nThe items are packed towards the start of the axis, unless …\nDefines if flexbox items appear on a single line or on …\nAfter this label, input interactions with UI entities have …\nDescribes whether the node should block interactions with …\nThe dimension as a fraction of the total available grid …\n<code>GlobalZIndex</code> allows a <code>Node</code> entity anywhere in the UI …\nA contiguous sequence of text glyphs from the same section\nUse CSS Grid layout model to determine the position of …\nControls whether grid items are placed row-wise or …\nRepresents the position of a grid item in a single axis.\nErrors that occur when setting constraints for a …\nA <code>GridTrack</code> is a Row or Column of a CSS Grid. This struct …\nHow many times to repeat a repeated grid track\nHide overflowing items by influencing layout and then …\nThe node has been hovered over\nDescribes what type of input interaction has occurred for …\nMarker used to identify default cameras, they will have …\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nAfter this label, the ui layout state has been updated.\nMaximum curvature. The UI Node will take a capsule shape …\nTrack minimum size should be content sized under a …\nTrack maximum size should be content sized under a …\nTrack minimum size should be content sized under a …\nTrack maximum size should be content sized under a …\nSingle line, will overflow if needed.\nThe base component for UI entities. It describes UI layout …\nMain query for <code>ui_focus_system</code>\nAutomatically generated <code>WorldQuery</code> item type for <code>NodeQuery</code>…\nAutomatically generated <code>WorldQuery</code> type for a read-only …\nAutomatically generated <code>WorldQuery</code> item type for …\nThe type of UI node. This is used to determine how to …\nNothing has happened\nUse no layout, don’t render this node and its children.\nUI will render without anti-aliasing\nUI will render with anti-aliasing\nThe <code>Outline</code> component adds an outline outside the edge of …\nWhether to show or hide overflowing items\nWhether to show or hide overflowing items\nUsed to determine the bounds of the visible area when a UI …\nThe bounds of the visible area when a UI node is clipped.\nClip any content that overflows outside the padding box\nLets interaction pass through\nSet the value as a percentage of its parent node’s …\nTrack minimum size should be a percentage value\nTrack maximum size should be a percentage value\nThe strategy used to position this node\nUI systems ordered after <code>UiSystem::Layout</code>.\nAll UI systems in <code>PostUpdate</code> will run in or after this …\nThe node has been pressed.\nSet this value in logical pixels.\nTrack minimum size should be a fixed pixel value\nTrack maximum size should be a fixed pixel value\nRelative to all other nodes with the <code>PositionType::Relative</code>…\nA component storing the position of the mouse relative to …\nRepresents a <em>possibly</em> repeated <code>GridTrack</code>.\nRepresents the resolved border radius values for a UI node.\nSame way as text direction along the main axis.\nItems are placed by filling each row in turn, adding new …\nCombines <code>Row</code> with the dense packing algorithm.\nOpposite way as text direction along the main axis.\nScroll overflowing items.\nThe scroll position of the node.\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between any …\nThe items are distributed such that the gap between any …\nThe items are distributed such that the gap between and …\nThe items are distributed such that the gap between and …\nAfter this label, the <code>UiStack</code> resource has been updated.\nThe items are packed towards the start of the axis.\nThe items are packed towards the start of the axis.\nThis item will be aligned with the start of the axis.\nThis item will be aligned with the start of the axis.\nThe items are packed towards the start of the axis.\nThe items are packed towards the start of the axis.\nContains entities whose Interaction should be set to None\nThe items are stretched to fill the space they’re given.\nThe items are stretched to fill the space they’re given.\nThis item will be stretched to fill the container.\nThis item will be stretched to fill the space it’s given.\nThe items are stretched to fill the container along the …\nThe items are stretched to fill the container along the …\nIndicates that this root <code>Node</code> entity should be rendered to …\nMarker for controlling whether Ui is rendered with or …\nNumber of shadow samples. A larger value will result in …\nRender pipeline data for a given <code>UiMaterial</code>\nAdds the necessary ECS resources and render logic to …\nThe basic plugin for Bevy UI\nA type which is commonly used to define margins, paddings …\nThe current scale of the UI.\nThe current UI stack, which contains all UI nodes ordered …\nThe label enum labeling the types of systems in the Bevy UI\nSet this value in percent of the viewport’s larger …\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nSet this value in percent of the viewport’s smaller …\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nRepresents the possible value types for layout properties.\nSet this value in percent of the viewport height\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nShow overflowing items.\nSet this value in percent of the viewport width\nTrack minimum size should be a percent of the viewport’s …\nTrack maximum size should be a percent of the viewport’s …\nMultiple lines, if needed.\nSame as <code>FlexWrap::Wrap</code> but new lines will appear before …\nZero curvature. All the corners will be right-angled.\nIndicates that this <code>Node</code> entity’s front-to-back ordering …\nWhether to add the UI picking backend to the app.\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nCreates a new <code>UiRect</code> where all sides have the same value.\nSet all four corners to the same curvature.\nThe aspect ratio of the node (defined as <code>width / height</code>)\nCreate a grid track which is automatically sized to fit …\nCreate a repeating set of grid tracks with automatic size\nPlace the grid item automatically (letting the <code>span</code> …\nCreates a new <code>UiRect</code> where both <code>left</code> and <code>right</code> take the …\nBlurriness of the shadow\nReturns the thickness of the node’s border on each edge …\nThe amount of space between the margins of a node and its …\nClip any content that overflows outside the border box\nReturns the border radius for each of the node’s corners …\nCreates a new <code>UiRect</code> where <code>bottom</code> takes the given value, …\nSets the radii for the bottom left and bottom right …\nThe value corresponding to the bottom side of the UI rect.\nThe vertical position of the bottom edge of the node.\nSets the radius for the bottom left corner. Remaining …\nSets the radius for the bottom right corner. Remaining …\nBox shadows rendering\nClip overflowing items on both axes\nThe rect of the clip\nClip overflowing items on the x axis\nClip overflowing items on the y axis\nThe color of the outline.\nThe shadow’s color\nThe size of the gutters between items in a horizontal …\nClip any content that overflows outside the content box\nReturns the combined inset on each edge including both …\nWhich layout algorithm to use when laying out this node’…\nIf set to false, the UI’s rendering systems won’t be …\nPlace the grid item specifying the <code>end</code> grid line (letting …\nPlace the grid item specifying the <code>end</code> grid line and how …\nExperimental features are not yet stable and may change or …\nExtracts all UI elements associated with a camera into the …\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nCreate a <code>fit-content()</code> grid track with percentage limit.\nCreate a repeating set of <code>fit-content()</code> grid tracks with …\nCreate a <code>fit-content()</code> grid track with fixed pixel limit.\nCreate a repeating set of <code>fit-content()</code> grid tracks with …\nCreate a grid track with a <code>minmax(0, Nfr)</code> size.\nCreate a repeating set of grid tracks with a <code>minmax(0, Nfr)</code>…\nThe initial length of a flexbox in the main axis, before …\nWhether a Flexbox container should be a row or a column. …\nDefines how much a flexbox item should grow if there’s …\nDefines how much a flexbox item should shrink if there’s …\nWhether a Flexbox container should wrap its contents onto …\nCreate a grid track with an <code>fr</code> size. Note that this will …\nCreate a repeating set of grid tracks with an <code>fr</code> size. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nReturns the grid line at which the item should end, or <code>None</code>…\nReturns span for this grid item, or <code>None</code> if not set.\nReturns the grid line at which the item should start, or …\nDefines the size of implicitly created columns. Columns …\nControls whether automatically placed grid items are …\nDefines the size of implicitly created rows. Rows are …\nThe column in which a grid item starts and how many …\nThe row in which a grid item starts and how many rows it …\nDefines the number of columns a grid has and the sizes of …\nDefines the number of rows a grid has and the sizes of …\nThe ideal height of the node. <code>height</code> is used when it is …\nCreates a new <code>UiRect</code> where <code>left</code> and <code>right</code> take the given …\nReturns the inner border radius for each of the node’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse of the scale factor for this node. To …\nCheck if the node is empty. A node is considered empty if …\nOverflow is visible on both axes\nOverflow is visible on this axis\nUsed to control how items are distributed.\nUsed to control how each individual item is aligned by …\nUsed to control how the specified item is aligned within …\nCreates a new <code>UiRect</code> where <code>left</code> takes the given value, and …\nSets the radii for the top left and bottom left corners. …\nThe value corresponding to the left side of the UI rect.\nThe horizontal position of the left edge of the node.\nThe amount of space around a node outside its border.\nWidth of the margin on each edge of the visual box in …\nCreate a grid track which is automatically sized to fit …\nCreate a repeating set of grid tracks with max-content size\nThe maximum height of the node. <code>max_height</code> is used if it …\nThe maximum width of the node. <code>max_width</code> is used if it is …\nCreate a grid track which is automatically sized to fit …\nCreate a repeating set of grid tracks with min-content size\nThe minimum height of the node. <code>min_height</code> is used if it …\nThe minimum width of the node. <code>min_width</code> is used if it is …\nCreate a <code>minmax()</code> grid track.\nCreate a repeating set of <code>minmax()</code> grid track\nA helper function to check if the mouse is over the node\nCreates a new <code>UiRect</code> from the values specified.\nCreate a new outline\nThis module contains basic node bundles used to build UIs\nCursor position relative to the size and position of the …\nVisible area of the Node relative to the size of the …\nThe amount of space between a node’s outline the edge of …\nHow far across the node is scrolled, in logical pixels. (0 …\nHow far down the node is scrolled, in logical pixels. (0 = …\nReturns the amount of space between the outline and the …\nReturns the border radius for each corner of the outline …\nReturns the thickness of the UI node’s outline in …\nReturns the size of the node when including its outline.\nWhether overflowing content should be displayed or clipped.\nHow the bounds of clipped content should be determined\nReturns the thickness of the node’s padding on each edge …\nThe amount of space between the edges of a node and its …\nClip any content that overflows outside the padding box\nCreates a new <code>UiRect</code> from the values specified in …\nCreate a grid track with a percentage size\nCreate a repeating set of grid tracks with a percentage …\nSets the radii to percentage values.\nA picking backend for UI nodes.\nWhether a node should be laid out in-flow with, or …\nThe UI prelude.\nCreates a new <code>UiRect</code> from the values specified in logical …\nCreate a grid track with a fixed pixel size\nCreate a repeating set of grid tracks with a fixed pixel …\nSets the radii to logical pixel values.\nThe range of vertices inside the <code>UiMaterialMeta</code>\nCreate a repetition of a set of tracks\nResolves a <code>Val</code> to its value in logical pixels and returns …\nCompute the logical border radius for a single corner from …\nCreates a new <code>UiRect</code> where <code>right</code> takes the given value, …\nSets the radii for the top right and bottom right corners. …\nThe value corresponding to the right side of the UI rect.\nThe horizontal position of the right edge of the node.\nThe size of the gutters between items in a vertical …\nScroll overflowing items on the x axis\nScroll overflowing items on the y axis\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_archetype</code> for each member that …\nMutate the item, setting the <code>end</code> grid line\nMutate the item, setting the number of tracks the item …\nMutate the item, setting the <code>start</code> grid line\nSAFETY: we call <code>set_table</code> for each member that implements …\nSAFETY: we call <code>set_table</code> for each member that implements …\nThe values here should match the values for the constants …\nThe calculated node size as width and height in physical …\nPlace the grid item automatically, specifying how many …\nHow much the shadow should spread outward.\nThe order of the node in the UI layout. Nodes with a …\nZ offsets of “extracted nodes” for a given entity. …\nPlace the grid item specifying the <code>start</code> grid line …\nPlace the grid item specifying <code>start</code> and <code>end</code> grid lines (…\nPlace the grid item specifying the <code>start</code> grid line and how …\nCreates a new <code>UiRect</code> where <code>top</code> takes the given value, and …\nSets the radii for the top left and top right corners. …\nThe value corresponding to the top side of the UI rect.\nThe vertical position of the top edge of the node.\nSets the radius for the top left corner. Remaining corners …\nSets the radius for the top right corner. Remaining …\nThe system that sets Interaction for all UI elements based …\nUpdates the UI’s layout tree, computes the new layout …\nList of UI nodes ordered from back-to-front\nThe calculated node size as width and height in physical …\nThis module contains systems that update the UI when …\nCreates a new <code>UiRect</code> where <code>top</code> and <code>bottom</code> take the given …\nCreate a grid track with a percentage of the viewport’s …\nCreate a repeating set of grid tracks with the percentage …\nShow overflowing items on both axes\nVisible unclipped area\nCreate a grid track with a percentage of the viewport’s …\nCreate a repeating set of grid tracks with the percentage …\nCreate a grid track with a percentage of the viewport’s …\nCreate a repeating set of grid tracks with the percentage …\nCreate a grid track with a percentage of the viewport’s …\nCreate a repeating set of grid tracks with the percentage …\nThis module contains the basic building blocks of Bevy’s …\nThe ideal width of the node. <code>width</code> is used when it is …\nThe width of the outline.\nReturns the <code>UiRect</code> with its <code>bottom</code> field set to the given …\nReturns the <code>BorderRadius</code> with its <code>bottom_left</code> and …\nReturns the <code>BorderRadius</code> with its <code>bottom_left</code> field set to …\nReturns the <code>BorderRadius</code> with its <code>bottom_right</code> field set …\nReturns the <code>UiRect</code> with its <code>left</code> field set to the given …\nReturns the <code>BorderRadius</code> with its <code>top_left</code> and <code>bottom_left</code> …\nAdd a margin on each edge of the visual box in logical …\nReturns the <code>UiRect</code> with its <code>right</code> field set to the given …\nReturns the <code>BorderRadius</code> with its <code>top_right</code> and …\nReturns the <code>UiRect</code> with its <code>top</code> field set to the given …\nReturns the <code>BorderRadius</code> with its <code>top_left</code> and <code>top_right</code> …\nReturns the <code>BorderRadius</code> with its <code>top_left</code> field set to …\nReturns the <code>BorderRadius</code> with its <code>top_right</code> field set to …\nWhether to show or clip overflowing items on the x axis\nHorizontal offset\nWhether to show or clip overflowing items on the y axis\nVertical offset\nBorder thickness of the UI node. Ordering: left, top, …\nBorder radius of the UI node. Ordering: top left, top …\nIndices into <code>ExtractedUiNodes::glyphs</code>\nContains the vertices and bind groups to be sent to the GPU\nA plugin that enables the rendering of box shadows.\nDescription of a shadow to be sorted and queued for …\nList of extracted shadows to be sorted and queued for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of samples, a higher value results in better …\nPrints a debug representation of the computed layout of …\nMarker component for entities that should be ignored …\nSystem param that gives access to UI children utilities, …\nSystem param that allows iteration of all UI root nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the UI parent of the provided entity, skipping …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven an entity in the UI hierarchy, check if its set of …\nReturns <code>true</code> if the given entity is either a <code>Node</code> or a …\nIterates the <code>GhostNode</code>s between this entity and its UI …\nIterates the children of <code>entity</code>, skipping over <code>GhostNode</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe amount of space available to a node in a given axis …\nA node with a <code>ContentSize</code> component is a node where its …\nThe amount of space available is the specified number of …\nA <code>FixedMeasure</code> is a <code>Measure</code> that ignores all constraints …\nThe amount of space available is indefinite and the node …\nA <code>Measure</code> is used to compute the size of a ui node when …\nThe amount of space available is indefinite and the node …\nA type to serve as Taffy’s node context (which allows …\nCompute free_space given the passed used_space\nCreates a <code>ContentSize</code> with a <code>Measure</code> that always returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to Option Definite values become Some(value). …\nReturns true for definite values, else false\nCompare equality with another AvailableSpace, treating …\nIf passed value is Some then return …\nIf passed value is Some then return …\nCalculate the size of the node given the constraints.\nReturn self if definite or a default value\nReturn self if definite or a the result of the default …\nSet a <code>Measure</code> for the UI node entity with this component\nReturn the definite value. Panic is the value is not …\nReturn the definite value or a default value\nReturn the definite value or the result of the default …\nA UI node that is a button\nA UI node that is an image\nA UI node that is rendered using a <code>UiMaterial</code>\nThe basic UI node.\nThe background color, which serves as a “fill” for …\nThe color of the background that will fill the containing …\nThe background color that will fill the containing node\nThe color of the Node’s border\nThe color of the Node’s border\nThe border radius of the node\nThe border radius of the node\nThe border radius of the node\nMarker component that signals this node is a button\nThe calculated size based on the given image\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nDescribes the logical size of the node\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nWhether this node should block interaction with lower nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe global transform of the node\nThe image of the node.\nThe image of the node\nThe size of the image in pixels\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nInherited visibility of an entity.\nDescribes whether and how the button has been interacted …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>UiMaterial</code> used to render the node.\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nControls the layout (size and position) of the node and …\nThe scroll position of the node,\nThe transform of the node\nThe transform of the node\nThe transform of the node\nThe transform of the node\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nAlgorithmically-computed indication of whether an entity …\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nDescribes the visibility properties of the node\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nIndicates the depth at which the node should appear in the …\nMain query from bevy’s <code>ui_focus_system</code>\nAutomatically generated <code>WorldQuery</code> item type for <code>NodeQuery</code>…\nAutomatically generated <code>WorldQuery</code> type for a read-only …\nAutomatically generated <code>WorldQuery</code> item type for …\nA plugin that adds picking support for UI nodes.\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nSAFETY: we call <code>fetch</code> for each member that implements <code>Fetch</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_archetype</code> for each member that …\nSAFETY: we call <code>set_table</code> for each member that implements …\nSAFETY: we call <code>set_table</code> for each member that implements …\nComputes the UI node entities under each pointer.\nOrdering: top left, top right, bottom right, bottom left.\nMaterials are used alongside <code>UiMaterialPlugin</code> and …\nReturns this materials fragment shader. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns this materials vertex shader. If <code>ShaderRef::Default</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates clipping for all nodes\nThe image will be sized automatically by taking the size …\nMarker struct for buttons\nUsed to calculate the size of UI image nodes\nA UI Node that renders an image.\nThe size of the image’s texture\nMarker struct for labels\nControls how the image is altered to fit within the layout …\nThe texture will be cut in 9 slices, keeping the texture …\nThe image will be resized to match the size of the node. …\nThe top-level UI text component.\n<code>TextBundle</code> was removed in favor of required components. …\nText measurement for UI layout. See <code>NodeMeasure</code>.\nUI text system flags.\nUI alias for <code>TextReader</code>.\nUI alias for <code>TextWriter</code>.\nThe texture will be repeated if stretched beyond …\nThe tint color used to draw the image.\nA transparent 1x1 image with a solid white tint.\nWhether the image should be flipped along its x-axis.\nWhether the image should be flipped along its y-axis.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>ImageNode</code> from an image, with an associated …\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nCreates <code>Self</code> using <code>default()</code>.\nHandle to the texture.\nControls how the image is altered to fit within the layout …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a new <code>Measure</code> for a text node on changes to its …\nChecks if the cosmic text buffer is needed for measuring …\nCreate a new <code>ImageNode</code> with the given texture.\nMakes a new text component.\nAn optional rectangle representing the region of the image …\nThe size of the image’s texture\nThe size of the image’s texture\nCreate a solid color <code>ImageNode</code>.\nUpdates the layout and size information for a UI text node …\nThe (optional) texture atlas used to render the image.\nUpdates content size of the node based on the image …\nReturns true if this mode uses slices internally (…\nSet the color tint\nFlip the image along its x-axis\nFlip the image along its y-axis\nThe texture will repeat when the ratio between the <em>drawing </em>…\nShould the image repeat horizontally\nShould the image repeat vertically")
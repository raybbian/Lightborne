searchState.loadedDescShard("hexasphere", 0, "Library for subdividing shapes made of triangles.\nDefines the geometry of the shape to be subdivided, and …\nNumber of unique edges defined in the contents of …\nA subdivided shape generated from some <code>BaseShape</code> and a …\nA main triangle on the base shape of a subdivided shape.\nRecalculate data after <code>Self::subdivide()</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the indices for the triangles making up the …\nReturns a vector of indices for the wireframe of the …\nAppends the indices for the subdivided form of the …\nAppends indices for the wireframe of the subdivided form of\nAppends indices for the wireframe of the subdivided form of\nAppends indices for the wireframe of the subdivided form of\nCalculate the number of indices which each main triangle …\nThe vertices for all main triangles of the shape. Check …\nBasic function used for interpolation. When <code>p</code> is <code>0.0</code>, <code>a</code> is …\nIf an optimization is available for the case where <code>p</code> is <code>0.5</code>…\nIf an optimization is available for the case where <code>p</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinear distance between two points on this shape.\nCreates a new <code>Triangle</code> given the necessary data.\nCreates the base shape from <code>S</code> and subdivides it.\nCreates the base shape from <code>S</code> and subdivides it.\nCalculate distance from the center of a shape (pentagon or …\nReturns the custom data for each vertex created by the …\nReturns mutable access to the custom data created by the …\nThe vertex positions created by the subdivision process.\nCalculate the number of vertices along the edges of the …\nIncreases the current subdivision count by <code>amount</code>.\nReturns the number of subdivisions applied when this shape …\nMain triangles for the shape; that is, the triangles which …\nCalculate the number of vertices contained within each …\nCalculate the number of vertices contained within each …\nImplements spherical interpolation along the great arc …\nThis is an optimization for the <code>geometric_slerp</code> in the …\nThis is an optimization for the case where multiple points …\nSimple linear interpolation. No weirdness here.\nGives the average of the two points.\nThis is provided as a plug in for people who need it, but …\nPerforms normalized linear interpolation. This creates …\nThis is an optimization of <code>normalized_lerp</code> which avoids a …\nThis is provided as a plug in for people who need it, but …\nImplements a cube as the base shape.\nA cube sphere.\nIcosphere.\nImplements an icosahedron as the base shape.\nNormalized Icosphere.\nImplements the same shape as <code>IcoSphereBase</code>, however it …\nImplements a square as the base shape.\nA square.\nTetrasphere (Sphere from tetrahedron).\nImplements a tetrahedron as the base shape.\nImplements a single triangle as the base shape.\nA triangle.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculate distance from the center of a shape (pentagon or …")